<<<<<<< HEAD
define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__events_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/semantics/binding.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/physics/simulation.dart', 'packages/flutter/src/physics/tolerance.dart'], (function load__packages__flutter__src__animation__animation_controller_dart(dart_sdk, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__semantics__binding$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__physics__simulation$46dart, packages__flutter__src__physics__tolerance$46dart) {
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
<<<<<<< HEAD
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var events = Object.create(dart.library);
  var $leftShift = dartx['<<'];
  dart._checkModuleNullSafetyMode(false);
  var T = {
    DiagnosticsPropertyOfOffset: () => (T.DiagnosticsPropertyOfOffset = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Offset)))(),
    DiagnosticsPropertyOfDuration: () => (T.DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(core.Duration)))(),
    EnumPropertyOfPointerDeviceKind: () => (T.EnumPropertyOfPointerDeviceKind = dart.constFn(diagnostics.EnumProperty$(ui.PointerDeviceKind)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    PointerAddedEventN: () => (T.PointerAddedEventN = dart.constFn(dart.nullable(events.PointerAddedEvent)))(),
    PointerRemovedEventN: () => (T.PointerRemovedEventN = dart.constFn(dart.nullable(events.PointerRemovedEvent)))(),
    PointerHoverEventN: () => (T.PointerHoverEventN = dart.constFn(dart.nullable(events.PointerHoverEvent)))(),
    PointerEnterEventN: () => (T.PointerEnterEventN = dart.constFn(dart.nullable(events.PointerEnterEvent)))(),
    PointerExitEventN: () => (T.PointerExitEventN = dart.constFn(dart.nullable(events.PointerExitEvent)))(),
    PointerDownEventN: () => (T.PointerDownEventN = dart.constFn(dart.nullable(events.PointerDownEvent)))(),
    PointerMoveEventN: () => (T.PointerMoveEventN = dart.constFn(dart.nullable(events.PointerMoveEvent)))(),
    PointerUpEventN: () => (T.PointerUpEventN = dart.constFn(dart.nullable(events.PointerUpEvent)))(),
    PointerScrollEventN: () => (T.PointerScrollEventN = dart.constFn(dart.nullable(events.PointerScrollEvent)))(),
    PointerCancelEventN: () => (T.PointerCancelEventN = dart.constFn(dart.nullable(events.PointerCancelEvent)))()
=======
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const listener_helpers = packages__flutter__src__animation__listener_helpers$46dart.src__animation__listener_helpers;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const binding = packages__flutter__src__semantics__binding$46dart.src__semantics__binding;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  var animation_controller = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  var $clamp = dartx.clamp;
  var $isFinite = dartx.isFinite;
  var $abs = dartx.abs;
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $modulo = dartx['%'];
  var $isOdd = dartx.isOdd;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _AnimationDirectionL: () => (T._AnimationDirectionL = dart.constFn(dart.legacy(animation_controller._AnimationDirection)))(),
    AnimationBehaviorL: () => (T.AnimationBehaviorL = dart.constFn(dart.legacy(animation_controller.AnimationBehavior)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    DiagnosticsPropertyOfAnimationController: () => (T.DiagnosticsPropertyOfAnimationController = dart.constFn(diagnostics.DiagnosticsProperty$(animation_controller.AnimationController)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))()
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
=======
        __proto__: animation_controller._AnimationDirection.prototype,
        [_name$]: "_AnimationDirection.forward",
        index: 0
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C1() {
      return C[1] = dart.const({
<<<<<<< HEAD
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.mouse",
        index: 1
=======
        __proto__: animation_controller._AnimationDirection.prototype,
        [_name$]: "_AnimationDirection.reverse",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T._AnimationDirectionL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: animation_controller.AnimationBehavior.prototype,
        [_name$]: "AnimationBehavior.normal",
        index: 0
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C4() {
      return C[4] = dart.const({
<<<<<<< HEAD
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.unknown",
        index: 4
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///D:/flutterSDK/flutter/packages/flutter/lib/src/gestures/events.dart",
    "package:flutter/src/gestures/events.dart"
  ];
  var embedderId$ = dart.privateName(events, "PointerEvent.embedderId");
  var timeStamp$ = dart.privateName(events, "PointerEvent.timeStamp");
  var pointer$ = dart.privateName(events, "PointerEvent.pointer");
  var kind$ = dart.privateName(events, "PointerEvent.kind");
  var device$ = dart.privateName(events, "PointerEvent.device");
  var position$ = dart.privateName(events, "PointerEvent.position");
  var delta$ = dart.privateName(events, "PointerEvent.delta");
  var buttons$ = dart.privateName(events, "PointerEvent.buttons");
  var down$ = dart.privateName(events, "PointerEvent.down");
  var obscured$ = dart.privateName(events, "PointerEvent.obscured");
  var pressure$ = dart.privateName(events, "PointerEvent.pressure");
  var pressureMin$ = dart.privateName(events, "PointerEvent.pressureMin");
  var pressureMax$ = dart.privateName(events, "PointerEvent.pressureMax");
  var distance$ = dart.privateName(events, "PointerEvent.distance");
  var distanceMax$ = dart.privateName(events, "PointerEvent.distanceMax");
  var size$ = dart.privateName(events, "PointerEvent.size");
  var radiusMajor$ = dart.privateName(events, "PointerEvent.radiusMajor");
  var radiusMinor$ = dart.privateName(events, "PointerEvent.radiusMinor");
  var radiusMin$ = dart.privateName(events, "PointerEvent.radiusMin");
  var radiusMax$ = dart.privateName(events, "PointerEvent.radiusMax");
  var orientation$ = dart.privateName(events, "PointerEvent.orientation");
  var tilt$ = dart.privateName(events, "PointerEvent.tilt");
  var platformData$ = dart.privateName(events, "PointerEvent.platformData");
  var synthesized$ = dart.privateName(events, "PointerEvent.synthesized");
  var transform$ = dart.privateName(events, "PointerEvent.transform");
  var original$ = dart.privateName(events, "PointerEvent.original");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _name = dart.privateName(ui, "_name");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  events.PointerEvent = class PointerEvent extends Object_Diagnosticable$36 {
    get embedderId() {
      return this[embedderId$];
    }
    set embedderId(value) {
      super.embedderId = value;
    }
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get pointer() {
      return this[pointer$];
    }
    set pointer(value) {
      super.pointer = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get down() {
      return this[down$];
    }
    set down(value) {
      super.down = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get synthesized() {
      return this[synthesized$];
    }
    set synthesized(value) {
      super.synthesized = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get original() {
      return this[original$];
    }
    set original(value) {
      super.original = value;
    }
    get localPosition() {
      return this.position;
    }
    get localDelta() {
      return this.delta;
    }
    get distanceMin() {
      return 0.0;
    }
    static transformPosition(transform, position) {
      if (position == null) dart.nullFailed(I[0], 561, 62, "position");
      if (transform == null) {
        return position;
      }
      let position3 = vector_math_64.Vector3.new(position.dx, position.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static transformDeltaViaPositions(opts) {
      let untransformedEndPosition = opts && 'untransformedEndPosition' in opts ? opts.untransformedEndPosition : null;
      if (untransformedEndPosition == null) dart.nullFailed(I[0], 578, 21, "untransformedEndPosition");
      let transformedEndPosition = opts && 'transformedEndPosition' in opts ? opts.transformedEndPosition : null;
      let untransformedDelta = opts && 'untransformedDelta' in opts ? opts.untransformedDelta : null;
      if (untransformedDelta == null) dart.nullFailed(I[0], 580, 21, "untransformedDelta");
      let transform = opts && 'transform' in opts ? opts.transform : null;
      if (transform == null) {
        return untransformedDelta;
      }
      transformedEndPosition == null ? transformedEndPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition) : null;
      let transformedStartPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition['-'](untransformedDelta));
      return transformedEndPosition['-'](transformedStartPosition);
    }
    static removePerspectiveTransform(transform) {
      let t0;
      if (transform == null) dart.nullFailed(I[0], 604, 53, "transform");
      let vector = vector_math_64.Vector4.new(0.0, 0.0, 1.0, 0.0);
      t0 = transform.clone();
      return (() => {
        t0.setColumn(2, vector);
        t0.setRow(2, vector);
        return t0;
      })();
    }
  };
  (events.PointerEvent.new = function(opts) {
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 241, 10, "embedderId");
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 242, 10, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 243, 10, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 244, 10, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 245, 10, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 246, 10, "position");
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    if (delta == null) dart.nullFailed(I[0], 247, 10, "delta");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 248, 10, "buttons");
    let down = opts && 'down' in opts ? opts.down : false;
    if (down == null) dart.nullFailed(I[0], 249, 10, "down");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 250, 10, "obscured");
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    if (pressure == null) dart.nullFailed(I[0], 251, 10, "pressure");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 252, 10, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 253, 10, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 254, 10, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 255, 10, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 256, 10, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 257, 10, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 258, 10, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 259, 10, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 260, 10, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 261, 10, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 262, 10, "tilt");
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    if (platformData == null) dart.nullFailed(I[0], 263, 10, "platformData");
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    if (synthesized == null) dart.nullFailed(I[0], 264, 10, "synthesized");
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[embedderId$] = embedderId;
    this[timeStamp$] = timeStamp;
    this[pointer$] = pointer;
    this[kind$] = kind;
    this[device$] = device;
    this[position$] = position;
    this[delta$] = delta;
    this[buttons$] = buttons;
    this[down$] = down;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[synthesized$] = synthesized;
    this[transform$] = transform;
    this[original$] = original;
    ;
  }).prototype = events.PointerEvent.prototype;
  dart.addTypeTests(events.PointerEvent);
  dart.addTypeCaches(events.PointerEvent);
  dart.setGetterSignature(events.PointerEvent, () => ({
    __proto__: dart.getGetters(events.PointerEvent.__proto__),
    localPosition: ui.Offset,
    localDelta: ui.Offset,
    distanceMin: core.double
  }));
  dart.setLibraryUri(events.PointerEvent, I[1]);
  dart.setFieldSignature(events.PointerEvent, () => ({
    __proto__: dart.getFields(events.PointerEvent.__proto__),
    embedderId: dart.finalFieldType(core.int),
    timeStamp: dart.finalFieldType(core.Duration),
    pointer: dart.finalFieldType(core.int),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    device: dart.finalFieldType(core.int),
    position: dart.finalFieldType(ui.Offset),
    delta: dart.finalFieldType(ui.Offset),
    buttons: dart.finalFieldType(core.int),
    down: dart.finalFieldType(core.bool),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    synthesized: dart.finalFieldType(core.bool),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4)),
    original: dart.finalFieldType(dart.nullable(events.PointerEvent))
  }));
  events._PointerEventDescription = class _PointerEventDescription extends events.PointerEvent {};
  events._PointerEventDescription[dart.mixinOn] = PointerEvent => class _PointerEventDescription extends PointerEvent {
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 617, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("position", this.position));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition, {defaultValue: this.position, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("delta", this.delta, {defaultValue: ui.Offset.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("localDelta", this.localDelta, {defaultValue: this.delta, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfDuration()).new("timeStamp", this.timeStamp, {defaultValue: core.Duration.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("pointer", this.pointer, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.EnumPropertyOfPointerDeviceKind()).new("kind", this.kind, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("device", this.device, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("buttons", this.buttons, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("down", this.down, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressure", this.pressure, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMin", this.pressureMin, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMax", this.pressureMax, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distance", this.distance, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMin", this.distanceMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMax", this.distanceMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("size", this.size, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMajor", this.radiusMajor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMinor", this.radiusMinor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMin", this.radiusMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMax", this.radiusMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("orientation", this.orientation, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("tilt", this.tilt, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("platformData", this.platformData, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("obscured", {value: this.obscured, ifTrue: "obscured", level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("synthesized", {value: this.synthesized, ifTrue: "synthesized", level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("embedderId", this.embedderId, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
    }
    toStringFull() {
      return this.toString({minLevel: diagnostics.DiagnosticLevel.fine});
    }
  };
  dart.addTypeTests(events._PointerEventDescription);
  dart.addTypeCaches(events._PointerEventDescription);
  events._PointerEventDescription[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._PointerEventDescription, () => ({
    __proto__: dart.getMethods(events._PointerEventDescription.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(events._PointerEventDescription, I[1]);
  events._AbstractPointerEvent = class _AbstractPointerEvent extends core.Object {};
  (events._AbstractPointerEvent.new = function() {
    ;
  }).prototype = events._AbstractPointerEvent.prototype;
  dart.addTypeTests(events._AbstractPointerEvent);
  dart.addTypeCaches(events._AbstractPointerEvent);
  events._AbstractPointerEvent[dart.implements] = () => [events.PointerEvent];
  dart.setLibraryUri(events._AbstractPointerEvent, I[1]);
  var ___TransformedPointerEvent_localPosition = dart.privateName(events, "_#_TransformedPointerEvent#localPosition");
  var ___TransformedPointerEvent_localPosition_isSet = dart.privateName(events, "_#_TransformedPointerEvent#localPosition#isSet");
  var ___TransformedPointerEvent_localDelta = dart.privateName(events, "_#_TransformedPointerEvent#localDelta");
  var ___TransformedPointerEvent_localDelta_isSet = dart.privateName(events, "_#_TransformedPointerEvent#localDelta#isSet");
  const _AbstractPointerEvent_Diagnosticable$36 = class _AbstractPointerEvent_Diagnosticable extends events._AbstractPointerEvent {};
  (_AbstractPointerEvent_Diagnosticable$36.new = function() {
  }).prototype = _AbstractPointerEvent_Diagnosticable$36.prototype;
  dart.applyMixin(_AbstractPointerEvent_Diagnosticable$36, diagnostics.Diagnosticable);
  const _AbstractPointerEvent__PointerEventDescription$36 = class _AbstractPointerEvent__PointerEventDescription extends _AbstractPointerEvent_Diagnosticable$36 {};
  (_AbstractPointerEvent__PointerEventDescription$36.new = function() {
  }).prototype = _AbstractPointerEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(_AbstractPointerEvent__PointerEventDescription$36, events._PointerEventDescription);
  events._TransformedPointerEvent = class _TransformedPointerEvent extends _AbstractPointerEvent__PointerEventDescription$36 {
    get embedderId() {
      return this.original.embedderId;
    }
    get timeStamp() {
      return this.original.timeStamp;
    }
    get pointer() {
      return this.original.pointer;
    }
    get kind() {
      return this.original.kind;
    }
    get device() {
      return this.original.device;
    }
    get position() {
      return this.original.position;
    }
    get delta() {
      return this.original.delta;
    }
    get buttons() {
      return this.original.buttons;
    }
    get down() {
      return this.original.down;
    }
    get obscured() {
      return this.original.obscured;
    }
    get pressure() {
      return this.original.pressure;
    }
    get pressureMin() {
      return this.original.pressureMin;
    }
    get pressureMax() {
      return this.original.pressureMax;
    }
    get distance() {
      return this.original.distance;
    }
    get distanceMin() {
      return 0.0;
    }
    get distanceMax() {
      return this.original.distanceMax;
    }
    get size() {
      return this.original.size;
    }
    get radiusMajor() {
      return this.original.radiusMajor;
    }
    get radiusMinor() {
      return this.original.radiusMinor;
    }
    get radiusMin() {
      return this.original.radiusMin;
    }
    get radiusMax() {
      return this.original.radiusMax;
    }
    get orientation() {
      return this.original.orientation;
    }
    get tilt() {
      return this.original.tilt;
    }
    get platformData() {
      return this.original.platformData;
    }
    get synthesized() {
      return this.original.synthesized;
    }
    get localPosition() {
      let t1;
      if (!dart.test(this[___TransformedPointerEvent_localPosition_isSet])) {
        let t0 = events.PointerEvent.transformPosition(this.transform, this.position);
        if (dart.test(this[___TransformedPointerEvent_localPosition_isSet])) dart.throw(new _internal.LateError.fieldADI("localPosition"));
        this[___TransformedPointerEvent_localPosition] = t0;
        this[___TransformedPointerEvent_localPosition_isSet] = true;
      }
      t1 = this[___TransformedPointerEvent_localPosition];
      return t1;
    }
    get localDelta() {
      let t2;
      if (!dart.test(this[___TransformedPointerEvent_localDelta_isSet])) {
        let t1 = events.PointerEvent.transformDeltaViaPositions({transform: this.transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: this.localPosition});
        if (dart.test(this[___TransformedPointerEvent_localDelta_isSet])) dart.throw(new _internal.LateError.fieldADI("localDelta"));
        this[___TransformedPointerEvent_localDelta] = t1;
        this[___TransformedPointerEvent_localDelta_isSet] = true;
      }
      t2 = this[___TransformedPointerEvent_localDelta];
      return t2;
    }
  };
  (events._TransformedPointerEvent.new = function() {
    this[___TransformedPointerEvent_localPosition] = null;
    this[___TransformedPointerEvent_localPosition_isSet] = false;
    this[___TransformedPointerEvent_localDelta] = null;
    this[___TransformedPointerEvent_localDelta_isSet] = false;
    ;
  }).prototype = events._TransformedPointerEvent.prototype;
  dart.addTypeTests(events._TransformedPointerEvent);
  dart.addTypeCaches(events._TransformedPointerEvent);
  dart.setGetterSignature(events._TransformedPointerEvent, () => ({
    __proto__: dart.getGetters(events._TransformedPointerEvent.__proto__),
    embedderId: core.int,
    timeStamp: core.Duration,
    pointer: core.int,
    kind: ui.PointerDeviceKind,
    device: core.int,
    position: ui.Offset,
    delta: ui.Offset,
    buttons: core.int,
    down: core.bool,
    obscured: core.bool,
    pressure: core.double,
    pressureMin: core.double,
    pressureMax: core.double,
    distance: core.double,
    distanceMin: core.double,
    distanceMax: core.double,
    size: core.double,
    radiusMajor: core.double,
    radiusMinor: core.double,
    radiusMin: core.double,
    radiusMax: core.double,
    orientation: core.double,
    tilt: core.double,
    platformData: core.int,
    synthesized: core.bool,
    localPosition: ui.Offset,
    localDelta: ui.Offset
  }));
  dart.setLibraryUri(events._TransformedPointerEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerEvent.__proto__),
    [___TransformedPointerEvent_localPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [___TransformedPointerEvent_localPosition_isSet]: dart.fieldType(core.bool),
    [___TransformedPointerEvent_localDelta]: dart.fieldType(dart.nullable(ui.Offset)),
    [___TransformedPointerEvent_localDelta_isSet]: dart.fieldType(core.bool)
  }));
  events._CopyPointerAddedEvent = class _CopyPointerAddedEvent extends events.PointerEvent {};
  events._CopyPointerAddedEvent[dart.mixinOn] = PointerEvent => class _CopyPointerAddedEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerAddedEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), obscured: (t2$2 = obscured, t2$2 == null ? this.obscured : t2$2), pressureMin: (t2$3 = pressureMin, t2$3 == null ? this.pressureMin : t2$3), pressureMax: (t2$4 = pressureMax, t2$4 == null ? this.pressureMax : t2$4), distance: (t2$5 = distance, t2$5 == null ? this.distance : t2$5), distanceMax: (t2$6 = distanceMax, t2$6 == null ? this.distanceMax : t2$6), radiusMin: (t2$7 = radiusMin, t2$7 == null ? this.radiusMin : t2$7), radiusMax: (t2$8 = radiusMax, t2$8 == null ? this.radiusMax : t2$8), orientation: (t2$9 = orientation, t2$9 == null ? this.orientation : t2$9), tilt: (t2$10 = tilt, t2$10 == null ? this.tilt : t2$10), embedderId: (t2$11 = embedderId, t2$11 == null ? this.embedderId : t2$11)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerAddedEvent);
  dart.addTypeCaches(events._CopyPointerAddedEvent);
  events._CopyPointerAddedEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerAddedEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerAddedEvent.__proto__),
    copyWith: dart.fnType(events.PointerAddedEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerAddedEvent, I[1]);
  const PointerEvent__PointerEventDescription$36 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36.new = function(opts) {
    PointerEvent__PointerEventDescription$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36, events._PointerEventDescription);
  const PointerEvent__CopyPointerAddedEvent$36 = class PointerEvent__CopyPointerAddedEvent extends PointerEvent__PointerEventDescription$36 {};
  (PointerEvent__CopyPointerAddedEvent$36.new = function(opts) {
    PointerEvent__CopyPointerAddedEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerAddedEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerAddedEvent$36, events._CopyPointerAddedEvent);
  events.PointerAddedEvent = class PointerAddedEvent extends PointerEvent__CopyPointerAddedEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerAddedEvent.new((t2 = T.PointerAddedEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerAddedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 810, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 811, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 812, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 813, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 814, 12, "position");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 815, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 816, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 817, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 818, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 819, 12, "distanceMax");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 820, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 821, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 822, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 823, 12, "tilt");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 824, 9, "embedderId");
    events.PointerAddedEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerAddedEvent.prototype;
  dart.addTypeTests(events.PointerAddedEvent);
  dart.addTypeCaches(events.PointerAddedEvent);
  dart.setMethodSignature(events.PointerAddedEvent, () => ({
    __proto__: dart.getMethods(events.PointerAddedEvent.__proto__),
    transformed: dart.fnType(events.PointerAddedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerAddedEvent, I[1]);
  var original$0 = dart.privateName(events, "_TransformedPointerAddedEvent.original");
  var transform$0 = dart.privateName(events, "_TransformedPointerAddedEvent.transform");
  const _TransformedPointerEvent__CopyPointerAddedEvent$36 = class _TransformedPointerEvent__CopyPointerAddedEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerAddedEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerAddedEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerAddedEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerAddedEvent$36, events._CopyPointerAddedEvent);
  events._TransformedPointerAddedEvent = class _TransformedPointerAddedEvent extends _TransformedPointerEvent__CopyPointerAddedEvent$36 {
    get original() {
      return this[original$0];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerAddedEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 854, 38, "original");
    if (transform == null) dart.nullFailed(I[0], 854, 53, "transform");
    this[original$0] = original;
    this[transform$0] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 855, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 855, 40, "transform != null");
    events._TransformedPointerAddedEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerAddedEvent.prototype;
  dart.addTypeTests(events._TransformedPointerAddedEvent);
  dart.addTypeCaches(events._TransformedPointerAddedEvent);
  events._TransformedPointerAddedEvent[dart.implements] = () => [events.PointerAddedEvent];
  dart.setMethodSignature(events._TransformedPointerAddedEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerAddedEvent.__proto__),
    transformed: dart.fnType(events.PointerAddedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerAddedEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerAddedEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerAddedEvent.__proto__),
    original: dart.finalFieldType(events.PointerAddedEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerRemovedEvent = class _CopyPointerRemovedEvent extends events.PointerEvent {};
  events._CopyPointerRemovedEvent[dart.mixinOn] = PointerEvent => class _CopyPointerRemovedEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerRemovedEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), obscured: (t2$2 = obscured, t2$2 == null ? this.obscured : t2$2), pressureMin: (t2$3 = pressureMin, t2$3 == null ? this.pressureMin : t2$3), pressureMax: (t2$4 = pressureMax, t2$4 == null ? this.pressureMax : t2$4), distanceMax: (t2$5 = distanceMax, t2$5 == null ? this.distanceMax : t2$5), radiusMin: (t2$6 = radiusMin, t2$6 == null ? this.radiusMin : t2$6), radiusMax: (t2$7 = radiusMax, t2$7 == null ? this.radiusMax : t2$7), embedderId: (t2$8 = embedderId, t2$8 == null ? this.embedderId : t2$8)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerRemovedEvent);
  dart.addTypeCaches(events._CopyPointerRemovedEvent);
  events._CopyPointerRemovedEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerRemovedEvent.__proto__),
    copyWith: dart.fnType(events.PointerRemovedEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerRemovedEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$ = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$.new = function(opts) {
    PointerEvent__PointerEventDescription$36$.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$, events._PointerEventDescription);
  const PointerEvent__CopyPointerRemovedEvent$36 = class PointerEvent__CopyPointerRemovedEvent extends PointerEvent__PointerEventDescription$36$ {};
  (PointerEvent__CopyPointerRemovedEvent$36.new = function(opts) {
    PointerEvent__CopyPointerRemovedEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerRemovedEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerRemovedEvent$36, events._CopyPointerRemovedEvent);
  events.PointerRemovedEvent = class PointerRemovedEvent extends PointerEvent__CopyPointerRemovedEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerRemovedEvent.new((t2 = T.PointerRemovedEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerRemovedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 918, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 919, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 920, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 921, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 922, 12, "position");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 923, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 924, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 925, 12, "pressureMax");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 926, 12, "distanceMax");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 927, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 928, 12, "radiusMax");
    let original = opts && 'original' in opts ? opts.original : null;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 930, 9, "embedderId");
    events.PointerRemovedEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, original: original, embedderId: embedderId});
    ;
  }).prototype = events.PointerRemovedEvent.prototype;
  dart.addTypeTests(events.PointerRemovedEvent);
  dart.addTypeCaches(events.PointerRemovedEvent);
  dart.setMethodSignature(events.PointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events.PointerRemovedEvent.__proto__),
    transformed: dart.fnType(events.PointerRemovedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerRemovedEvent, I[1]);
  var original$1 = dart.privateName(events, "_TransformedPointerRemovedEvent.original");
  var transform$1 = dart.privateName(events, "_TransformedPointerRemovedEvent.transform");
  const _TransformedPointerEvent__CopyPointerRemovedEvent$36 = class _TransformedPointerEvent__CopyPointerRemovedEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerRemovedEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerRemovedEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerRemovedEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerRemovedEvent$36, events._CopyPointerRemovedEvent);
  events._TransformedPointerRemovedEvent = class _TransformedPointerRemovedEvent extends _TransformedPointerEvent__CopyPointerRemovedEvent$36 {
    get original() {
      return this[original$1];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerRemovedEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 958, 40, "original");
    if (transform == null) dart.nullFailed(I[0], 958, 55, "transform");
    this[original$1] = original;
    this[transform$1] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 959, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 959, 40, "transform != null");
    events._TransformedPointerRemovedEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerRemovedEvent.prototype;
  dart.addTypeTests(events._TransformedPointerRemovedEvent);
  dart.addTypeCaches(events._TransformedPointerRemovedEvent);
  events._TransformedPointerRemovedEvent[dart.implements] = () => [events.PointerRemovedEvent];
  dart.setMethodSignature(events._TransformedPointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerRemovedEvent.__proto__),
    transformed: dart.fnType(events.PointerRemovedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerRemovedEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerRemovedEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerRemovedEvent.__proto__),
    original: dart.finalFieldType(events.PointerRemovedEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerHoverEvent = class _CopyPointerHoverEvent extends events.PointerEvent {};
  events._CopyPointerHoverEvent[dart.mixinOn] = PointerEvent => class _CopyPointerHoverEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16, t2$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerHoverEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), delta: (t2$2 = delta, t2$2 == null ? this.delta : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressureMin: (t2$5 = pressureMin, t2$5 == null ? this.pressureMin : t2$5), pressureMax: (t2$6 = pressureMax, t2$6 == null ? this.pressureMax : t2$6), distance: (t2$7 = distance, t2$7 == null ? this.distance : t2$7), distanceMax: (t2$8 = distanceMax, t2$8 == null ? this.distanceMax : t2$8), size: (t2$9 = size, t2$9 == null ? this.size : t2$9), radiusMajor: (t2$10 = radiusMajor, t2$10 == null ? this.radiusMajor : t2$10), radiusMinor: (t2$11 = radiusMinor, t2$11 == null ? this.radiusMinor : t2$11), radiusMin: (t2$12 = radiusMin, t2$12 == null ? this.radiusMin : t2$12), radiusMax: (t2$13 = radiusMax, t2$13 == null ? this.radiusMax : t2$13), orientation: (t2$14 = orientation, t2$14 == null ? this.orientation : t2$14), tilt: (t2$15 = tilt, t2$15 == null ? this.tilt : t2$15), synthesized: (t2$16 = synthesized, t2$16 == null ? this.synthesized : t2$16), embedderId: (t2$17 = embedderId, t2$17 == null ? this.embedderId : t2$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerHoverEvent);
  dart.addTypeCaches(events._CopyPointerHoverEvent);
  events._CopyPointerHoverEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerHoverEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerHoverEvent.__proto__),
    copyWith: dart.fnType(events.PointerHoverEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerHoverEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$0 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$0.new = function(opts) {
    PointerEvent__PointerEventDescription$36$0.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$0.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$0, events._PointerEventDescription);
  const PointerEvent__CopyPointerHoverEvent$36 = class PointerEvent__CopyPointerHoverEvent extends PointerEvent__PointerEventDescription$36$0 {};
  (PointerEvent__CopyPointerHoverEvent$36.new = function(opts) {
    PointerEvent__CopyPointerHoverEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerHoverEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerHoverEvent$36, events._CopyPointerHoverEvent);
  events.PointerHoverEvent = class PointerHoverEvent extends PointerEvent__CopyPointerHoverEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerHoverEvent.new((t2 = T.PointerHoverEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerHoverEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1039, 14, "timeStamp");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1040, 23, "kind");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1041, 9, "pointer");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1042, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1043, 12, "position");
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    if (delta == null) dart.nullFailed(I[0], 1044, 12, "delta");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 1045, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1046, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1047, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1048, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 1049, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1050, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1051, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1052, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1053, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1054, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1055, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1056, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1057, 12, "tilt");
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    if (synthesized == null) dart.nullFailed(I[0], 1058, 10, "synthesized");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1059, 9, "embedderId");
    events.PointerHoverEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerHoverEvent.prototype;
  dart.addTypeTests(events.PointerHoverEvent);
  dart.addTypeCaches(events.PointerHoverEvent);
  dart.setMethodSignature(events.PointerHoverEvent, () => ({
    __proto__: dart.getMethods(events.PointerHoverEvent.__proto__),
    transformed: dart.fnType(events.PointerHoverEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerHoverEvent, I[1]);
  var original$2 = dart.privateName(events, "_TransformedPointerHoverEvent.original");
  var transform$2 = dart.privateName(events, "_TransformedPointerHoverEvent.transform");
  const _TransformedPointerEvent__CopyPointerHoverEvent$36 = class _TransformedPointerEvent__CopyPointerHoverEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerHoverEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerHoverEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerHoverEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerHoverEvent$36, events._CopyPointerHoverEvent);
  events._TransformedPointerHoverEvent = class _TransformedPointerHoverEvent extends _TransformedPointerEvent__CopyPointerHoverEvent$36 {
    get original() {
      return this[original$2];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerHoverEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1096, 38, "original");
    if (transform == null) dart.nullFailed(I[0], 1096, 53, "transform");
    this[original$2] = original;
    this[transform$2] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1097, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1097, 40, "transform != null");
    events._TransformedPointerHoverEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerHoverEvent.prototype;
  dart.addTypeTests(events._TransformedPointerHoverEvent);
  dart.addTypeCaches(events._TransformedPointerHoverEvent);
  events._TransformedPointerHoverEvent[dart.implements] = () => [events.PointerHoverEvent];
  dart.setMethodSignature(events._TransformedPointerHoverEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerHoverEvent.__proto__),
    transformed: dart.fnType(events.PointerHoverEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerHoverEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerHoverEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerHoverEvent.__proto__),
    original: dart.finalFieldType(events.PointerHoverEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerEnterEvent = class _CopyPointerEnterEvent extends events.PointerEvent {};
  events._CopyPointerEnterEvent[dart.mixinOn] = PointerEvent => class _CopyPointerEnterEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16, t2$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerEnterEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), delta: (t2$2 = delta, t2$2 == null ? this.delta : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressureMin: (t2$5 = pressureMin, t2$5 == null ? this.pressureMin : t2$5), pressureMax: (t2$6 = pressureMax, t2$6 == null ? this.pressureMax : t2$6), distance: (t2$7 = distance, t2$7 == null ? this.distance : t2$7), distanceMax: (t2$8 = distanceMax, t2$8 == null ? this.distanceMax : t2$8), size: (t2$9 = size, t2$9 == null ? this.size : t2$9), radiusMajor: (t2$10 = radiusMajor, t2$10 == null ? this.radiusMajor : t2$10), radiusMinor: (t2$11 = radiusMinor, t2$11 == null ? this.radiusMinor : t2$11), radiusMin: (t2$12 = radiusMin, t2$12 == null ? this.radiusMin : t2$12), radiusMax: (t2$13 = radiusMax, t2$13 == null ? this.radiusMax : t2$13), orientation: (t2$14 = orientation, t2$14 == null ? this.orientation : t2$14), tilt: (t2$15 = tilt, t2$15 == null ? this.tilt : t2$15), synthesized: (t2$16 = synthesized, t2$16 == null ? this.synthesized : t2$16), embedderId: (t2$17 = embedderId, t2$17 == null ? this.embedderId : t2$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerEnterEvent);
  dart.addTypeCaches(events._CopyPointerEnterEvent);
  events._CopyPointerEnterEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerEnterEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerEnterEvent.__proto__),
    copyWith: dart.fnType(events.PointerEnterEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerEnterEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$1 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$1.new = function(opts) {
    PointerEvent__PointerEventDescription$36$1.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$1.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$1, events._PointerEventDescription);
  const PointerEvent__CopyPointerEnterEvent$36 = class PointerEvent__CopyPointerEnterEvent extends PointerEvent__PointerEventDescription$36$1 {};
  (PointerEvent__CopyPointerEnterEvent$36.new = function(opts) {
    PointerEvent__CopyPointerEnterEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerEnterEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerEnterEvent$36, events._CopyPointerEnterEvent);
  events.PointerEnterEvent = class PointerEnterEvent extends PointerEvent__CopyPointerEnterEvent$36 {
    static fromMouseEvent(event) {
      if (event == null) dart.nullFailed(I[0], 1228, 57, "event");
      return new events.PointerEnterEvent.new({timeStamp: event.timeStamp, pointer: event.pointer, kind: event.kind, device: event.device, position: event.position, delta: event.delta, buttons: event.buttons, obscured: event.obscured, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distance: event.distance, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, down: event.down, synthesized: event.synthesized}).transformed(event.transform);
    }
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerEnterEvent.new((t2 = T.PointerEnterEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerEnterEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1177, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1178, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1179, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1180, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1181, 12, "position");
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    if (delta == null) dart.nullFailed(I[0], 1182, 12, "delta");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 1183, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1184, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1185, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1186, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 1187, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1188, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1189, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1190, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1191, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1192, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1193, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1194, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1195, 12, "tilt");
    let down = opts && 'down' in opts ? opts.down : false;
    if (down == null) dart.nullFailed(I[0], 1196, 10, "down");
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    if (synthesized == null) dart.nullFailed(I[0], 1197, 10, "synthesized");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1198, 9, "embedderId");
    events.PointerEnterEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: down, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerEnterEvent.prototype;
  dart.addTypeTests(events.PointerEnterEvent);
  dart.addTypeCaches(events.PointerEnterEvent);
  dart.setMethodSignature(events.PointerEnterEvent, () => ({
    __proto__: dart.getMethods(events.PointerEnterEvent.__proto__),
    transformed: dart.fnType(events.PointerEnterEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerEnterEvent, I[1]);
  var original$3 = dart.privateName(events, "_TransformedPointerEnterEvent.original");
  var transform$3 = dart.privateName(events, "_TransformedPointerEnterEvent.transform");
  const _TransformedPointerEvent__CopyPointerEnterEvent$36 = class _TransformedPointerEvent__CopyPointerEnterEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerEnterEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerEnterEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerEnterEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerEnterEvent$36, events._CopyPointerEnterEvent);
  events._TransformedPointerEnterEvent = class _TransformedPointerEnterEvent extends _TransformedPointerEvent__CopyPointerEnterEvent$36 {
    get original() {
      return this[original$3];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerEnterEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1262, 38, "original");
    if (transform == null) dart.nullFailed(I[0], 1262, 53, "transform");
    this[original$3] = original;
    this[transform$3] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1263, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1263, 40, "transform != null");
    events._TransformedPointerEnterEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerEnterEvent.prototype;
  dart.addTypeTests(events._TransformedPointerEnterEvent);
  dart.addTypeCaches(events._TransformedPointerEnterEvent);
  events._TransformedPointerEnterEvent[dart.implements] = () => [events.PointerEnterEvent];
  dart.setMethodSignature(events._TransformedPointerEnterEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerEnterEvent.__proto__),
    transformed: dart.fnType(events.PointerEnterEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerEnterEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerEnterEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerEnterEvent.__proto__),
    original: dart.finalFieldType(events.PointerEnterEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerExitEvent = class _CopyPointerExitEvent extends events.PointerEvent {};
  events._CopyPointerExitEvent[dart.mixinOn] = PointerEvent => class _CopyPointerExitEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16, t2$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerExitEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), delta: (t2$2 = delta, t2$2 == null ? this.delta : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressureMin: (t2$5 = pressureMin, t2$5 == null ? this.pressureMin : t2$5), pressureMax: (t2$6 = pressureMax, t2$6 == null ? this.pressureMax : t2$6), distance: (t2$7 = distance, t2$7 == null ? this.distance : t2$7), distanceMax: (t2$8 = distanceMax, t2$8 == null ? this.distanceMax : t2$8), size: (t2$9 = size, t2$9 == null ? this.size : t2$9), radiusMajor: (t2$10 = radiusMajor, t2$10 == null ? this.radiusMajor : t2$10), radiusMinor: (t2$11 = radiusMinor, t2$11 == null ? this.radiusMinor : t2$11), radiusMin: (t2$12 = radiusMin, t2$12 == null ? this.radiusMin : t2$12), radiusMax: (t2$13 = radiusMax, t2$13 == null ? this.radiusMax : t2$13), orientation: (t2$14 = orientation, t2$14 == null ? this.orientation : t2$14), tilt: (t2$15 = tilt, t2$15 == null ? this.tilt : t2$15), synthesized: (t2$16 = synthesized, t2$16 == null ? this.synthesized : t2$16), embedderId: (t2$17 = embedderId, t2$17 == null ? this.embedderId : t2$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerExitEvent);
  dart.addTypeCaches(events._CopyPointerExitEvent);
  events._CopyPointerExitEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerExitEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerExitEvent.__proto__),
    copyWith: dart.fnType(events.PointerExitEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerExitEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$2 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$2.new = function(opts) {
    PointerEvent__PointerEventDescription$36$2.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$2.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$2, events._PointerEventDescription);
  const PointerEvent__CopyPointerExitEvent$36 = class PointerEvent__CopyPointerExitEvent extends PointerEvent__PointerEventDescription$36$2 {};
  (PointerEvent__CopyPointerExitEvent$36.new = function(opts) {
    PointerEvent__CopyPointerExitEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerExitEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerExitEvent$36, events._CopyPointerExitEvent);
  events.PointerExitEvent = class PointerExitEvent extends PointerEvent__CopyPointerExitEvent$36 {
    static fromMouseEvent(event) {
      if (event == null) dart.nullFailed(I[0], 1394, 56, "event");
      return new events.PointerExitEvent.new({timeStamp: event.timeStamp, pointer: event.pointer, kind: event.kind, device: event.device, position: event.position, delta: event.delta, buttons: event.buttons, obscured: event.obscured, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distance: event.distance, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, down: event.down, synthesized: event.synthesized}).transformed(event.transform);
    }
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerExitEvent.new((t2 = T.PointerExitEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerExitEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1343, 14, "timeStamp");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1344, 23, "kind");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1345, 9, "pointer");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1346, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1347, 12, "position");
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    if (delta == null) dart.nullFailed(I[0], 1348, 12, "delta");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 1349, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1350, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1351, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1352, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 1353, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1354, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1355, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1356, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1357, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1358, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1359, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1360, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1361, 12, "tilt");
    let down = opts && 'down' in opts ? opts.down : false;
    if (down == null) dart.nullFailed(I[0], 1362, 10, "down");
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    if (synthesized == null) dart.nullFailed(I[0], 1363, 10, "synthesized");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1364, 9, "embedderId");
    events.PointerExitEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: down, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerExitEvent.prototype;
  dart.addTypeTests(events.PointerExitEvent);
  dart.addTypeCaches(events.PointerExitEvent);
  dart.setMethodSignature(events.PointerExitEvent, () => ({
    __proto__: dart.getMethods(events.PointerExitEvent.__proto__),
    transformed: dart.fnType(events.PointerExitEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerExitEvent, I[1]);
  var original$4 = dart.privateName(events, "_TransformedPointerExitEvent.original");
  var transform$4 = dart.privateName(events, "_TransformedPointerExitEvent.transform");
  const _TransformedPointerEvent__CopyPointerExitEvent$36 = class _TransformedPointerEvent__CopyPointerExitEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerExitEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerExitEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerExitEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerExitEvent$36, events._CopyPointerExitEvent);
  events._TransformedPointerExitEvent = class _TransformedPointerExitEvent extends _TransformedPointerEvent__CopyPointerExitEvent$36 {
    get original() {
      return this[original$4];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$4];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerExitEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1429, 37, "original");
    if (transform == null) dart.nullFailed(I[0], 1429, 52, "transform");
    this[original$4] = original;
    this[transform$4] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1430, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1430, 40, "transform != null");
    events._TransformedPointerExitEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerExitEvent.prototype;
  dart.addTypeTests(events._TransformedPointerExitEvent);
  dart.addTypeCaches(events._TransformedPointerExitEvent);
  events._TransformedPointerExitEvent[dart.implements] = () => [events.PointerExitEvent];
  dart.setMethodSignature(events._TransformedPointerExitEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerExitEvent.__proto__),
    transformed: dart.fnType(events.PointerExitEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerExitEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerExitEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerExitEvent.__proto__),
    original: dart.finalFieldType(events.PointerExitEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerDownEvent = class _CopyPointerDownEvent extends events.PointerEvent {};
  events._CopyPointerDownEvent[dart.mixinOn] = PointerEvent => class _CopyPointerDownEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerDownEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), pointer: (t2$ = pointer, t2$ == null ? this.pointer : t2$), kind: (t2$0 = kind, t2$0 == null ? this.kind : t2$0), device: (t2$1 = device, t2$1 == null ? this.device : t2$1), position: (t2$2 = position, t2$2 == null ? this.position : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressure: (t2$5 = pressure, t2$5 == null ? this.pressure : t2$5), pressureMin: (t2$6 = pressureMin, t2$6 == null ? this.pressureMin : t2$6), pressureMax: (t2$7 = pressureMax, t2$7 == null ? this.pressureMax : t2$7), distanceMax: (t2$8 = distanceMax, t2$8 == null ? this.distanceMax : t2$8), size: (t2$9 = size, t2$9 == null ? this.size : t2$9), radiusMajor: (t2$10 = radiusMajor, t2$10 == null ? this.radiusMajor : t2$10), radiusMinor: (t2$11 = radiusMinor, t2$11 == null ? this.radiusMinor : t2$11), radiusMin: (t2$12 = radiusMin, t2$12 == null ? this.radiusMin : t2$12), radiusMax: (t2$13 = radiusMax, t2$13 == null ? this.radiusMax : t2$13), orientation: (t2$14 = orientation, t2$14 == null ? this.orientation : t2$14), tilt: (t2$15 = tilt, t2$15 == null ? this.tilt : t2$15), embedderId: (t2$16 = embedderId, t2$16 == null ? this.embedderId : t2$16)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerDownEvent);
  dart.addTypeCaches(events._CopyPointerDownEvent);
  events._CopyPointerDownEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerDownEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerDownEvent.__proto__),
    copyWith: dart.fnType(events.PointerDownEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerDownEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$3 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$3.new = function(opts) {
    PointerEvent__PointerEventDescription$36$3.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$3.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$3, events._PointerEventDescription);
  const PointerEvent__CopyPointerDownEvent$36 = class PointerEvent__CopyPointerDownEvent extends PointerEvent__PointerEventDescription$36$3 {};
  (PointerEvent__CopyPointerDownEvent$36.new = function(opts) {
    PointerEvent__CopyPointerDownEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerDownEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerDownEvent$36, events._CopyPointerDownEvent);
  events.PointerDownEvent = class PointerDownEvent extends PointerEvent__CopyPointerDownEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerDownEvent.new((t2 = T.PointerDownEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerDownEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1503, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1504, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1505, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1506, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1507, 12, "position");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    if (buttons == null) dart.nullFailed(I[0], 1508, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1509, 10, "obscured");
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    if (pressure == null) dart.nullFailed(I[0], 1510, 12, "pressure");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1511, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1512, 12, "pressureMax");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1513, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1514, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1515, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1516, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1517, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1518, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1519, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1520, 12, "tilt");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1521, 9, "embedderId");
    events.PointerDownEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerDownEvent.prototype;
  dart.addTypeTests(events.PointerDownEvent);
  dart.addTypeCaches(events.PointerDownEvent);
  dart.setMethodSignature(events.PointerDownEvent, () => ({
    __proto__: dart.getMethods(events.PointerDownEvent.__proto__),
    transformed: dart.fnType(events.PointerDownEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerDownEvent, I[1]);
  var original$5 = dart.privateName(events, "_TransformedPointerDownEvent.original");
  var transform$5 = dart.privateName(events, "_TransformedPointerDownEvent.transform");
  const _TransformedPointerEvent__CopyPointerDownEvent$36 = class _TransformedPointerEvent__CopyPointerDownEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerDownEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerDownEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerDownEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerDownEvent$36, events._CopyPointerDownEvent);
  events._TransformedPointerDownEvent = class _TransformedPointerDownEvent extends _TransformedPointerEvent__CopyPointerDownEvent$36 {
    get original() {
      return this[original$5];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$5];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerDownEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1556, 37, "original");
    if (transform == null) dart.nullFailed(I[0], 1556, 52, "transform");
    this[original$5] = original;
    this[transform$5] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1557, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1557, 40, "transform != null");
    events._TransformedPointerDownEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerDownEvent.prototype;
  dart.addTypeTests(events._TransformedPointerDownEvent);
  dart.addTypeCaches(events._TransformedPointerDownEvent);
  events._TransformedPointerDownEvent[dart.implements] = () => [events.PointerDownEvent];
  dart.setMethodSignature(events._TransformedPointerDownEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerDownEvent.__proto__),
    transformed: dart.fnType(events.PointerDownEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerDownEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerDownEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerDownEvent.__proto__),
    original: dart.finalFieldType(events.PointerDownEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerMoveEvent = class _CopyPointerMoveEvent extends events.PointerEvent {};
  events._CopyPointerMoveEvent[dart.mixinOn] = PointerEvent => class _CopyPointerMoveEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16, t2$17, t2$18;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerMoveEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), pointer: (t2$ = pointer, t2$ == null ? this.pointer : t2$), kind: (t2$0 = kind, t2$0 == null ? this.kind : t2$0), device: (t2$1 = device, t2$1 == null ? this.device : t2$1), position: (t2$2 = position, t2$2 == null ? this.position : t2$2), delta: (t2$3 = delta, t2$3 == null ? this.delta : t2$3), buttons: (t2$4 = buttons, t2$4 == null ? this.buttons : t2$4), obscured: (t2$5 = obscured, t2$5 == null ? this.obscured : t2$5), pressure: (t2$6 = pressure, t2$6 == null ? this.pressure : t2$6), pressureMin: (t2$7 = pressureMin, t2$7 == null ? this.pressureMin : t2$7), pressureMax: (t2$8 = pressureMax, t2$8 == null ? this.pressureMax : t2$8), distanceMax: (t2$9 = distanceMax, t2$9 == null ? this.distanceMax : t2$9), size: (t2$10 = size, t2$10 == null ? this.size : t2$10), radiusMajor: (t2$11 = radiusMajor, t2$11 == null ? this.radiusMajor : t2$11), radiusMinor: (t2$12 = radiusMinor, t2$12 == null ? this.radiusMinor : t2$12), radiusMin: (t2$13 = radiusMin, t2$13 == null ? this.radiusMin : t2$13), radiusMax: (t2$14 = radiusMax, t2$14 == null ? this.radiusMax : t2$14), orientation: (t2$15 = orientation, t2$15 == null ? this.orientation : t2$15), tilt: (t2$16 = tilt, t2$16 == null ? this.tilt : t2$16), synthesized: (t2$17 = synthesized, t2$17 == null ? this.synthesized : t2$17), embedderId: (t2$18 = embedderId, t2$18 == null ? this.embedderId : t2$18)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerMoveEvent);
  dart.addTypeCaches(events._CopyPointerMoveEvent);
  events._CopyPointerMoveEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerMoveEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerMoveEvent.__proto__),
    copyWith: dart.fnType(events.PointerMoveEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerMoveEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$4 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$4.new = function(opts) {
    PointerEvent__PointerEventDescription$36$4.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$4.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$4, events._PointerEventDescription);
  const PointerEvent__CopyPointerMoveEvent$36 = class PointerEvent__CopyPointerMoveEvent extends PointerEvent__PointerEventDescription$36$4 {};
  (PointerEvent__CopyPointerMoveEvent$36.new = function(opts) {
    PointerEvent__CopyPointerMoveEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerMoveEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerMoveEvent$36, events._CopyPointerMoveEvent);
  events.PointerMoveEvent = class PointerMoveEvent extends PointerEvent__CopyPointerMoveEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerMoveEvent.new((t2 = T.PointerMoveEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerMoveEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1635, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1636, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1637, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1638, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1639, 12, "position");
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    if (delta == null) dart.nullFailed(I[0], 1640, 12, "delta");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    if (buttons == null) dart.nullFailed(I[0], 1641, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1642, 10, "obscured");
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    if (pressure == null) dart.nullFailed(I[0], 1643, 12, "pressure");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1644, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1645, 12, "pressureMax");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1646, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1647, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1648, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1649, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1650, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1651, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1652, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1653, 12, "tilt");
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    if (platformData == null) dart.nullFailed(I[0], 1654, 9, "platformData");
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    if (synthesized == null) dart.nullFailed(I[0], 1655, 10, "synthesized");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1656, 9, "embedderId");
    events.PointerMoveEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, platformData: platformData, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerMoveEvent.prototype;
  dart.addTypeTests(events.PointerMoveEvent);
  dart.addTypeCaches(events.PointerMoveEvent);
  dart.setMethodSignature(events.PointerMoveEvent, () => ({
    __proto__: dart.getMethods(events.PointerMoveEvent.__proto__),
    transformed: dart.fnType(events.PointerMoveEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerMoveEvent, I[1]);
  var original$6 = dart.privateName(events, "_TransformedPointerMoveEvent.original");
  var transform$6 = dart.privateName(events, "_TransformedPointerMoveEvent.transform");
  const _TransformedPointerEvent__CopyPointerMoveEvent$36 = class _TransformedPointerEvent__CopyPointerMoveEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerMoveEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerMoveEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerMoveEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerMoveEvent$36, events._CopyPointerMoveEvent);
  events._TransformedPointerMoveEvent = class _TransformedPointerMoveEvent extends _TransformedPointerEvent__CopyPointerMoveEvent$36 {
    get original() {
      return this[original$6];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$6];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerMoveEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1695, 37, "original");
    if (transform == null) dart.nullFailed(I[0], 1695, 52, "transform");
    this[original$6] = original;
    this[transform$6] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1696, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1696, 40, "transform != null");
    events._TransformedPointerMoveEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerMoveEvent.prototype;
  dart.addTypeTests(events._TransformedPointerMoveEvent);
  dart.addTypeCaches(events._TransformedPointerMoveEvent);
  events._TransformedPointerMoveEvent[dart.implements] = () => [events.PointerMoveEvent];
  dart.setMethodSignature(events._TransformedPointerMoveEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerMoveEvent.__proto__),
    transformed: dart.fnType(events.PointerMoveEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerMoveEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerMoveEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerMoveEvent.__proto__),
    original: dart.finalFieldType(events.PointerMoveEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerUpEvent = class _CopyPointerUpEvent extends events.PointerEvent {};
  events._CopyPointerUpEvent[dart.mixinOn] = PointerEvent => class _CopyPointerUpEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16, t2$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerUpEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), pointer: (t2$ = pointer, t2$ == null ? this.pointer : t2$), kind: (t2$0 = kind, t2$0 == null ? this.kind : t2$0), device: (t2$1 = device, t2$1 == null ? this.device : t2$1), position: (t2$2 = position, t2$2 == null ? this.position : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressure: (t2$5 = pressure, t2$5 == null ? this.pressure : t2$5), pressureMin: (t2$6 = pressureMin, t2$6 == null ? this.pressureMin : t2$6), pressureMax: (t2$7 = pressureMax, t2$7 == null ? this.pressureMax : t2$7), distance: (t2$8 = distance, t2$8 == null ? this.distance : t2$8), distanceMax: (t2$9 = distanceMax, t2$9 == null ? this.distanceMax : t2$9), size: (t2$10 = size, t2$10 == null ? this.size : t2$10), radiusMajor: (t2$11 = radiusMajor, t2$11 == null ? this.radiusMajor : t2$11), radiusMinor: (t2$12 = radiusMinor, t2$12 == null ? this.radiusMinor : t2$12), radiusMin: (t2$13 = radiusMin, t2$13 == null ? this.radiusMin : t2$13), radiusMax: (t2$14 = radiusMax, t2$14 == null ? this.radiusMax : t2$14), orientation: (t2$15 = orientation, t2$15 == null ? this.orientation : t2$15), tilt: (t2$16 = tilt, t2$16 == null ? this.tilt : t2$16), embedderId: (t2$17 = embedderId, t2$17 == null ? this.embedderId : t2$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerUpEvent);
  dart.addTypeCaches(events._CopyPointerUpEvent);
  events._CopyPointerUpEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerUpEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerUpEvent.__proto__),
    copyWith: dart.fnType(events.PointerUpEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), localPosition: dart.nullable(ui.Offset), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerUpEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$5 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$5.new = function(opts) {
    PointerEvent__PointerEventDescription$36$5.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$5.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$5, events._PointerEventDescription);
  const PointerEvent__CopyPointerUpEvent$36 = class PointerEvent__CopyPointerUpEvent extends PointerEvent__PointerEventDescription$36$5 {};
  (PointerEvent__CopyPointerUpEvent$36.new = function(opts) {
    PointerEvent__CopyPointerUpEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerUpEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerUpEvent$36, events._CopyPointerUpEvent);
  events.PointerUpEvent = class PointerUpEvent extends PointerEvent__CopyPointerUpEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerUpEvent.new((t2 = T.PointerUpEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerUpEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1771, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1772, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 1773, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1774, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1775, 12, "position");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 1776, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 1777, 10, "obscured");
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0;
    if (pressure == null) dart.nullFailed(I[0], 1780, 12, "pressure");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 1781, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 1782, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 1783, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 1784, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 1785, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 1786, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 1787, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 1788, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 1789, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 1790, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 1791, 12, "tilt");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1792, 9, "embedderId");
    events.PointerUpEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: false, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerUpEvent.prototype;
  dart.addTypeTests(events.PointerUpEvent);
  dart.addTypeCaches(events.PointerUpEvent);
  dart.setMethodSignature(events.PointerUpEvent, () => ({
    __proto__: dart.getMethods(events.PointerUpEvent.__proto__),
    transformed: dart.fnType(events.PointerUpEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerUpEvent, I[1]);
  var original$7 = dart.privateName(events, "_TransformedPointerUpEvent.original");
  var transform$7 = dart.privateName(events, "_TransformedPointerUpEvent.transform");
  const _TransformedPointerEvent__CopyPointerUpEvent$36 = class _TransformedPointerEvent__CopyPointerUpEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerUpEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerUpEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerUpEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerUpEvent$36, events._CopyPointerUpEvent);
  events._TransformedPointerUpEvent = class _TransformedPointerUpEvent extends _TransformedPointerEvent__CopyPointerUpEvent$36 {
    get original() {
      return this[original$7];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$7];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerUpEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1827, 35, "original");
    if (transform == null) dart.nullFailed(I[0], 1827, 50, "transform");
    this[original$7] = original;
    this[transform$7] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1828, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1828, 40, "transform != null");
    events._TransformedPointerUpEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerUpEvent.prototype;
  dart.addTypeTests(events._TransformedPointerUpEvent);
  dart.addTypeCaches(events._TransformedPointerUpEvent);
  events._TransformedPointerUpEvent[dart.implements] = () => [events.PointerUpEvent];
  dart.setMethodSignature(events._TransformedPointerUpEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerUpEvent.__proto__),
    transformed: dart.fnType(events.PointerUpEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerUpEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerUpEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerUpEvent.__proto__),
    original: dart.finalFieldType(events.PointerUpEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events.PointerSignalEvent = class PointerSignalEvent extends events.PointerEvent {};
  (events.PointerSignalEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1854, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 1855, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[3] || CT.C3;
    if (kind == null) dart.nullFailed(I[0], 1856, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1857, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1858, 12, "position");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1859, 9, "embedderId");
    events.PointerSignalEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, embedderId: embedderId});
    ;
  }).prototype = events.PointerSignalEvent.prototype;
  dart.addTypeTests(events.PointerSignalEvent);
  dart.addTypeCaches(events.PointerSignalEvent);
  dart.setLibraryUri(events.PointerSignalEvent, I[1]);
  events._CopyPointerScrollEvent = class _CopyPointerScrollEvent extends events.PointerEvent {};
  events._CopyPointerScrollEvent[dart.mixinOn] = PointerEvent => class _CopyPointerScrollEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerScrollEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), kind: (t2$ = kind, t2$ == null ? this.kind : t2$), device: (t2$0 = device, t2$0 == null ? this.device : t2$0), position: (t2$1 = position, t2$1 == null ? this.position : t2$1), scrollDelta: this.scrollDelta, embedderId: (t2$2 = embedderId, t2$2 == null ? this.embedderId : t2$2)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerScrollEvent);
  dart.addTypeCaches(events._CopyPointerScrollEvent);
  events._CopyPointerScrollEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerScrollEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerScrollEvent.__proto__),
    copyWith: dart.fnType(events.PointerScrollEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerScrollEvent, I[1]);
  var scrollDelta$ = dart.privateName(events, "PointerScrollEvent.scrollDelta");
  const PointerSignalEvent__PointerEventDescription$36 = class PointerSignalEvent__PointerEventDescription extends events.PointerSignalEvent {};
  (PointerSignalEvent__PointerEventDescription$36.new = function(opts) {
    PointerSignalEvent__PointerEventDescription$36.__proto__.new.call(this, opts);
  }).prototype = PointerSignalEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(PointerSignalEvent__PointerEventDescription$36, events._PointerEventDescription);
  const PointerSignalEvent__CopyPointerScrollEvent$36 = class PointerSignalEvent__CopyPointerScrollEvent extends PointerSignalEvent__PointerEventDescription$36 {};
  (PointerSignalEvent__CopyPointerScrollEvent$36.new = function(opts) {
    PointerSignalEvent__CopyPointerScrollEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerSignalEvent__CopyPointerScrollEvent$36.prototype;
  dart.applyMixin(PointerSignalEvent__CopyPointerScrollEvent$36, events._CopyPointerScrollEvent);
  events.PointerScrollEvent = class PointerScrollEvent extends PointerSignalEvent__CopyPointerScrollEvent$36 {
    get scrollDelta() {
      return this[scrollDelta$];
    }
    set scrollDelta(value) {
      super.scrollDelta = value;
    }
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerScrollEvent.new((t2 = T.PointerScrollEventN().as(this.original), t2 == null ? this : t2), transform);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 1955, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (events.PointerScrollEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 1924, 14, "timeStamp");
    let kind = opts && 'kind' in opts ? opts.kind : C[3] || CT.C3;
    if (kind == null) dart.nullFailed(I[0], 1925, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 1926, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 1927, 12, "position");
    let scrollDelta = opts && 'scrollDelta' in opts ? opts.scrollDelta : C[2] || CT.C2;
    if (scrollDelta == null) dart.nullFailed(I[0], 1928, 10, "scrollDelta");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 1929, 9, "embedderId");
    this[scrollDelta$] = scrollDelta;
    if (!(timeStamp != null)) dart.assertFailed(null, I[0], 1930, 15, "timeStamp != null");
    if (!(kind != null)) dart.assertFailed(null, I[0], 1931, 15, "kind != null");
    if (!(device != null)) dart.assertFailed(null, I[0], 1932, 15, "device != null");
    if (!(position != null)) dart.assertFailed(null, I[0], 1933, 15, "position != null");
    if (!(scrollDelta != null)) dart.assertFailed(null, I[0], 1934, 15, "scrollDelta != null");
    events.PointerScrollEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, embedderId: embedderId});
    ;
  }).prototype = events.PointerScrollEvent.prototype;
  dart.addTypeTests(events.PointerScrollEvent);
  dart.addTypeCaches(events.PointerScrollEvent);
  dart.setMethodSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getMethods(events.PointerScrollEvent.__proto__),
    transformed: dart.fnType(events.PointerScrollEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerScrollEvent, I[1]);
  dart.setFieldSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getFields(events.PointerScrollEvent.__proto__),
    scrollDelta: dart.finalFieldType(ui.Offset)
  }));
  var original$8 = dart.privateName(events, "_TransformedPointerScrollEvent.original");
  var transform$8 = dart.privateName(events, "_TransformedPointerScrollEvent.transform");
  const _TransformedPointerEvent__CopyPointerScrollEvent$36 = class _TransformedPointerEvent__CopyPointerScrollEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerScrollEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerScrollEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerScrollEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerScrollEvent$36, events._CopyPointerScrollEvent);
  events._TransformedPointerScrollEvent = class _TransformedPointerScrollEvent extends _TransformedPointerEvent__CopyPointerScrollEvent$36 {
    get original() {
      return this[original$8];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$8];
    }
    set transform(value) {
      super.transform = value;
    }
    get scrollDelta() {
      return this.original.scrollDelta;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 1978, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (events._TransformedPointerScrollEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 1962, 39, "original");
    if (transform == null) dart.nullFailed(I[0], 1962, 54, "transform");
    this[original$8] = original;
    this[transform$8] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 1963, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 1963, 40, "transform != null");
    events._TransformedPointerScrollEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerScrollEvent.prototype;
  dart.addTypeTests(events._TransformedPointerScrollEvent);
  dart.addTypeCaches(events._TransformedPointerScrollEvent);
  events._TransformedPointerScrollEvent[dart.implements] = () => [events.PointerScrollEvent];
  dart.setMethodSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerScrollEvent.__proto__),
    transformed: dart.fnType(events.PointerScrollEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setGetterSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getGetters(events._TransformedPointerScrollEvent.__proto__),
    scrollDelta: ui.Offset
  }));
  dart.setLibraryUri(events._TransformedPointerScrollEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerScrollEvent.__proto__),
    original: dart.finalFieldType(events.PointerScrollEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerCancelEvent = class _CopyPointerCancelEvent extends events.PointerEvent {};
  events._CopyPointerCancelEvent[dart.mixinOn] = PointerEvent => class _CopyPointerCancelEvent extends PointerEvent {
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13, t2$14, t2$15, t2$16;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerCancelEvent.new({timeStamp: (t2 = timeStamp, t2 == null ? this.timeStamp : t2), pointer: (t2$ = pointer, t2$ == null ? this.pointer : t2$), kind: (t2$0 = kind, t2$0 == null ? this.kind : t2$0), device: (t2$1 = device, t2$1 == null ? this.device : t2$1), position: (t2$2 = position, t2$2 == null ? this.position : t2$2), buttons: (t2$3 = buttons, t2$3 == null ? this.buttons : t2$3), obscured: (t2$4 = obscured, t2$4 == null ? this.obscured : t2$4), pressureMin: (t2$5 = pressureMin, t2$5 == null ? this.pressureMin : t2$5), pressureMax: (t2$6 = pressureMax, t2$6 == null ? this.pressureMax : t2$6), distance: (t2$7 = distance, t2$7 == null ? this.distance : t2$7), distanceMax: (t2$8 = distanceMax, t2$8 == null ? this.distanceMax : t2$8), size: (t2$9 = size, t2$9 == null ? this.size : t2$9), radiusMajor: (t2$10 = radiusMajor, t2$10 == null ? this.radiusMajor : t2$10), radiusMinor: (t2$11 = radiusMinor, t2$11 == null ? this.radiusMinor : t2$11), radiusMin: (t2$12 = radiusMin, t2$12 == null ? this.radiusMin : t2$12), radiusMax: (t2$13 = radiusMax, t2$13 == null ? this.radiusMax : t2$13), orientation: (t2$14 = orientation, t2$14 == null ? this.orientation : t2$14), tilt: (t2$15 = tilt, t2$15 == null ? this.tilt : t2$15), embedderId: (t2$16 = embedderId, t2$16 == null ? this.embedderId : t2$16)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerCancelEvent);
  dart.addTypeCaches(events._CopyPointerCancelEvent);
  events._CopyPointerCancelEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerCancelEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerCancelEvent.__proto__),
    copyWith: dart.fnType(events.PointerCancelEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerCancelEvent, I[1]);
  const PointerEvent__PointerEventDescription$36$6 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$6.new = function(opts) {
    PointerEvent__PointerEventDescription$36$6.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$6.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$6, events._PointerEventDescription);
  const PointerEvent__CopyPointerCancelEvent$36 = class PointerEvent__CopyPointerCancelEvent extends PointerEvent__PointerEventDescription$36$6 {};
  (PointerEvent__CopyPointerCancelEvent$36.new = function(opts) {
    PointerEvent__CopyPointerCancelEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerCancelEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerCancelEvent$36, events._CopyPointerCancelEvent);
  events.PointerCancelEvent = class PointerCancelEvent extends PointerEvent__CopyPointerCancelEvent$36 {
    transformed(transform) {
      let t2;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerCancelEvent.new((t2 = T.PointerCancelEventN().as(this.original), t2 == null ? this : t2), transform);
    }
  };
  (events.PointerCancelEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    if (timeStamp == null) dart.nullFailed(I[0], 2045, 14, "timeStamp");
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    if (pointer == null) dart.nullFailed(I[0], 2046, 9, "pointer");
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    if (kind == null) dart.nullFailed(I[0], 2047, 23, "kind");
    let device = opts && 'device' in opts ? opts.device : 0;
    if (device == null) dart.nullFailed(I[0], 2048, 9, "device");
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    if (position == null) dart.nullFailed(I[0], 2049, 12, "position");
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    if (buttons == null) dart.nullFailed(I[0], 2050, 9, "buttons");
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    if (obscured == null) dart.nullFailed(I[0], 2051, 10, "obscured");
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    if (pressureMin == null) dart.nullFailed(I[0], 2052, 12, "pressureMin");
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    if (pressureMax == null) dart.nullFailed(I[0], 2053, 12, "pressureMax");
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    if (distance == null) dart.nullFailed(I[0], 2054, 12, "distance");
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    if (distanceMax == null) dart.nullFailed(I[0], 2055, 12, "distanceMax");
    let size = opts && 'size' in opts ? opts.size : 0;
    if (size == null) dart.nullFailed(I[0], 2056, 12, "size");
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    if (radiusMajor == null) dart.nullFailed(I[0], 2057, 12, "radiusMajor");
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    if (radiusMinor == null) dart.nullFailed(I[0], 2058, 12, "radiusMinor");
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    if (radiusMin == null) dart.nullFailed(I[0], 2059, 12, "radiusMin");
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    if (radiusMax == null) dart.nullFailed(I[0], 2060, 12, "radiusMax");
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    if (orientation == null) dart.nullFailed(I[0], 2061, 12, "orientation");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[0], 2062, 12, "tilt");
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    if (embedderId == null) dart.nullFailed(I[0], 2063, 9, "embedderId");
    events.PointerCancelEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerCancelEvent.prototype;
  dart.addTypeTests(events.PointerCancelEvent);
  dart.addTypeCaches(events.PointerCancelEvent);
  dart.setMethodSignature(events.PointerCancelEvent, () => ({
    __proto__: dart.getMethods(events.PointerCancelEvent.__proto__),
    transformed: dart.fnType(events.PointerCancelEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerCancelEvent, I[1]);
  var original$9 = dart.privateName(events, "_TransformedPointerCancelEvent.original");
  var transform$9 = dart.privateName(events, "_TransformedPointerCancelEvent.transform");
  const _TransformedPointerEvent__CopyPointerCancelEvent$36 = class _TransformedPointerEvent__CopyPointerCancelEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerCancelEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerCancelEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerCancelEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerCancelEvent$36, events._CopyPointerCancelEvent);
  events._TransformedPointerCancelEvent = class _TransformedPointerCancelEvent extends _TransformedPointerEvent__CopyPointerCancelEvent$36 {
    get original() {
      return this[original$9];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$9];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerCancelEvent.new = function(original, transform) {
    if (original == null) dart.nullFailed(I[0], 2137, 39, "original");
    if (transform == null) dart.nullFailed(I[0], 2137, 54, "transform");
    this[original$9] = original;
    this[transform$9] = transform;
    if (!(original != null)) dart.assertFailed(null, I[0], 2138, 14, "original != null");
    if (!(transform != null)) dart.assertFailed(null, I[0], 2138, 40, "transform != null");
    events._TransformedPointerCancelEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerCancelEvent.prototype;
  dart.addTypeTests(events._TransformedPointerCancelEvent);
  dart.addTypeCaches(events._TransformedPointerCancelEvent);
  events._TransformedPointerCancelEvent[dart.implements] = () => [events.PointerCancelEvent];
  dart.setMethodSignature(events._TransformedPointerCancelEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerCancelEvent.__proto__),
    transformed: dart.fnType(events.PointerCancelEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerCancelEvent, I[1]);
  dart.setFieldSignature(events._TransformedPointerCancelEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerCancelEvent.__proto__),
    original: dart.finalFieldType(events.PointerCancelEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events.nthMouseButton = function nthMouseButton(number) {
    if (number == null) dart.nullFailed(I[0], 160, 24, "number");
    return ((1)[$leftShift](dart.notNull(number) - 1) & -1) >>> 0;
  };
  events.nthStylusButton = function nthStylusButton(number) {
    if (number == null) dart.nullFailed(I[0], 169, 25, "number");
    return ((2)[$leftShift](dart.notNull(number) - 1) & -1) >>> 0;
  };
  events.smallestButton = function smallestButton(buttons) {
    if (buttons == null) dart.nullFailed(I[0], 189, 24, "buttons");
    return (dart.notNull(buttons) & -dart.notNull(buttons)) >>> 0;
  };
  events.isSingleButton = function isSingleButton(buttons) {
    if (buttons == null) dart.nullFailed(I[0], 210, 25, "buttons");
    return buttons !== 0 && events.smallestButton(buttons) == buttons;
  };
  events.computeHitSlop = function computeHitSlop(kind) {
    if (kind == null) dart.nullFailed(I[0], 2098, 41, "kind");
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 1;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 18;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
  };
  events.computePanSlop = function computePanSlop(kind) {
    if (kind == null) dart.nullFailed(I[0], 2111, 41, "kind");
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 2;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 36;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
  };
  events.computeScaleSlop = function computeScaleSlop(kind) {
    if (kind == null) dart.nullFailed(I[0], 2124, 43, "kind");
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 1;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 18;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
  };
  dart.defineLazy(events, {
    /*events.kPrimaryButton*/get kPrimaryButton() {
      return 1;
    },
    /*events.kSecondaryButton*/get kSecondaryButton() {
      return 2;
    },
    /*events.kPrimaryMouseButton*/get kPrimaryMouseButton() {
      return 1;
    },
    /*events.kSecondaryMouseButton*/get kSecondaryMouseButton() {
      return 2;
    },
    /*events.kStylusContact*/get kStylusContact() {
      return 1;
    },
    /*events.kPrimaryStylusButton*/get kPrimaryStylusButton() {
      return 2;
    },
    /*events.kTertiaryButton*/get kTertiaryButton() {
      return 4;
    },
    /*events.kMiddleMouseButton*/get kMiddleMouseButton() {
      return 4;
    },
    /*events.kSecondaryStylusButton*/get kSecondaryStylusButton() {
      return 4;
    },
    /*events.kBackMouseButton*/get kBackMouseButton() {
      return 8;
    },
    /*events.kForwardMouseButton*/get kForwardMouseButton() {
      return 16;
    },
    /*events.kTouchContact*/get kTouchContact() {
      return 1;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/gestures/events.dart", {
    "package:flutter/src/gestures/events.dart": events
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["events.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/gestures/events.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__events: events
  };
}));

//# sourceMappingURL=events.dart.lib.js.map
=======
        __proto__: animation_controller.AnimationBehavior.prototype,
        [_name$]: "AnimationBehavior.preserve",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], T.AnimationBehaviorL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: tolerance.Tolerance.prototype,
        [Tolerance_velocity]: 1 / 0,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.01
      });
    }
  }, false);
  var C = Array(8).fill(void 0);
  var I = [
    "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/animation/animation_controller.dart",
    "package:flutter/src/animation/animation_controller.dart"
  ];
  var _name$ = dart.privateName(animation_controller, "_name");
  animation_controller._AnimationDirection = class _AnimationDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (animation_controller._AnimationDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 25, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 25, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = animation_controller._AnimationDirection.prototype;
  dart.addTypeTests(animation_controller._AnimationDirection);
  dart.addTypeCaches(animation_controller._AnimationDirection);
  dart.setLibraryUri(animation_controller._AnimationDirection, I[1]);
  dart.setFieldSignature(animation_controller._AnimationDirection, () => ({
    __proto__: dart.getFields(animation_controller._AnimationDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(animation_controller._AnimationDirection, ['toString']);
  animation_controller._AnimationDirection.forward = C[0] || CT.C0;
  animation_controller._AnimationDirection.reverse = C[1] || CT.C1;
  animation_controller._AnimationDirection.values = C[2] || CT.C2;
  animation_controller.AnimationBehavior = class AnimationBehavior extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (animation_controller.AnimationBehavior.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 56, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 56, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = animation_controller.AnimationBehavior.prototype;
  dart.addTypeTests(animation_controller.AnimationBehavior);
  dart.addTypeCaches(animation_controller.AnimationBehavior);
  dart.setLibraryUri(animation_controller.AnimationBehavior, I[1]);
  dart.setFieldSignature(animation_controller.AnimationBehavior, () => ({
    __proto__: dart.getFields(animation_controller.AnimationBehavior.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(animation_controller.AnimationBehavior, ['toString']);
  animation_controller.AnimationBehavior.normal = C[3] || CT.C3;
  animation_controller.AnimationBehavior.preserve = C[4] || CT.C4;
  animation_controller.AnimationBehavior.values = C[5] || CT.C5;
  var lowerBound$ = dart.privateName(animation_controller, "AnimationController.lowerBound");
  var upperBound$ = dart.privateName(animation_controller, "AnimationController.upperBound");
  var debugLabel$ = dart.privateName(animation_controller, "AnimationController.debugLabel");
  var animationBehavior$ = dart.privateName(animation_controller, "AnimationController.animationBehavior");
  var duration$ = dart.privateName(animation_controller, "AnimationController.duration");
  var reverseDuration$ = dart.privateName(animation_controller, "AnimationController.reverseDuration");
  var _ticker = dart.privateName(animation_controller, "_ticker");
  var _simulation = dart.privateName(animation_controller, "_simulation");
  var __AnimationController__value = dart.privateName(animation_controller, "_#AnimationController#_value");
  var __AnimationController__value_isSet = dart.privateName(animation_controller, "_#AnimationController#_value#isSet");
  var _lastElapsedDuration = dart.privateName(animation_controller, "_lastElapsedDuration");
  var __AnimationController__status = dart.privateName(animation_controller, "_#AnimationController#_status");
  var __AnimationController__status_isSet = dart.privateName(animation_controller, "_#AnimationController#_status#isSet");
  var _lastReportedStatus = dart.privateName(animation_controller, "_lastReportedStatus");
  var _direction = dart.privateName(animation_controller, "_direction");
  var _tick = dart.privateName(animation_controller, "_tick");
  var _internalSetValue = dart.privateName(animation_controller, "_internalSetValue");
  var _value = dart.privateName(animation_controller, "_value");
  var _checkStatusChanged = dart.privateName(animation_controller, "_checkStatusChanged");
  var _status = dart.privateName(animation_controller, "_status");
  var _animateToInternal = dart.privateName(animation_controller, "_animateToInternal");
  var _startSimulation = dart.privateName(animation_controller, "_startSimulation");
  var _directionSetter = dart.privateName(animation_controller, "_directionSetter");
  const Animation_AnimationEagerListenerMixin$36 = class Animation_AnimationEagerListenerMixin extends animation.Animation$(core.double) {};
  (Animation_AnimationEagerListenerMixin$36.new = function() {
    Animation_AnimationEagerListenerMixin$36.__proto__.new.call(this);
  }).prototype = Animation_AnimationEagerListenerMixin$36.prototype;
  dart.applyMixin(Animation_AnimationEagerListenerMixin$36, listener_helpers.AnimationEagerListenerMixin);
  const Animation_AnimationLocalListenersMixin$36 = class Animation_AnimationLocalListenersMixin extends Animation_AnimationEagerListenerMixin$36 {};
  (Animation_AnimationLocalListenersMixin$36.new = function() {
    listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalListenersMixin$36.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalListenersMixin$36.prototype;
  dart.applyMixin(Animation_AnimationLocalListenersMixin$36, listener_helpers.AnimationLocalListenersMixin);
  const Animation_AnimationLocalStatusListenersMixin$36 = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$36 {};
  (Animation_AnimationLocalStatusListenersMixin$36.new = function() {
    listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$36.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$36.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$36, listener_helpers.AnimationLocalStatusListenersMixin);
  animation_controller.AnimationController = class AnimationController extends Animation_AnimationLocalStatusListenersMixin$36 {
    get lowerBound() {
      return this[lowerBound$];
    }
    set lowerBound(value) {
      super.lowerBound = value;
    }
    get upperBound() {
      return this[upperBound$];
    }
    set upperBound(value) {
      super.upperBound = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get animationBehavior() {
      return this[animationBehavior$];
    }
    set animationBehavior(value) {
      super.animationBehavior = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      this[duration$] = value;
    }
    get reverseDuration() {
      return this[reverseDuration$];
    }
    set reverseDuration(value) {
      this[reverseDuration$] = value;
    }
    get view() {
      return this;
    }
    resync(vsync) {
      if (vsync == null) dart.nullFailed(I[0], 322, 30, "vsync");
      let oldTicker = dart.nullCheck(this[_ticker]);
      this[_ticker] = vsync.createTicker(dart.bind(this, _tick));
      dart.nullCheck(this[_ticker]).absorbTicker(oldTicker);
    }
    get value() {
      return this[_value];
    }
    get [_value]() {
      let t0;
      return dart.test(this[__AnimationController__value_isSet]) ? (t0 = this[__AnimationController__value], t0) : dart.throw(new _internal.LateError.fieldNI("_value"));
    }
    set [_value](t0) {
      if (t0 == null) dart.nullFailed(I[0], 340, 15, "null");
      this[__AnimationController__value_isSet] = true;
      this[__AnimationController__value] = t0;
    }
    set value(newValue) {
      if (newValue == null) dart.nullFailed(I[0], 362, 20, "newValue");
      if (!(newValue != null)) dart.assertFailed(null, I[0], 363, 12, "newValue != null");
      this.stop();
      this[_internalSetValue](newValue);
      this.notifyListeners();
      this[_checkStatusChanged]();
    }
    reset() {
      this.value = this.lowerBound;
    }
    get velocity() {
      if (!dart.test(this.isAnimating)) return 0.0;
      return dart.nullCheck(this[_simulation]).dx(dart.nullCheck(this.lastElapsedDuration).inMicroseconds[$toDouble]() / 1000000);
    }
    [_internalSetValue](newValue) {
      if (newValue == null) dart.nullFailed(I[0], 398, 33, "newValue");
      this[_value] = newValue[$clamp](this.lowerBound, this.upperBound);
      if (this[_value] == this.lowerBound) {
        this[_status] = animation.AnimationStatus.dismissed;
      } else if (this[_value] == this.upperBound) {
        this[_status] = animation.AnimationStatus.completed;
      } else {
        this[_status] = this[_direction] == animation_controller._AnimationDirection.forward ? animation.AnimationStatus.forward : animation.AnimationStatus.reverse;
      }
    }
    get lastElapsedDuration() {
      return this[_lastElapsedDuration];
    }
    get isAnimating() {
      return this[_ticker] != null && dart.test(dart.nullCheck(this[_ticker]).isActive);
    }
    get status() {
      return this[_status];
    }
    get [_status]() {
      let t1;
      return dart.test(this[__AnimationController__status_isSet]) ? (t1 = this[__AnimationController__status], t1) : dart.throw(new _internal.LateError.fieldNI("_status"));
    }
    set [_status](t1) {
      if (t1 == null) dart.nullFailed(I[0], 430, 24, "null");
      this[__AnimationController__status_isSet] = true;
      this[__AnimationController__status] = t1;
    }
    forward(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      if (!dart.test(dart.fn(() => {
        if (this.duration == null) {
          dart.throw(assertions.FlutterError.new("AnimationController.forward() called with no default duration.\n" + "The \"duration\" property should be set, either in the constructor or later, before " + "calling the forward() function."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 444, 12, "() {\r\n      if (duration == null) {\r\n        throw FlutterError(\r\n          'AnimationController.forward() called with no default duration.\\n'\r\n          'The \"duration\" property should be set, either in the constructor or later, before '\r\n          'calling the forward() function.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.forward() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 455, 7, "_ticker != null");
      this[_direction] = animation_controller._AnimationDirection.forward;
      if (from != null) this.value = from;
      return this[_animateToInternal](this.upperBound);
    }
    reverse(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      if (!dart.test(dart.fn(() => {
        if (this.duration == null && this.reverseDuration == null) {
          dart.throw(assertions.FlutterError.new("AnimationController.reverse() called with no default duration or reverseDuration.\n" + "The \"duration\" or \"reverseDuration\" property should be set, either in the constructor or later, before " + "calling the reverse() function."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 477, 12, "() {\r\n      if (duration == null && reverseDuration == null) {\r\n        throw FlutterError(\r\n          'AnimationController.reverse() called with no default duration or reverseDuration.\\n'\r\n          'The \"duration\" or \"reverseDuration\" property should be set, either in the constructor or later, before '\r\n          'calling the reverse() function.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.reverse() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 488, 7, "_ticker != null");
      this[_direction] = animation_controller._AnimationDirection.reverse;
      if (from != null) this.value = from;
      return this[_animateToInternal](this.lowerBound);
    }
    animateTo(target, opts) {
      if (target == null) dart.nullFailed(I[0], 514, 33, "target");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : C[6] || CT.C6;
      if (curve == null) dart.nullFailed(I[0], 514, 69, "curve");
      if (!dart.test(dart.fn(() => {
        if (this.duration == null && duration == null) {
          dart.throw(assertions.FlutterError.new("AnimationController.animateTo() called with no explicit duration and no default duration.\n" + "Either the \"duration\" argument to the animateTo() method should be provided, or the " + "\"duration\" property should be set, either in the constructor or later, before " + "calling the animateTo() function."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 515, 12, "() {\r\n      if (this.duration == null && duration == null) {\r\n        throw FlutterError(\r\n          'AnimationController.animateTo() called with no explicit duration and no default duration.\\n'\r\n          'Either the \"duration\" argument to the animateTo() method should be provided, or the '\r\n          '\"duration\" property should be set, either in the constructor or later, before '\r\n          'calling the animateTo() function.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.animateTo() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 527, 7, "_ticker != null");
      this[_direction] = animation_controller._AnimationDirection.forward;
      return this[_animateToInternal](target, {duration: duration, curve: curve});
    }
    animateBack(target, opts) {
      if (target == null) dart.nullFailed(I[0], 547, 35, "target");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : C[6] || CT.C6;
      if (curve == null) dart.nullFailed(I[0], 547, 71, "curve");
      if (!dart.test(dart.fn(() => {
        if (this.duration == null && this.reverseDuration == null && duration == null) {
          dart.throw(assertions.FlutterError.new("AnimationController.animateBack() called with no explicit duration and no default duration or reverseDuration.\n" + "Either the \"duration\" argument to the animateBack() method should be provided, or the " + "\"duration\" or \"reverseDuration\" property should be set, either in the constructor or later, before " + "calling the animateBack() function."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 548, 12, "() {\r\n      if (this.duration == null && reverseDuration == null && duration == null) {\r\n        throw FlutterError(\r\n          'AnimationController.animateBack() called with no explicit duration and no default duration or reverseDuration.\\n'\r\n          'Either the \"duration\" argument to the animateBack() method should be provided, or the '\r\n          '\"duration\" or \"reverseDuration\" property should be set, either in the constructor or later, before '\r\n          'calling the animateBack() function.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.animateBack() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 560, 7, "_ticker != null");
      this[_direction] = animation_controller._AnimationDirection.reverse;
      return this[_animateToInternal](target, {duration: duration, curve: curve});
    }
    [_animateToInternal](target, opts) {
      if (target == null) dart.nullFailed(I[0], 568, 42, "target");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : C[6] || CT.C6;
      if (curve == null) dart.nullFailed(I[0], 568, 78, "curve");
      let scale = 1.0;
      if (dart.test(dart.nullCheck(binding.SemanticsBinding.instance).disableAnimations)) {
        switch (this.animationBehavior) {
          case C[3] || CT.C3:
          {
            scale = 0.05;
            break;
          }
          case C[4] || CT.C4:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      let simulationDuration = duration;
      if (simulationDuration == null) {
        if (!!(this.duration == null && this[_direction] == animation_controller._AnimationDirection.forward)) dart.assertFailed(null, I[0], 584, 14, "!(this.duration == null && _direction == _AnimationDirection.forward)");
        if (!!(this.duration == null && this[_direction] == animation_controller._AnimationDirection.reverse && this.reverseDuration == null)) dart.assertFailed(null, I[0], 585, 14, "!(this.duration == null && _direction == _AnimationDirection.reverse && reverseDuration == null)");
        let range = dart.notNull(this.upperBound) - dart.notNull(this.lowerBound);
        let remainingFraction = range[$isFinite] ? (dart.notNull(target) - dart.notNull(this[_value]))[$abs]() / range : 1.0;
        let directionDuration = this[_direction] == animation_controller._AnimationDirection.reverse && this.reverseDuration != null ? dart.nullCheck(this.reverseDuration) : dart.nullCheck(this.duration);
        simulationDuration = directionDuration['*'](remainingFraction);
      } else if (target == this.value) {
        simulationDuration = core.Duration.zero;
      }
      this.stop();
      if (dart.equals(simulationDuration, core.Duration.zero)) {
        if (this.value != target) {
          this[_value] = target[$clamp](this.lowerBound, this.upperBound);
          this.notifyListeners();
        }
        this[_status] = this[_direction] == animation_controller._AnimationDirection.forward ? animation.AnimationStatus.completed : animation.AnimationStatus.dismissed;
        this[_checkStatusChanged]();
        return new ticker.TickerFuture.complete();
      }
      if (!dart.test(simulationDuration['>'](core.Duration.zero))) dart.assertFailed(null, I[0], 609, 12, "simulationDuration > Duration.zero");
      if (!!dart.test(this.isAnimating)) dart.assertFailed(null, I[0], 610, 12, "!isAnimating");
      return this[_startSimulation](new animation_controller._InterpolationSimulation.new(this[_value], target, simulationDuration, curve, scale));
    }
    repeat(opts) {
      let min = opts && 'min' in opts ? opts.min : null;
      let max = opts && 'max' in opts ? opts.max : null;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      if (reverse == null) dart.nullFailed(I[0], 635, 56, "reverse");
      let period = opts && 'period' in opts ? opts.period : null;
      min == null ? min = this.lowerBound : null;
      max == null ? max = this.upperBound : null;
      period == null ? period = this.duration : null;
      if (!dart.test(dart.fn(() => {
        if (period == null) {
          dart.throw(assertions.FlutterError.new("AnimationController.repeat() called without an explicit period and with no default Duration.\n" + "Either the \"period\" argument to the repeat() method should be provided, or the " + "\"duration\" property should be set, either in the constructor or later, before " + "calling the repeat() function."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 639, 12, "() {\r\n      if (period == null) {\r\n        throw FlutterError(\r\n          'AnimationController.repeat() called without an explicit period and with no default Duration.\\n'\r\n          'Either the \"period\" argument to the repeat() method should be provided, or the '\r\n          '\"duration\" property should be set, either in the constructor or later, before '\r\n          'calling the repeat() function.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (!(dart.notNull(max) >= dart.notNull(min))) dart.assertFailed(null, I[0], 650, 12, "max >= min");
      if (!(dart.notNull(max) <= dart.notNull(this.upperBound) && dart.notNull(min) >= dart.notNull(this.lowerBound))) dart.assertFailed(null, I[0], 651, 12, "max <= upperBound && min >= lowerBound");
      if (!(reverse != null)) dart.assertFailed(null, I[0], 652, 12, "reverse != null");
      this.stop();
      return this[_startSimulation](new animation_controller._RepeatingSimulation.new(this[_value], min, max, reverse, dart.nullCheck(period), dart.bind(this, _directionSetter)));
    }
    [_directionSetter](direction) {
      if (direction == null) dart.nullFailed(I[0], 657, 45, "direction");
      this[_direction] = direction;
      this[_status] = this[_direction] == animation_controller._AnimationDirection.forward ? animation.AnimationStatus.forward : animation.AnimationStatus.reverse;
      this[_checkStatusChanged]();
    }
    fling(opts) {
      let t2, t2$;
      let velocity = opts && 'velocity' in opts ? opts.velocity : 1;
      if (velocity == null) dart.nullFailed(I[0], 684, 31, "velocity");
      let springDescription = opts && 'springDescription' in opts ? opts.springDescription : null;
      let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : null;
      springDescription == null ? springDescription = animation_controller._kFlingSpringDescription : null;
      this[_direction] = dart.notNull(velocity) < 0.0 ? animation_controller._AnimationDirection.reverse : animation_controller._AnimationDirection.forward;
      let target = dart.notNull(velocity) < 0.0 ? dart.notNull(this.lowerBound) - dart.notNull(animation_controller._kFlingTolerance.distance) : dart.notNull(this.upperBound) + dart.notNull(animation_controller._kFlingTolerance.distance);
      let scale = 1.0;
      let behavior = (t2 = animationBehavior, t2 == null ? this.animationBehavior : t2);
      if (dart.test(dart.nullCheck(binding.SemanticsBinding.instance).disableAnimations)) {
        switch (behavior) {
          case C[3] || CT.C3:
          {
            scale = 200.0;
            break;
          }
          case C[4] || CT.C4:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      let simulation = (t2$ = new spring_simulation.SpringSimulation.new(springDescription, this.value, target, dart.notNull(velocity) * scale), (() => {
        t2$.tolerance = animation_controller._kFlingTolerance;
        return t2$;
      })());
      if (!(simulation.type != spring_simulation.SpringType.underDamped)) dart.assertFailed("The resulting spring simulation is of type SpringType.underDamped.\n" + "This can lead to unexpected look of the animation, please adjust the springDescription parameter", I[0], 705, 7, "simulation.type != SpringType.underDamped");
      this.stop();
      return this[_startSimulation](simulation);
    }
    animateWith(simulation) {
      if (simulation == null) dart.nullFailed(I[0], 727, 39, "simulation");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.animateWith() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 729, 7, "_ticker != null");
      this.stop();
      this[_direction] = animation_controller._AnimationDirection.forward;
      return this[_startSimulation](simulation);
    }
    [_startSimulation](simulation) {
      if (simulation == null) dart.nullFailed(I[0], 738, 44, "simulation");
      if (!(simulation != null)) dart.assertFailed(null, I[0], 739, 12, "simulation != null");
      if (!!dart.test(this.isAnimating)) dart.assertFailed(null, I[0], 740, 12, "!isAnimating");
      this[_simulation] = simulation;
      this[_lastElapsedDuration] = core.Duration.zero;
      this[_value] = simulation.x(0.0)[$clamp](this.lowerBound, this.upperBound);
      let result = dart.nullCheck(this[_ticker]).start();
      this[_status] = this[_direction] == animation_controller._AnimationDirection.forward ? animation.AnimationStatus.forward : animation.AnimationStatus.reverse;
      this[_checkStatusChanged]();
      return result;
    }
    stop(opts) {
      let canceled = opts && 'canceled' in opts ? opts.canceled : true;
      if (canceled == null) dart.nullFailed(I[0], 769, 20, "canceled");
      if (!(this[_ticker] != null)) dart.assertFailed("AnimationController.stop() called after AnimationController.dispose()\n" + "AnimationController methods should not be used after calling dispose.", I[0], 771, 7, "_ticker != null");
      this[_simulation] = null;
      this[_lastElapsedDuration] = null;
      dart.nullCheck(this[_ticker]).stop({canceled: canceled});
    }
    dispose() {
      if (!dart.test(dart.fn(() => {
        if (this[_ticker] == null) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("AnimationController.dispose() called more than once."), new assertions.ErrorDescription.new("A given " + dart.str(this[$runtimeType]) + " cannot be disposed more than once.\n"), new (T.DiagnosticsPropertyOfAnimationController()).new("The following " + dart.str(this[$runtimeType]) + " object was disposed multiple times", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 788, 12, "() {\r\n      if (_ticker == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('AnimationController.dispose() called more than once.'),\r\n          ErrorDescription('A given $runtimeType cannot be disposed more than once.\\n'),\r\n          DiagnosticsProperty<AnimationController>(\r\n            'The following $runtimeType object was disposed multiple times',\r\n            this,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      dart.nullCheck(this[_ticker]).dispose();
      this[_ticker] = null;
      super.dispose();
    }
    [_checkStatusChanged]() {
      let newStatus = this.status;
      if (this[_lastReportedStatus] != newStatus) {
        this[_lastReportedStatus] = newStatus;
        this.notifyStatusListeners(newStatus);
      }
    }
    [_tick](elapsed) {
      if (elapsed == null) dart.nullFailed(I[0], 816, 23, "elapsed");
      this[_lastElapsedDuration] = elapsed;
      let elapsedInSeconds = elapsed.inMicroseconds[$toDouble]() / 1000000;
      if (!(elapsedInSeconds >= 0.0)) dart.assertFailed(null, I[0], 819, 12, "elapsedInSeconds >= 0.0");
      this[_value] = dart.nullCheck(this[_simulation]).x(elapsedInSeconds)[$clamp](this.lowerBound, this.upperBound);
      if (dart.test(dart.nullCheck(this[_simulation]).isDone(elapsedInSeconds))) {
        this[_status] = this[_direction] == animation_controller._AnimationDirection.forward ? animation.AnimationStatus.completed : animation.AnimationStatus.dismissed;
        this.stop({canceled: false});
      }
      this.notifyListeners();
      this[_checkStatusChanged]();
    }
    toStringDetails() {
      let paused = dart.test(this.isAnimating) ? "" : "; paused";
      let ticker = this[_ticker] == null ? "; DISPOSED" : dart.test(dart.nullCheck(this[_ticker]).muted) ? "; silenced" : "";
      let label = this.debugLabel == null ? "" : "; for " + dart.str(this.debugLabel);
      let more = dart.str(super.toStringDetails()) + " " + this.value[$toStringAsFixed](3);
      return more + paused + ticker + label;
    }
  };
  (animation_controller.AnimationController.new = function(opts) {
    let t0;
    let value = opts && 'value' in opts ? opts.value : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : 0;
    if (lowerBound == null) dart.nullFailed(I[0], 238, 10, "lowerBound");
    let upperBound = opts && 'upperBound' in opts ? opts.upperBound : 1;
    if (upperBound == null) dart.nullFailed(I[0], 239, 10, "upperBound");
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : C[3] || CT.C3;
    if (animationBehavior == null) dart.nullFailed(I[0], 240, 10, "animationBehavior");
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[0], 241, 29, "vsync");
    this[_ticker] = null;
    this[_simulation] = null;
    this[__AnimationController__value] = null;
    this[__AnimationController__value_isSet] = false;
    this[_lastElapsedDuration] = null;
    this[__AnimationController__status] = null;
    this[__AnimationController__status_isSet] = false;
    this[_lastReportedStatus] = animation.AnimationStatus.dismissed;
    this[duration$] = duration;
    this[reverseDuration$] = reverseDuration;
    this[debugLabel$] = debugLabel;
    this[lowerBound$] = lowerBound;
    this[upperBound$] = upperBound;
    this[animationBehavior$] = animationBehavior;
    if (!(lowerBound != null)) dart.assertFailed(null, I[0], 242, 15, "lowerBound != null");
    if (!(upperBound != null)) dart.assertFailed(null, I[0], 243, 15, "upperBound != null");
    if (!(dart.notNull(upperBound) >= dart.notNull(lowerBound))) dart.assertFailed(null, I[0], 244, 15, "upperBound >= lowerBound");
    if (!(vsync != null)) dart.assertFailed(null, I[0], 245, 15, "vsync != null");
    this[_direction] = animation_controller._AnimationDirection.forward;
    animation_controller.AnimationController.__proto__.new.call(this);
    this[_ticker] = vsync.createTicker(dart.bind(this, _tick));
    this[_internalSetValue]((t0 = value, t0 == null ? this.lowerBound : t0));
  }).prototype = animation_controller.AnimationController.prototype;
  (animation_controller.AnimationController.unbounded = function(opts) {
    let value = opts && 'value' in opts ? opts.value : 0;
    if (value == null) dart.nullFailed(I[0], 269, 12, "value");
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[0], 273, 29, "vsync");
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : C[4] || CT.C4;
    if (animationBehavior == null) dart.nullFailed(I[0], 274, 10, "animationBehavior");
    this[_ticker] = null;
    this[_simulation] = null;
    this[__AnimationController__value] = null;
    this[__AnimationController__value_isSet] = false;
    this[_lastElapsedDuration] = null;
    this[__AnimationController__status] = null;
    this[__AnimationController__status_isSet] = false;
    this[_lastReportedStatus] = animation.AnimationStatus.dismissed;
    this[duration$] = duration;
    this[reverseDuration$] = reverseDuration;
    this[debugLabel$] = debugLabel;
    this[animationBehavior$] = animationBehavior;
    if (!(value != null)) dart.assertFailed(null, I[0], 275, 15, "value != null");
    if (!(vsync != null)) dart.assertFailed(null, I[0], 276, 15, "vsync != null");
    this[lowerBound$] = -1 / 0;
    this[upperBound$] = 1 / 0;
    this[_direction] = animation_controller._AnimationDirection.forward;
    animation_controller.AnimationController.__proto__.new.call(this);
    this[_ticker] = vsync.createTicker(dart.bind(this, _tick));
    this[_internalSetValue](value);
  }).prototype = animation_controller.AnimationController.prototype;
  dart.addTypeTests(animation_controller.AnimationController);
  dart.addTypeCaches(animation_controller.AnimationController);
  dart.setMethodSignature(animation_controller.AnimationController, () => ({
    __proto__: dart.getMethods(animation_controller.AnimationController.__proto__),
    resync: dart.fnType(dart.void, [ticker.TickerProvider]),
    reset: dart.fnType(dart.void, []),
    [_internalSetValue]: dart.fnType(dart.void, [core.double]),
    forward: dart.fnType(ticker.TickerFuture, [], {from: dart.nullable(core.double)}, {}),
    reverse: dart.fnType(ticker.TickerFuture, [], {from: dart.nullable(core.double)}, {}),
    animateTo: dart.fnType(ticker.TickerFuture, [core.double], {curve: curves.Curve, duration: dart.nullable(core.Duration)}, {}),
    animateBack: dart.fnType(ticker.TickerFuture, [core.double], {curve: curves.Curve, duration: dart.nullable(core.Duration)}, {}),
    [_animateToInternal]: dart.fnType(ticker.TickerFuture, [core.double], {curve: curves.Curve, duration: dart.nullable(core.Duration)}, {}),
    repeat: dart.fnType(ticker.TickerFuture, [], {max: dart.nullable(core.double), min: dart.nullable(core.double), period: dart.nullable(core.Duration), reverse: core.bool}, {}),
    [_directionSetter]: dart.fnType(dart.void, [animation_controller._AnimationDirection]),
    fling: dart.fnType(ticker.TickerFuture, [], {animationBehavior: dart.nullable(animation_controller.AnimationBehavior), springDescription: dart.nullable(spring_simulation.SpringDescription), velocity: core.double}, {}),
    animateWith: dart.fnType(ticker.TickerFuture, [simulation.Simulation]),
    [_startSimulation]: dart.fnType(ticker.TickerFuture, [simulation.Simulation]),
    stop: dart.fnType(dart.void, [], {canceled: core.bool}, {}),
    [_checkStatusChanged]: dart.fnType(dart.void, []),
    [_tick]: dart.fnType(dart.void, [core.Duration])
  }));
  dart.setGetterSignature(animation_controller.AnimationController, () => ({
    __proto__: dart.getGetters(animation_controller.AnimationController.__proto__),
    view: animation.Animation$(core.double),
    value: core.double,
    [_value]: core.double,
    velocity: core.double,
    lastElapsedDuration: dart.nullable(core.Duration),
    isAnimating: core.bool,
    status: animation.AnimationStatus,
    [_status]: animation.AnimationStatus
  }));
  dart.setSetterSignature(animation_controller.AnimationController, () => ({
    __proto__: dart.getSetters(animation_controller.AnimationController.__proto__),
    [_value]: core.double,
    value: core.double,
    [_status]: animation.AnimationStatus
  }));
  dart.setLibraryUri(animation_controller.AnimationController, I[1]);
  dart.setFieldSignature(animation_controller.AnimationController, () => ({
    __proto__: dart.getFields(animation_controller.AnimationController.__proto__),
    lowerBound: dart.finalFieldType(core.double),
    upperBound: dart.finalFieldType(core.double),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    animationBehavior: dart.finalFieldType(animation_controller.AnimationBehavior),
    duration: dart.fieldType(dart.nullable(core.Duration)),
    reverseDuration: dart.fieldType(dart.nullable(core.Duration)),
    [_ticker]: dart.fieldType(dart.nullable(ticker.Ticker)),
    [_simulation]: dart.fieldType(dart.nullable(simulation.Simulation)),
    [__AnimationController__value]: dart.fieldType(dart.nullable(core.double)),
    [__AnimationController__value_isSet]: dart.fieldType(core.bool),
    [_lastElapsedDuration]: dart.fieldType(dart.nullable(core.Duration)),
    [_direction]: dart.fieldType(animation_controller._AnimationDirection),
    [__AnimationController__status]: dart.fieldType(dart.nullable(animation.AnimationStatus)),
    [__AnimationController__status_isSet]: dart.fieldType(core.bool),
    [_lastReportedStatus]: dart.fieldType(animation.AnimationStatus)
  }));
  var _begin$ = dart.privateName(animation_controller, "_begin");
  var _end$ = dart.privateName(animation_controller, "_end");
  var _curve$ = dart.privateName(animation_controller, "_curve");
  var _durationInSeconds = dart.privateName(animation_controller, "_durationInSeconds");
  animation_controller._InterpolationSimulation = class _InterpolationSimulation extends simulation.Simulation {
    x(timeInSeconds) {
      if (timeInSeconds == null) dart.nullFailed(I[0], 854, 19, "timeInSeconds");
      let t = (dart.notNull(timeInSeconds) / dart.notNull(this[_durationInSeconds]))[$clamp](0.0, 1.0);
      if (t === 0.0)
        return this[_begin$];
      else if (t === 1.0)
        return this[_end$];
      else
        return dart.notNull(this[_begin$]) + (dart.notNull(this[_end$]) - dart.notNull(this[_begin$])) * dart.notNull(this[_curve$].transform(t));
    }
    dx(timeInSeconds) {
      if (timeInSeconds == null) dart.nullFailed(I[0], 865, 20, "timeInSeconds");
      let epsilon = this.tolerance.time;
      return (dart.notNull(this.x(dart.notNull(timeInSeconds) + dart.notNull(epsilon))) - dart.notNull(this.x(dart.notNull(timeInSeconds) - dart.notNull(epsilon)))) / (2 * dart.notNull(epsilon));
    }
    isDone(timeInSeconds) {
      if (timeInSeconds == null) dart.nullFailed(I[0], 871, 22, "timeInSeconds");
      return dart.notNull(timeInSeconds) > dart.notNull(this[_durationInSeconds]);
    }
  };
  (animation_controller._InterpolationSimulation.new = function(_begin, _end, duration, _curve, scale) {
    if (_begin == null) dart.nullFailed(I[0], 842, 33, "_begin");
    if (_end == null) dart.nullFailed(I[0], 842, 46, "_end");
    if (duration == null) dart.nullFailed(I[0], 842, 61, "duration");
    if (_curve == null) dart.nullFailed(I[0], 842, 76, "_curve");
    if (scale == null) dart.nullFailed(I[0], 842, 91, "scale");
    this[_begin$] = _begin;
    this[_end$] = _end;
    this[_curve$] = _curve;
    if (!(_begin != null)) dart.assertFailed(null, I[0], 843, 14, "_begin != null");
    if (!(_end != null)) dart.assertFailed(null, I[0], 844, 14, "_end != null");
    if (!(duration != null && dart.notNull(duration.inMicroseconds) > 0)) dart.assertFailed(null, I[0], 845, 14, "duration != null && duration.inMicroseconds > 0");
    this[_durationInSeconds] = dart.notNull(duration.inMicroseconds) * dart.notNull(scale) / 1000000;
    animation_controller._InterpolationSimulation.__proto__.new.call(this);
    ;
  }).prototype = animation_controller._InterpolationSimulation.prototype;
  dart.addTypeTests(animation_controller._InterpolationSimulation);
  dart.addTypeCaches(animation_controller._InterpolationSimulation);
  dart.setMethodSignature(animation_controller._InterpolationSimulation, () => ({
    __proto__: dart.getMethods(animation_controller._InterpolationSimulation.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(animation_controller._InterpolationSimulation, I[1]);
  dart.setFieldSignature(animation_controller._InterpolationSimulation, () => ({
    __proto__: dart.getFields(animation_controller._InterpolationSimulation.__proto__),
    [_durationInSeconds]: dart.finalFieldType(core.double),
    [_begin$]: dart.finalFieldType(core.double),
    [_end$]: dart.finalFieldType(core.double),
    [_curve$]: dart.finalFieldType(curves.Curve)
  }));
  var _periodInSeconds = dart.privateName(animation_controller, "_periodInSeconds");
  var _initialT = dart.privateName(animation_controller, "_initialT");
  animation_controller._RepeatingSimulation = class _RepeatingSimulation extends simulation.Simulation {
    x(timeInSeconds) {
      let t2, t2$;
      if (timeInSeconds == null) dart.nullFailed(I[0], 893, 19, "timeInSeconds");
      if (!(dart.notNull(timeInSeconds) >= 0.0)) dart.assertFailed(null, I[0], 894, 12, "timeInSeconds >= 0.0");
      let totalTimeInSeconds = dart.notNull(timeInSeconds) + dart.notNull(this[_initialT]);
      let t = (totalTimeInSeconds / dart.notNull(this[_periodInSeconds]))[$modulo](1.0);
      let _isPlayingReverse = (totalTimeInSeconds / dart.notNull(this[_periodInSeconds]))[$truncate]()[$isOdd];
      if (dart.test(this.reverse) && _isPlayingReverse) {
        t2 = animation_controller._AnimationDirection.reverse;
        this.directionSetter(t2);
        return dart.nullCheck(ui.lerpDouble(this.max, this.min, t));
      } else {
        t2$ = animation_controller._AnimationDirection.forward;
        this.directionSetter(t2$);
        return dart.nullCheck(ui.lerpDouble(this.min, this.max, t));
      }
    }
    dx(timeInSeconds) {
      if (timeInSeconds == null) dart.nullFailed(I[0], 910, 20, "timeInSeconds");
      return (dart.notNull(this.max) - dart.notNull(this.min)) / dart.notNull(this[_periodInSeconds]);
    }
    isDone(timeInSeconds) {
      if (timeInSeconds == null) dart.nullFailed(I[0], 913, 22, "timeInSeconds");
      return false;
    }
  };
  (animation_controller._RepeatingSimulation.new = function(initialValue, min, max, reverse, period, directionSetter) {
    if (initialValue == null) dart.nullFailed(I[0], 877, 31, "initialValue");
    if (min == null) dart.nullFailed(I[0], 877, 50, "min");
    if (max == null) dart.nullFailed(I[0], 877, 60, "max");
    if (reverse == null) dart.nullFailed(I[0], 877, 70, "reverse");
    if (period == null) dart.nullFailed(I[0], 877, 88, "period");
    if (directionSetter == null) dart.nullFailed(I[0], 877, 101, "directionSetter");
    this.min = min;
    this.max = max;
    this.reverse = reverse;
    this.directionSetter = directionSetter;
    this[_periodInSeconds] = dart.notNull(period.inMicroseconds) / 1000000;
    this[_initialT] = max == min ? 0.0 : dart.notNull(initialValue) / (dart.notNull(max) - dart.notNull(min)) * (dart.notNull(period.inMicroseconds) / 1000000);
    animation_controller._RepeatingSimulation.__proto__.new.call(this);
    if (!(dart.notNull(this[_periodInSeconds]) > 0.0)) dart.assertFailed(null, I[0], 880, 12, "_periodInSeconds > 0.0");
    if (!(dart.notNull(this[_initialT]) >= 0.0)) dart.assertFailed(null, I[0], 881, 12, "_initialT >= 0.0");
  }).prototype = animation_controller._RepeatingSimulation.prototype;
  dart.addTypeTests(animation_controller._RepeatingSimulation);
  dart.addTypeCaches(animation_controller._RepeatingSimulation);
  dart.setMethodSignature(animation_controller._RepeatingSimulation, () => ({
    __proto__: dart.getMethods(animation_controller._RepeatingSimulation.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(animation_controller._RepeatingSimulation, I[1]);
  dart.setFieldSignature(animation_controller._RepeatingSimulation, () => ({
    __proto__: dart.getFields(animation_controller._RepeatingSimulation.__proto__),
    min: dart.finalFieldType(core.double),
    max: dart.finalFieldType(core.double),
    reverse: dart.finalFieldType(core.bool),
    directionSetter: dart.finalFieldType(dart.fnType(dart.void, [animation_controller._AnimationDirection])),
    [_periodInSeconds]: dart.finalFieldType(core.double),
    [_initialT]: dart.finalFieldType(core.double)
  }));
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  dart.defineLazy(animation_controller, {
    /*animation_controller._kFlingSpringDescription*/get _kFlingSpringDescription() {
      return new spring_simulation.SpringDescription.withDampingRatio({mass: 1.0, stiffness: 500.0, ratio: 1.0});
    },
    /*animation_controller._kFlingTolerance*/get _kFlingTolerance() {
      return C[7] || CT.C7;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/animation/animation_controller.dart", {
    "package:flutter/src/animation/animation_controller.dart": animation_controller
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["animation_controller.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/animation/animation_controller.dart.lib.js"}');
  // Exports:
  return {
    src__animation__animation_controller: animation_controller
  };
}));

//# sourceMappingURL=animation_controller.dart.lib.js.map
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371

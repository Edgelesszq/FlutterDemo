<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__services__text_input_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__services__text_editing$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const io = dart_sdk.io;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var text_input = Object.create(dart.library);
  var autofill = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $contains = dartx.contains;
  var $keys = dartx.keys;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $any = dartx.any;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    SmartDashesTypeL: () => (T.SmartDashesTypeL = dart.constFn(dart.legacy(text_input.SmartDashesType)))(),
    SmartQuotesTypeL: () => (T.SmartQuotesTypeL = dart.constFn(dart.legacy(text_input.SmartQuotesType)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    TextInputTypeL: () => (T.TextInputTypeL = dart.constFn(dart.legacy(text_input.TextInputType)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    TextInputActionL: () => (T.TextInputActionL = dart.constFn(dart.legacy(text_input.TextInputAction)))(),
    TextCapitalizationL: () => (T.TextCapitalizationL = dart.constFn(dart.legacy(text_input.TextCapitalization)))(),
    FloatingCursorDragStateL: () => (T.FloatingCursorDragStateL = dart.constFn(dart.legacy(text_input.FloatingCursorDragState)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    TextInputConfigurationToMapOfString$dynamic: () => (T.TextInputConfigurationToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [text_input.TextInputConfiguration])))(),
    AutofillClientTobool: () => (T.AutofillClientTobool = dart.constFn(dart.fnType(core.bool, [autofill.AutofillClient])))(),
    AutofillClientToTextInputConfiguration: () => (T.AutofillClientToTextInputConfiguration = dart.constFn(dart.fnType(text_input.TextInputConfiguration, [autofill.AutofillClient])))()
=======
define(['dart_sdk', 'packages/flutter/src/rendering/editable.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/services/text_formatter.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/characters/src/extensions.dart', 'packages/flutter/src/cupertino/text_theme.dart', 'packages/flutter/src/cupertino/text_selection.dart', 'packages/flutter/src/cupertino/desktop_text_selection.dart', 'packages/flutter/src/material/text_selection.dart', 'packages/flutter/src/material/desktop_text_selection.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__flutter__src__material__text_field_dart(dart_sdk, packages__flutter__src__rendering__editable$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__services__text_formatter$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__rendering__layer$46dart, packages__characters__src__extensions$46dart, packages__flutter__src__cupertino__text_theme$46dart, packages__flutter__src__cupertino__text_selection$46dart, packages__flutter__src__cupertino__desktop_text_selection$46dart, packages__flutter__src__material__text_selection$46dart, packages__flutter__src__material__desktop_text_selection$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const editable = packages__flutter__src__rendering__editable$46dart.src__rendering__editable;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const feedback = packages__flutter__src__material__icon_button$46dart.src__material__feedback;
  const input_decorator = packages__flutter__src__material__icon_button$46dart.src__material__input_decorator;
  const material_localizations = packages__flutter__src__material__icon_button$46dart.src__material__material_localizations;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const text_selection_theme = packages__flutter__src__material__icon_button$46dart.src__material__text_selection_theme;
  const text_selection = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text_selection;
  const editable_text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__editable_text;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const restoration_properties = packages__flutter__src__widgets__widget_span$46dart.src__widgets__restoration_properties;
  const debug$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__debug;
  const restoration = packages__flutter__src__widgets__widget_span$46dart.src__widgets__restoration;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const shortcuts = packages__flutter__src__widgets__widget_span$46dart.src__widgets__shortcuts;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  const text_formatter = packages__flutter__src__services__text_formatter$46dart.src__services__text_formatter;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const extensions = packages__characters__src__extensions$46dart.src__extensions;
  const theme$0 = packages__flutter__src__cupertino__text_theme$46dart.src__cupertino__theme;
  const colors$ = packages__flutter__src__cupertino__text_theme$46dart.src__cupertino__colors;
  const text_selection$ = packages__flutter__src__cupertino__text_selection$46dart.src__cupertino__text_selection;
  const desktop_text_selection = packages__flutter__src__cupertino__desktop_text_selection$46dart.src__cupertino__desktop_text_selection;
  const text_selection$0 = packages__flutter__src__material__text_selection$46dart.src__material__text_selection;
  const desktop_text_selection$ = packages__flutter__src__material__desktop_text_selection$46dart.src__material__desktop_text_selection;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const restoration$ = packages__flutter__src__services__system_channels$46dart.src__services__restoration;
  var text_field = Object.create(dart.library);
  var $length = dartx.length;
  var $clamp = dartx.clamp;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    DiagnosticsPropertyOfTextEditingController: () => (T.DiagnosticsPropertyOfTextEditingController = dart.constFn(diagnostics.DiagnosticsProperty$(editable_text.TextEditingController)))(),
    DiagnosticsPropertyOfFocusNode: () => (T.DiagnosticsPropertyOfFocusNode = dart.constFn(diagnostics.DiagnosticsProperty$(focus_manager.FocusNode)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    DiagnosticsPropertyOfInputDecoration: () => (T.DiagnosticsPropertyOfInputDecoration = dart.constFn(diagnostics.DiagnosticsProperty$(input_decorator.InputDecoration)))(),
    DiagnosticsPropertyOfTextInputType: () => (T.DiagnosticsPropertyOfTextInputType = dart.constFn(diagnostics.DiagnosticsProperty$(text_input.TextInputType)))(),
    DiagnosticsPropertyOfTextStyle: () => (T.DiagnosticsPropertyOfTextStyle = dart.constFn(diagnostics.DiagnosticsProperty$(text_style.TextStyle)))(),
    DiagnosticsPropertyOfString: () => (T.DiagnosticsPropertyOfString = dart.constFn(diagnostics.DiagnosticsProperty$(core.String)))(),
    EnumPropertyOfSmartDashesType: () => (T.EnumPropertyOfSmartDashesType = dart.constFn(diagnostics.EnumProperty$(text_input.SmartDashesType)))(),
    EnumPropertyOfSmartQuotesType: () => (T.EnumPropertyOfSmartQuotesType = dart.constFn(diagnostics.EnumProperty$(text_input.SmartQuotesType)))(),
    EnumPropertyOfMaxLengthEnforcement: () => (T.EnumPropertyOfMaxLengthEnforcement = dart.constFn(diagnostics.EnumProperty$(text_formatter.MaxLengthEnforcement)))(),
    EnumPropertyOfTextInputAction: () => (T.EnumPropertyOfTextInputAction = dart.constFn(diagnostics.EnumProperty$(text_input.TextInputAction)))(),
    EnumPropertyOfTextCapitalization: () => (T.EnumPropertyOfTextCapitalization = dart.constFn(diagnostics.EnumProperty$(text_input.TextCapitalization)))(),
    EnumPropertyOfTextAlign: () => (T.EnumPropertyOfTextAlign = dart.constFn(diagnostics.EnumProperty$(ui.TextAlign)))(),
    DiagnosticsPropertyOfTextAlignVertical: () => (T.DiagnosticsPropertyOfTextAlignVertical = dart.constFn(diagnostics.DiagnosticsProperty$(alignment.TextAlignVertical)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    DiagnosticsPropertyOfRadius: () => (T.DiagnosticsPropertyOfRadius = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Radius)))(),
    DiagnosticsPropertyOfBrightness: () => (T.DiagnosticsPropertyOfBrightness = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Brightness)))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (T.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(edge_insets.EdgeInsetsGeometry)))(),
    DiagnosticsPropertyOfTextSelectionControls: () => (T.DiagnosticsPropertyOfTextSelectionControls = dart.constFn(diagnostics.DiagnosticsProperty$(text_selection.TextSelectionControls)))(),
    DiagnosticsPropertyOfScrollController: () => (T.DiagnosticsPropertyOfScrollController = dart.constFn(diagnostics.DiagnosticsProperty$(scroll_controller.ScrollController)))(),
    DiagnosticsPropertyOfScrollPhysics: () => (T.DiagnosticsPropertyOfScrollPhysics = dart.constFn(diagnostics.DiagnosticsProperty$(scroll_physics.ScrollPhysics)))(),
    GlobalKeyOfEditableTextState: () => (T.GlobalKeyOfEditableTextState = dart.constFn(framework.GlobalKey$(editable_text.EditableTextState)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfTextInputFormatter: () => (T.JSArrayOfTextInputFormatter = dart.constFn(_interceptors.JSArray$(text_formatter.TextInputFormatter)))(),
    JSArrayOfListenable: () => (T.JSArrayOfListenable = dart.constFn(_interceptors.JSArray$(change_notifier.Listenable)))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToInputDecorator: () => (T.BuildContextAndWidgetNToInputDecorator = dart.constFn(dart.fnType(input_decorator.InputDecorator, [framework.BuildContext, T.WidgetN()])))(),
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    PointerEnterEventTovoid: () => (T.PointerEnterEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerEnterEvent])))(),
    PointerExitEventTovoid: () => (T.PointerExitEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerExitEvent])))(),
    BuildContextAndWidgetNToSemantics: () => (T.BuildContextAndWidgetNToSemantics = dart.constFn(dart.fnType(basic.Semantics, [framework.BuildContext, T.WidgetN()])))()
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.disabled",
        index: 0
=======
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.iOS",
        index: 2
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C1() {
      return C[1] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.enabled",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T.SmartDashesTypeL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.disabled",
        index: 0
=======
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.android",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.fuchsia",
        index: 1
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C4() {
      return C[4] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.enabled",
        index: 1
=======
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name]: "TargetPlatform.windows",
        index: 5
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C5() {
      return C[5] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], T.SmartQuotesTypeL());
    },
    get C6() {
      return C[6] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 0
=======
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.mouse",
        index: 1
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C7() {
      return C[7] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 1
=======
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.stylus",
        index: 2
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C8() {
      return C[8] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: false,
        [signed$]: false,
        [index$]: 2
=======
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.invertedStylus",
        index: 3
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C9() {
      return C[9] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 3
=======
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.touch",
        index: 0
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C10() {
      return C[10] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 4
=======
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.unknown",
        index: 4
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C11() {
      return C[11] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 5
=======
        __proto__: input_decorator.InputDecoration.prototype,
        [InputDecoration_alignLabelWithHint]: null,
        [InputDecoration_semanticCounterText]: null,
        [InputDecoration_enabled]: true,
        [InputDecoration_border]: null,
        [InputDecoration_enabledBorder]: null,
        [InputDecoration_disabledBorder]: null,
        [InputDecoration_focusedErrorBorder]: null,
        [InputDecoration_focusedBorder]: null,
        [InputDecoration_errorBorder]: null,
        [InputDecoration_hoverColor]: null,
        [InputDecoration_focusColor]: null,
        [InputDecoration_fillColor]: null,
        [InputDecoration_filled]: null,
        [InputDecoration_counterStyle]: null,
        [InputDecoration_counter]: null,
        [InputDecoration_counterText]: null,
        [InputDecoration_suffixIconConstraints]: null,
        [InputDecoration_suffixStyle]: null,
        [InputDecoration_suffixText]: null,
        [InputDecoration_suffix]: null,
        [InputDecoration_suffixIcon]: null,
        [InputDecoration_prefixStyle]: null,
        [InputDecoration_prefixText]: null,
        [InputDecoration_prefix]: null,
        [InputDecoration_prefixIconConstraints]: null,
        [InputDecoration_prefixIcon]: null,
        [InputDecoration_isCollapsed]: false,
        [InputDecoration_contentPadding]: null,
        [InputDecoration_isDense]: null,
        [InputDecoration_floatingLabelBehavior]: null,
        [InputDecoration_hasFloatingPlaceholder]: true,
        [InputDecoration_errorMaxLines]: null,
        [InputDecoration_errorStyle]: null,
        [InputDecoration_errorText]: null,
        [InputDecoration_hintMaxLines]: null,
        [InputDecoration_hintTextDirection]: null,
        [InputDecoration_hintStyle]: null,
        [InputDecoration_hintText]: null,
        [InputDecoration_helperMaxLines]: null,
        [InputDecoration_helperStyle]: null,
        [InputDecoration_helperText]: null,
        [InputDecoration_labelStyle]: null,
        [InputDecoration_labelText]: null,
        [InputDecoration_icon]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C12() {
      return C[12] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 6
=======
        __proto__: text_input.TextCapitalization.prototype,
        [_name$0]: "TextCapitalization.none",
        index: 3
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C13() {
      return C[13] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 7
=======
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.start",
        index: 4
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C14() {
      return C[14] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 8
=======
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.tight",
        index: 0
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C15() {
      return C[15] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 9
      });
    },
    get C16() {
      return C[16] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15], T.TextInputTypeL());
    },
    get C17() {
      return C[17] = dart.constList(["text", "multiline", "number", "phone", "datetime", "emailAddress", "url", "visiblePassword", "name", "address"], T.StringL());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.none",
        index: 0
=======
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$1]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: editable_text.ToolbarOptions.prototype,
        [ToolbarOptions_selectAll]: true,
        [ToolbarOptions_paste]: true,
        [ToolbarOptions_cut]: false,
        [ToolbarOptions_copy]: false
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C19() {
      return C[19] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.unspecified",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.done",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.go",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.search",
        index: 4
=======
        __proto__: editable_text.ToolbarOptions.prototype,
        [ToolbarOptions_selectAll]: true,
        [ToolbarOptions_paste]: true,
        [ToolbarOptions_cut]: true,
        [ToolbarOptions_copy]: true
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "container",
        [_Location_column]: 11,
        [_Location_line]: 928,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C23() {
      return C[23] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.send",
        index: 5
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "liveRegion",
        [_Location_column]: 11,
        [_Location_line]: 929,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C24() {
      return C[24] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.next",
        index: 6
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.previous",
        index: 7
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.continueAction",
        index: 8
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.join",
        index: 9
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.route",
        index: 10
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.emergencyCall",
        index: 11
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 930,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.constList([C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], T._LocationL());
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[21] || CT.C21,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 927,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: media_query.NavigationMode.prototype,
        [_name$2]: "NavigationMode.traditional",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: media_query.NavigationMode.prototype,
        [_name$2]: "NavigationMode.directional",
        index: 1
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 2,
        [Radius_x]: 2
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C30() {
      return C[30] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.newline",
        index: 12
      });
    },
    get C31() {
      return C[31] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], T.TextInputActionL());
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.words",
        index: 0
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 1196,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "readOnly",
        [_Location_column]: 11,
        [_Location_line]: 1197,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "toolbarOptions",
        [_Location_column]: 11,
        [_Location_line]: 1198,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C33() {
      return C[33] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.sentences",
        index: 1
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCursor",
        [_Location_column]: 11,
        [_Location_line]: 1199,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C34() {
      return C[34] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.characters",
        index: 2
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showSelectionHandles",
        [_Location_column]: 11,
        [_Location_line]: 1200,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C35() {
      return C[35] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.none",
        index: 3
      });
    },
    get C36() {
      return C[36] = dart.constList([C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35], T.TextCapitalizationL());
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 11,
        [_Location_line]: 1201,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 11,
        [_Location_line]: 1202,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardType",
        [_Location_column]: 11,
        [_Location_line]: 1203,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C38() {
      return C[38] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Start",
        index: 0
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textInputAction",
        [_Location_column]: 11,
        [_Location_line]: 1204,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C39() {
      return C[39] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Update",
        index: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.End",
        index: 2
      });
    },
    get C41() {
      return C[41] = dart.constList([C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], T.FloatingCursorDragStateL());
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1,
        [TextSelection_isDirectional]: false,
        [TextSelection_affinity]: C[43] || CT.C43,
        [TextSelection_extentOffset]: -1,
        [TextSelection_baseOffset]: -1
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textCapitalization",
        [_Location_column]: 11,
        [_Location_line]: 1205,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 11,
        [_Location_line]: 1206,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "strutStyle",
        [_Location_column]: 11,
        [_Location_line]: 1207,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 11,
        [_Location_line]: 1208,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 11,
        [_Location_line]: 1209,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C44() {
      return C[44] = dart.const({
<<<<<<< HEAD
        __proto__: ui.TextRange.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 11,
        [_Location_line]: 1210,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C45() {
      return C[45] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextEditingValue.prototype,
        [composing$]: C[44] || CT.C44,
        [selection$]: C[42] || CT.C42,
        [text$]: ""
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "obscuringCharacter",
        [_Location_column]: 11,
        [_Location_line]: 1211,
        [_Location_file]: null
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
      });
    },
    get C46() {
      return C[46] = dart.const({
<<<<<<< HEAD
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: -1
      });
    },
    get C47() {
      return C[47] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[25] || CT.C25, C[30] || CT.C30], T.TextInputActionL());
    },
    get C48() {
      return C[48] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[30] || CT.C30, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29], T.TextInputActionL());
    }
  }, false);
  var C = Array(49).fill(void 0);
  var I = [
    "file:///D:/flutterSDK/flutter/packages/flutter/lib/src/services/text_input.dart",
    "package:flutter/src/services/text_input.dart",
    "package:flutter/src/services/autofill.dart",
    "file:///D:/flutterSDK/flutter/packages/flutter/lib/src/services/autofill.dart"
  ];
  var _name$ = dart.privateName(text_input, "_name");
  text_input.SmartDashesType = class SmartDashesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartDashesType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 38, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 38, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartDashesType.prototype;
  dart.addTypeTests(text_input.SmartDashesType);
  dart.addTypeCaches(text_input.SmartDashesType);
  dart.setLibraryUri(text_input.SmartDashesType, I[1]);
  dart.setFieldSignature(text_input.SmartDashesType, () => ({
    __proto__: dart.getFields(text_input.SmartDashesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartDashesType, ['toString']);
  text_input.SmartDashesType.disabled = C[0] || CT.C0;
  text_input.SmartDashesType.enabled = C[1] || CT.C1;
  text_input.SmartDashesType.values = C[2] || CT.C2;
  text_input.SmartQuotesType = class SmartQuotesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartQuotesType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 60, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 60, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartQuotesType.prototype;
  dart.addTypeTests(text_input.SmartQuotesType);
  dart.addTypeCaches(text_input.SmartQuotesType);
  dart.setLibraryUri(text_input.SmartQuotesType, I[1]);
  dart.setFieldSignature(text_input.SmartQuotesType, () => ({
    __proto__: dart.getFields(text_input.SmartQuotesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartQuotesType, ['toString']);
  text_input.SmartQuotesType.disabled = C[3] || CT.C3;
  text_input.SmartQuotesType.enabled = C[4] || CT.C4;
  text_input.SmartQuotesType.values = C[5] || CT.C5;
  var index$ = dart.privateName(text_input, "TextInputType.index");
  var signed$ = dart.privateName(text_input, "TextInputType.signed");
  var decimal$ = dart.privateName(text_input, "TextInputType.decimal");
  text_input.TextInputType = class TextInputType extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get signed() {
      return this[signed$];
    }
    set signed(value) {
      super.signed = value;
    }
    get decimal() {
      return this[decimal$];
    }
    set decimal(value) {
      super.decimal = value;
    }
    get [_name$]() {
      return "TextInputType." + dart.str(text_input.TextInputType._names[$_get](this.index));
    }
    toJson() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this[_name$], "signed", this.signed, "decimal", this.decimal]);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "TextInputType")) + "(" + "name: " + dart.str(this[_name$]) + ", " + "signed: " + dart.str(this.signed) + ", " + "decimal: " + dart.str(this.decimal) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return text_input.TextInputType.is(other) && other.index == this.index && other.signed == this.signed && other.decimal == this.decimal;
    }
    get hashCode() {
      return ui.hashValues(this.index, this.signed, this.decimal);
    }
  };
  (text_input.TextInputType.__ = function(index) {
    if (index == null) dart.nullFailed(I[0], 83, 30, "index");
    this[index$] = index;
    this[signed$] = null;
    this[decimal$] = null;
    ;
  }).prototype = text_input.TextInputType.prototype;
  (text_input.TextInputType.numberWithOptions = function(opts) {
    let signed = opts && 'signed' in opts ? opts.signed : false;
    let decimal = opts && 'decimal' in opts ? opts.decimal : false;
    this[signed$] = signed;
    this[decimal$] = decimal;
    this[index$] = 2;
    ;
  }).prototype = text_input.TextInputType.prototype;
  dart.addTypeTests(text_input.TextInputType);
  dart.addTypeCaches(text_input.TextInputType);
  dart.setMethodSignature(text_input.TextInputType, () => ({
    __proto__: dart.getMethods(text_input.TextInputType.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(text_input.TextInputType, () => ({
    __proto__: dart.getGetters(text_input.TextInputType.__proto__),
    [_name$]: core.String
  }));
  dart.setLibraryUri(text_input.TextInputType, I[1]);
  dart.setFieldSignature(text_input.TextInputType, () => ({
    __proto__: dart.getFields(text_input.TextInputType.__proto__),
    index: dart.finalFieldType(core.int),
    signed: dart.finalFieldType(dart.nullable(core.bool)),
    decimal: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(text_input.TextInputType, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextInputType, ['hashCode']);
  dart.defineLazy(text_input.TextInputType, {
    /*text_input.TextInputType.text*/get text() {
      return C[6] || CT.C6;
    },
    /*text_input.TextInputType.multiline*/get multiline() {
      return C[7] || CT.C7;
    },
    /*text_input.TextInputType.number*/get number() {
      return C[8] || CT.C8;
    },
    /*text_input.TextInputType.phone*/get phone() {
      return C[9] || CT.C9;
    },
    /*text_input.TextInputType.datetime*/get datetime() {
      return C[10] || CT.C10;
    },
    /*text_input.TextInputType.emailAddress*/get emailAddress() {
      return C[11] || CT.C11;
    },
    /*text_input.TextInputType.url*/get url() {
      return C[12] || CT.C12;
    },
    /*text_input.TextInputType.visiblePassword*/get visiblePassword() {
      return C[13] || CT.C13;
    },
    /*text_input.TextInputType.name_*/get name_() {
      return C[14] || CT.C14;
    },
    /*text_input.TextInputType.streetAddress*/get streetAddress() {
      return C[15] || CT.C15;
    },
    /*text_input.TextInputType.values*/get values() {
      return C[16] || CT.C16;
    },
    /*text_input.TextInputType._names*/get _names() {
      return C[17] || CT.C17;
    }
  }, false);
  text_input.TextInputAction = class TextInputAction extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextInputAction.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 252, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 252, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextInputAction.prototype;
  dart.addTypeTests(text_input.TextInputAction);
  dart.addTypeCaches(text_input.TextInputAction);
  dart.setLibraryUri(text_input.TextInputAction, I[1]);
  dart.setFieldSignature(text_input.TextInputAction, () => ({
    __proto__: dart.getFields(text_input.TextInputAction.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextInputAction, ['toString']);
  text_input.TextInputAction.none = C[18] || CT.C18;
  text_input.TextInputAction.unspecified = C[19] || CT.C19;
  text_input.TextInputAction.done = C[20] || CT.C20;
  text_input.TextInputAction.go = C[21] || CT.C21;
  text_input.TextInputAction.search = C[22] || CT.C22;
  text_input.TextInputAction.send = C[23] || CT.C23;
  text_input.TextInputAction.next = C[24] || CT.C24;
  text_input.TextInputAction.previous = C[25] || CT.C25;
  text_input.TextInputAction.continueAction = C[26] || CT.C26;
  text_input.TextInputAction.join = C[27] || CT.C27;
  text_input.TextInputAction.route = C[28] || CT.C28;
  text_input.TextInputAction.emergencyCall = C[29] || CT.C29;
  text_input.TextInputAction.newline = C[30] || CT.C30;
  text_input.TextInputAction.values = C[31] || CT.C31;
  text_input.TextCapitalization = class TextCapitalization extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextCapitalization.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 408, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 408, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextCapitalization.prototype;
  dart.addTypeTests(text_input.TextCapitalization);
  dart.addTypeCaches(text_input.TextCapitalization);
  dart.setLibraryUri(text_input.TextCapitalization, I[1]);
  dart.setFieldSignature(text_input.TextCapitalization, () => ({
    __proto__: dart.getFields(text_input.TextCapitalization.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextCapitalization, ['toString']);
  text_input.TextCapitalization.words = C[32] || CT.C32;
  text_input.TextCapitalization.sentences = C[33] || CT.C33;
  text_input.TextCapitalization.characters = C[34] || CT.C34;
  text_input.TextCapitalization.none = C[35] || CT.C35;
  text_input.TextCapitalization.values = C[36] || CT.C36;
  var inputType$ = dart.privateName(text_input, "TextInputConfiguration.inputType");
  var readOnly$ = dart.privateName(text_input, "TextInputConfiguration.readOnly");
  var obscureText$ = dart.privateName(text_input, "TextInputConfiguration.obscureText");
  var autocorrect$ = dart.privateName(text_input, "TextInputConfiguration.autocorrect");
  var autofillConfiguration$ = dart.privateName(text_input, "TextInputConfiguration.autofillConfiguration");
  var smartDashesType$ = dart.privateName(text_input, "TextInputConfiguration.smartDashesType");
  var smartQuotesType$ = dart.privateName(text_input, "TextInputConfiguration.smartQuotesType");
  var enableSuggestions$ = dart.privateName(text_input, "TextInputConfiguration.enableSuggestions");
  var actionLabel$ = dart.privateName(text_input, "TextInputConfiguration.actionLabel");
  var inputAction$ = dart.privateName(text_input, "TextInputConfiguration.inputAction");
  var textCapitalization$ = dart.privateName(text_input, "TextInputConfiguration.textCapitalization");
  var keyboardAppearance$ = dart.privateName(text_input, "TextInputConfiguration.keyboardAppearance");
  var _name = dart.privateName(ui, "_name");
  text_input.TextInputConfiguration = class TextInputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
    get autocorrect() {
      return this[autocorrect$];
    }
    set autocorrect(value) {
      super.autocorrect = value;
    }
    get autofillConfiguration() {
      return this[autofillConfiguration$];
    }
    set autofillConfiguration(value) {
      super.autofillConfiguration = value;
    }
    get smartDashesType() {
      return this[smartDashesType$];
    }
    set smartDashesType(value) {
      super.smartDashesType = value;
    }
    get smartQuotesType() {
      return this[smartQuotesType$];
    }
    set smartQuotesType(value) {
      super.smartQuotesType = value;
    }
    get enableSuggestions() {
      return this[enableSuggestions$];
    }
    set enableSuggestions(value) {
      super.enableSuggestions = value;
    }
    get actionLabel() {
      return this[actionLabel$];
    }
    set actionLabel(value) {
      super.actionLabel = value;
    }
    get inputAction() {
      return this[inputAction$];
    }
    set inputAction(value) {
      super.inputAction = value;
    }
    get textCapitalization() {
      return this[textCapitalization$];
    }
    set textCapitalization(value) {
      super.textCapitalization = value;
    }
    get keyboardAppearance() {
      return this[keyboardAppearance$];
    }
    set keyboardAppearance(value) {
      super.keyboardAppearance = value;
    }
    toJson() {
      return (() => {
        let t0 = new (T.IdentityMapOfString$dynamic()).new();
        t0[$_set]("inputType", this.inputType.toJson());
        t0[$_set]("readOnly", this.readOnly);
        t0[$_set]("obscureText", this.obscureText);
        t0[$_set]("autocorrect", this.autocorrect);
        t0[$_set]("smartDashesType", dart.toString(this.smartDashesType.index));
        t0[$_set]("smartQuotesType", dart.toString(this.smartQuotesType.index));
        t0[$_set]("enableSuggestions", this.enableSuggestions);
        t0[$_set]("actionLabel", this.actionLabel);
        t0[$_set]("inputAction", dart.toString(this.inputAction));
        t0[$_set]("textCapitalization", dart.toString(this.textCapitalization));
        t0[$_set]("keyboardAppearance", dart.toString(this.keyboardAppearance));
        if (this.autofillConfiguration != null) t0[$_set]("autofill", dart.nullCheck(this.autofillConfiguration).toJson());
        return t0;
      })();
    }
  };
  (text_input.TextInputConfiguration.new = function(opts) {
    let t0, t0$;
    let inputType = opts && 'inputType' in opts ? opts.inputType : C[6] || CT.C6;
    if (inputType == null) dart.nullFailed(I[0], 454, 10, "inputType");
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    if (readOnly == null) dart.nullFailed(I[0], 455, 10, "readOnly");
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    if (obscureText == null) dart.nullFailed(I[0], 456, 10, "obscureText");
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    if (autocorrect == null) dart.nullFailed(I[0], 457, 10, "autocorrect");
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    if (enableSuggestions == null) dart.nullFailed(I[0], 460, 10, "enableSuggestions");
    let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
    let inputAction = opts && 'inputAction' in opts ? opts.inputAction : C[20] || CT.C20;
    if (inputAction == null) dart.nullFailed(I[0], 462, 10, "inputAction");
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : C[37] || CT.C37;
    if (keyboardAppearance == null) dart.nullFailed(I[0], 463, 10, "keyboardAppearance");
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[35] || CT.C35;
    if (textCapitalization == null) dart.nullFailed(I[0], 464, 10, "textCapitalization");
    let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : null;
    this[inputType$] = inputType;
    this[readOnly$] = readOnly;
    this[obscureText$] = obscureText;
    this[autocorrect$] = autocorrect;
    this[enableSuggestions$] = enableSuggestions;
    this[actionLabel$] = actionLabel;
    this[inputAction$] = inputAction;
    this[keyboardAppearance$] = keyboardAppearance;
    this[textCapitalization$] = textCapitalization;
    this[autofillConfiguration$] = autofillConfiguration;
    if (!(inputType != null)) dart.assertFailed(null, I[0], 466, 15, "inputType != null");
    if (!(obscureText != null)) dart.assertFailed(null, I[0], 467, 15, "obscureText != null");
    this[smartDashesType$] = (t0 = smartDashesType, t0 == null ? dart.test(obscureText) ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0);
    this[smartQuotesType$] = (t0$ = smartQuotesType, t0$ == null ? dart.test(obscureText) ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$);
    if (!(autocorrect != null)) dart.assertFailed(null, I[0], 470, 15, "autocorrect != null");
    if (!(enableSuggestions != null)) dart.assertFailed(null, I[0], 471, 15, "enableSuggestions != null");
    if (!(keyboardAppearance != null)) dart.assertFailed(null, I[0], 472, 15, "keyboardAppearance != null");
    if (!(inputAction != null)) dart.assertFailed(null, I[0], 473, 15, "inputAction != null");
    if (!(textCapitalization != null)) dart.assertFailed(null, I[0], 474, 15, "textCapitalization != null");
    ;
  }).prototype = text_input.TextInputConfiguration.prototype;
  dart.addTypeTests(text_input.TextInputConfiguration);
  dart.addTypeCaches(text_input.TextInputConfiguration);
  dart.setMethodSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getMethods(text_input.TextInputConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(text_input.TextInputConfiguration, I[1]);
  dart.setFieldSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getFields(text_input.TextInputConfiguration.__proto__),
    inputType: dart.finalFieldType(text_input.TextInputType),
    readOnly: dart.finalFieldType(core.bool),
    obscureText: dart.finalFieldType(core.bool),
    autocorrect: dart.finalFieldType(core.bool),
    autofillConfiguration: dart.finalFieldType(dart.nullable(autofill.AutofillConfiguration)),
    smartDashesType: dart.finalFieldType(text_input.SmartDashesType),
    smartQuotesType: dart.finalFieldType(text_input.SmartQuotesType),
    enableSuggestions: dart.finalFieldType(core.bool),
    actionLabel: dart.finalFieldType(dart.nullable(core.String)),
    inputAction: dart.finalFieldType(text_input.TextInputAction),
    textCapitalization: dart.finalFieldType(text_input.TextCapitalization),
    keyboardAppearance: dart.finalFieldType(ui.Brightness)
  }));
  text_input.FloatingCursorDragState = class FloatingCursorDragState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.FloatingCursorDragState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 621, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 621, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.FloatingCursorDragState.prototype;
  dart.addTypeTests(text_input.FloatingCursorDragState);
  dart.addTypeCaches(text_input.FloatingCursorDragState);
  dart.setLibraryUri(text_input.FloatingCursorDragState, I[1]);
  dart.setFieldSignature(text_input.FloatingCursorDragState, () => ({
    __proto__: dart.getFields(text_input.FloatingCursorDragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.FloatingCursorDragState, ['toString']);
  text_input.FloatingCursorDragState.Start = C[38] || CT.C38;
  text_input.FloatingCursorDragState.Update = C[39] || CT.C39;
  text_input.FloatingCursorDragState.End = C[40] || CT.C40;
  text_input.FloatingCursorDragState.values = C[41] || CT.C41;
  var offset$ = dart.privateName(text_input, "RawFloatingCursorPoint.offset");
  var state$ = dart.privateName(text_input, "RawFloatingCursorPoint.state");
  text_input.RawFloatingCursorPoint = class RawFloatingCursorPoint extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
  };
  (text_input.RawFloatingCursorPoint.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 642, 19, "state");
    this[offset$] = offset;
    this[state$] = state;
    if (!(state != null)) dart.assertFailed(null, I[0], 643, 15, "state != null");
    if (!(state != text_input.FloatingCursorDragState.Update || offset != null)) dart.assertFailed(null, I[0], 644, 15, "state != FloatingCursorDragState.Update || offset != null");
    ;
  }).prototype = text_input.RawFloatingCursorPoint.prototype;
  dart.addTypeTests(text_input.RawFloatingCursorPoint);
  dart.addTypeCaches(text_input.RawFloatingCursorPoint);
  dart.setLibraryUri(text_input.RawFloatingCursorPoint, I[1]);
  dart.setFieldSignature(text_input.RawFloatingCursorPoint, () => ({
    __proto__: dart.getFields(text_input.RawFloatingCursorPoint.__proto__),
    offset: dart.finalFieldType(dart.nullable(ui.Offset)),
    state: dart.finalFieldType(text_input.FloatingCursorDragState)
  }));
  var text$ = dart.privateName(text_input, "TextEditingValue.text");
  var selection$ = dart.privateName(text_input, "TextEditingValue.selection");
  var composing$ = dart.privateName(text_input, "TextEditingValue.composing");
  var TextRange_end = dart.privateName(ui, "TextRange.end");
  var TextRange_start = dart.privateName(ui, "TextRange.start");
  var TextSelection_isDirectional = dart.privateName(text_editing, "TextSelection.isDirectional");
  var TextSelection_affinity = dart.privateName(text_editing, "TextSelection.affinity");
  var TextSelection_extentOffset = dart.privateName(text_editing, "TextSelection.extentOffset");
  var TextSelection_baseOffset = dart.privateName(text_editing, "TextSelection.baseOffset");
  text_input.TextEditingValue = class TextEditingValue extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get selection() {
      return this[selection$];
    }
    set selection(value) {
      super.selection = value;
    }
    get composing() {
      return this[composing$];
    }
    set composing(value) {
      super.composing = value;
    }
    static fromJSON(encoded) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      if (encoded == null) dart.nullFailed(I[0], 671, 58, "encoded");
      return new text_input.TextEditingValue.new({text: core.String.as(encoded[$_get]("text")), selection: new text_editing.TextSelection.new({baseOffset: (t1 = T.intN().as(encoded[$_get]("selectionBase")), t1 == null ? -1 : t1), extentOffset: (t1$ = T.intN().as(encoded[$_get]("selectionExtent")), t1$ == null ? -1 : t1$), affinity: (t1$0 = text_input._toTextAffinity(T.StringN().as(encoded[$_get]("selectionAffinity"))), t1$0 == null ? ui.TextAffinity.downstream : t1$0), isDirectional: (t1$1 = T.boolN().as(encoded[$_get]("selectionIsDirectional")), t1$1 == null ? false : t1$1)}), composing: new ui.TextRange.new({start: (t1$2 = T.intN().as(encoded[$_get]("composingBase")), t1$2 == null ? -1 : t1$2), end: (t1$3 = T.intN().as(encoded[$_get]("composingExtent")), t1$3 == null ? -1 : t1$3)})});
    }
    toJSON() {
      return new (T.IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.selection.baseOffset, "selectionExtent", this.selection.extentOffset, "selectionAffinity", dart.toString(this.selection.affinity), "selectionIsDirectional", this.selection.isDirectional, "composingBase", this.composing.start, "composingExtent", this.composing.end]);
    }
    copyWith(opts) {
      let t1, t1$, t1$0;
      let text = opts && 'text' in opts ? opts.text : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_input.TextEditingValue.new({text: (t1 = text, t1 == null ? this.text : t1), selection: (t1$ = selection, t1$ == null ? this.selection : t1$), composing: (t1$0 = composing, t1$0 == null ? this.composing : t1$0)});
    }
    get isComposingRangeValid() {
      return dart.test(this.composing.isValid) && dart.test(this.composing.isNormalized) && dart.notNull(this.composing.end) <= this.text.length;
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "TextEditingValue")) + "(text: ┤" + dart.str(this.text) + "├, selection: " + dart.str(this.selection) + ", composing: " + dart.str(this.composing) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return text_input.TextEditingValue.is(other) && other.text == this.text && dart.equals(other.selection, this.selection) && dart.equals(other.composing, this.composing);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.text), dart.hashCode(this.selection), dart.hashCode(this.composing));
    }
  };
  (text_input.TextEditingValue.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : "";
    if (text == null) dart.nullFailed(I[0], 663, 10, "text");
    let selection = opts && 'selection' in opts ? opts.selection : C[42] || CT.C42;
    if (selection == null) dart.nullFailed(I[0], 664, 10, "selection");
    let composing = opts && 'composing' in opts ? opts.composing : C[44] || CT.C44;
    if (composing == null) dart.nullFailed(I[0], 665, 10, "composing");
    this[text$] = text;
    this[selection$] = selection;
    this[composing$] = composing;
    if (!(text != null)) dart.assertFailed(null, I[0], 666, 15, "text != null");
    if (!(selection != null)) dart.assertFailed(null, I[0], 667, 15, "selection != null");
    if (!(composing != null)) dart.assertFailed(null, I[0], 668, 15, "composing != null");
    ;
  }).prototype = text_input.TextEditingValue.prototype;
  dart.addTypeTests(text_input.TextEditingValue);
  dart.addTypeCaches(text_input.TextEditingValue);
  dart.setMethodSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getMethods(text_input.TextEditingValue.__proto__),
    toJSON: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(text_input.TextEditingValue, [], {composing: dart.nullable(ui.TextRange), selection: dart.nullable(text_editing.TextSelection), text: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getGetters(text_input.TextEditingValue.__proto__),
    isComposingRangeValid: core.bool
  }));
  dart.setLibraryUri(text_input.TextEditingValue, I[1]);
  dart.setFieldSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getFields(text_input.TextEditingValue.__proto__),
    text: dart.finalFieldType(core.String),
    selection: dart.finalFieldType(text_editing.TextSelection),
    composing: dart.finalFieldType(ui.TextRange)
  }));
  dart.defineExtensionMethods(text_input.TextEditingValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextEditingValue, ['hashCode']);
  dart.defineLazy(text_input.TextEditingValue, {
    /*text_input.TextEditingValue.empty*/get empty() {
      return C[45] || CT.C45;
    }
  }, false);
  text_input.TextSelectionDelegate = class TextSelectionDelegate extends core.Object {
    get cutEnabled() {
      return true;
    }
    get copyEnabled() {
      return true;
    }
    get pasteEnabled() {
      return true;
    }
    get selectAllEnabled() {
      return true;
    }
  };
  (text_input.TextSelectionDelegate.new = function() {
    ;
  }).prototype = text_input.TextSelectionDelegate.prototype;
  dart.addTypeTests(text_input.TextSelectionDelegate);
  dart.addTypeCaches(text_input.TextSelectionDelegate);
  dart.setGetterSignature(text_input.TextSelectionDelegate, () => ({
    __proto__: dart.getGetters(text_input.TextSelectionDelegate.__proto__),
    cutEnabled: core.bool,
    copyEnabled: core.bool,
    pasteEnabled: core.bool,
    selectAllEnabled: core.bool
  }));
  dart.setLibraryUri(text_input.TextSelectionDelegate, I[1]);
  text_input.TextInputClient = class TextInputClient extends core.Object {};
  (text_input.TextInputClient.new = function() {
    ;
  }).prototype = text_input.TextInputClient.prototype;
  dart.addTypeTests(text_input.TextInputClient);
  dart.addTypeCaches(text_input.TextInputClient);
  dart.setLibraryUri(text_input.TextInputClient, I[1]);
  var _cachedSize = dart.privateName(text_input, "_cachedSize");
  var _cachedTransform = dart.privateName(text_input, "_cachedTransform");
  var _cachedRect = dart.privateName(text_input, "_cachedRect");
  var _client$ = dart.privateName(text_input, "_client");
  var _id = dart.privateName(text_input, "_id");
  var _currentConnection = dart.privateName(text_input, "_currentConnection");
  var _show = dart.privateName(text_input, "_show");
  var _requestAutofill = dart.privateName(text_input, "_requestAutofill");
  var _updateConfig = dart.privateName(text_input, "_updateConfig");
  var _setEditingState = dart.privateName(text_input, "_setEditingState");
  var _setEditableSizeAndTransform = dart.privateName(text_input, "_setEditableSizeAndTransform");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _setComposingTextRect = dart.privateName(text_input, "_setComposingTextRect");
  var _setStyle = dart.privateName(text_input, "_setStyle");
  var _clearClient = dart.privateName(text_input, "_clearClient");
  text_input.TextInputConnection = class TextInputConnection extends core.Object {
    static debugResetId(opts) {
      let to = opts && 'to' in opts ? opts.to : 1;
      if (to == null) dart.nullFailed(I[0], 886, 33, "to");
      if (!(to != null)) dart.assertFailed(null, I[0], 887, 12, "to != null");
      if (!dart.test(dart.fn(() => {
        text_input.TextInputConnection._nextId = to;
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 888, 12, "() {\r\n      _nextId = to;\r\n      return true;\r\n    }()");
    }
    get attached() {
      return dart.equals(text_input.TextInput._instance[_currentConnection], this);
    }
    show() {
      if (!dart.test(this.attached)) dart.assertFailed(null, I[0], 901, 12, "attached");
      text_input.TextInput._instance[_show]();
    }
    requestAutofill() {
      if (!dart.test(this.attached)) dart.assertFailed(null, I[0], 914, 12, "attached");
      text_input.TextInput._instance[_requestAutofill]();
    }
    updateConfig(configuration) {
      if (configuration == null) dart.nullFailed(I[0], 920, 44, "configuration");
      if (!dart.test(this.attached)) dart.assertFailed(null, I[0], 921, 12, "attached");
      text_input.TextInput._instance[_updateConfig](configuration);
    }
    setEditingState(value) {
      if (value == null) dart.nullFailed(I[0], 927, 41, "value");
      if (!dart.test(this.attached)) dart.assertFailed(null, I[0], 928, 12, "attached");
      text_input.TextInput._instance[_setEditingState](value);
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
      if (editableBoxSize == null) dart.nullFailed(I[0], 941, 41, "editableBoxSize");
      if (transform == null) dart.nullFailed(I[0], 941, 66, "transform");
      if (!dart.equals(editableBoxSize, this[_cachedSize]) || !dart.equals(transform, this[_cachedTransform])) {
        this[_cachedSize] = editableBoxSize;
        this[_cachedTransform] = transform;
        text_input.TextInput._instance[_setEditableSizeAndTransform](new (T.IdentityMapOfString$dynamic()).from(["width", editableBoxSize.width, "height", editableBoxSize.height, "transform", transform.storage]));
      }
    }
    setComposingRect(rect) {
      if (rect == null) dart.nullFailed(I[0], 962, 30, "rect");
      if (!(rect != null)) dart.assertFailed(null, I[0], 963, 12, "rect != null");
      if (dart.equals(rect, this[_cachedRect])) return;
      this[_cachedRect] = rect;
      let validRect = dart.test(rect.isFinite) ? rect : ui.Offset.zero['&'](C[46] || CT.C46);
      text_input.TextInput._instance[_setComposingTextRect](new (T.IdentityMapOfString$dynamic()).from(["width", validRect.width, "height", validRect.height, "x", validRect.left, "y", validRect.top]));
    }
    setStyle(opts) {
      let t1;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 987, 28, "textDirection");
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      if (textAlign == null) dart.nullFailed(I[0], 988, 24, "textAlign");
      if (!dart.test(this.attached)) dart.assertFailed(null, I[0], 990, 12, "attached");
      text_input.TextInput._instance[_setStyle](new (T.IdentityMapOfString$dynamic()).from(["fontFamily", fontFamily, "fontSize", fontSize, "fontWeightIndex", (t1 = fontWeight, t1 == null ? null : t1.index), "textAlignIndex", textAlign.index, "textDirectionIndex", textDirection.index]));
    }
    close() {
      if (dart.test(this.attached)) {
        text_input.TextInput._instance[_clearClient]();
      }
      if (!!dart.test(this.attached)) dart.assertFailed(null, I[0], 1011, 12, "!attached");
    }
    connectionClosedReceived() {
      text_input.TextInput._instance[_currentConnection] = null;
      if (!!dart.test(this.attached)) dart.assertFailed(null, I[0], 1019, 12, "!attached");
    }
  };
  (text_input.TextInputConnection.__ = function(_client) {
    let t1;
    if (_client == null) dart.nullFailed(I[0], 870, 30, "_client");
    this[_cachedSize] = null;
    this[_cachedTransform] = null;
    this[_cachedRect] = null;
    this[_client$] = _client;
    if (!(_client != null)) dart.assertFailed(null, I[0], 871, 16, "_client != null");
    this[_id] = (t1 = text_input.TextInputConnection._nextId, text_input.TextInputConnection._nextId = dart.notNull(t1) + 1, t1);
    ;
  }).prototype = text_input.TextInputConnection.prototype;
  dart.addTypeTests(text_input.TextInputConnection);
  dart.addTypeCaches(text_input.TextInputConnection);
  dart.setMethodSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getMethods(text_input.TextInputConnection.__proto__),
    show: dart.fnType(dart.void, []),
    requestAutofill: dart.fnType(dart.void, []),
    updateConfig: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    setEditingState: dart.fnType(dart.void, [text_input.TextEditingValue]),
    setEditableSizeAndTransform: dart.fnType(dart.void, [ui.Size, vector_math_64.Matrix4]),
    setComposingRect: dart.fnType(dart.void, [ui.Rect]),
    setStyle: dart.fnType(dart.void, [], {}, {fontFamily: dart.nullable(core.String), fontSize: dart.nullable(core.double), fontWeight: dart.nullable(ui.FontWeight), textAlign: ui.TextAlign, textDirection: ui.TextDirection}),
    close: dart.fnType(dart.void, []),
    connectionClosedReceived: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getGetters(text_input.TextInputConnection.__proto__),
    attached: core.bool
  }));
  dart.setLibraryUri(text_input.TextInputConnection, I[1]);
  dart.setFieldSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getFields(text_input.TextInputConnection.__proto__),
    [_cachedSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_cachedTransform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4)),
    [_cachedRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_id]: dart.finalFieldType(core.int),
    [_client$]: dart.finalFieldType(text_input.TextInputClient)
  }));
  dart.defineLazy(text_input.TextInputConnection, {
    /*text_input.TextInputConnection._nextId*/get _nextId() {
      return 1;
    },
    set _nextId(_) {}
  }, false);
  var __TextInput__channel = dart.privateName(text_input, "_#TextInput#_channel");
  var __TextInput__channel_isSet = dart.privateName(text_input, "_#TextInput#_channel#isSet");
  var __TextInput__currentConfiguration = dart.privateName(text_input, "_#TextInput#_currentConfiguration");
  var __TextInput__currentConfiguration_isSet = dart.privateName(text_input, "_#TextInput#_currentConfiguration#isSet");
  var _hidePending = dart.privateName(text_input, "_hidePending");
  var _channel = dart.privateName(text_input, "_channel");
  var _handleTextInputInvocation = dart.privateName(text_input, "_handleTextInputInvocation");
  var _attach = dart.privateName(text_input, "_attach");
  var _currentConfiguration = dart.privateName(text_input, "_currentConfiguration");
  var _scheduleHide = dart.privateName(text_input, "_scheduleHide");
  text_input.TextInput = class TextInput extends core.Object {
    static setChannel(newChannel) {
      if (newChannel == null) dart.nullFailed(I[0], 1143, 40, "newChannel");
      if (!dart.test(dart.fn(() => {
        let t1;
        text_input.TextInput._instance[_channel] = (t1 = newChannel, (() => {
          t1.setMethodCallHandler(dart.bind(text_input.TextInput._instance, _handleTextInputInvocation));
          return t1;
        })());
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 1144, 12, "() {\r\n      _instance._channel = newChannel..setMethodCallHandler(_instance._handleTextInputInvocation);\r\n      return true;\r\n    }()");
    }
    static attach(client, configuration) {
      if (client == null) dart.nullFailed(I[0], 1188, 53, "client");
      if (configuration == null) dart.nullFailed(I[0], 1188, 84, "configuration");
      if (!(client != null)) dart.assertFailed(null, I[0], 1189, 12, "client != null");
      if (!(configuration != null)) dart.assertFailed(null, I[0], 1190, 12, "configuration != null");
      let connection = new text_input.TextInputConnection.__(client);
      text_input.TextInput._instance[_attach](connection, configuration);
      return connection;
    }
    [_attach](connection, configuration) {
      if (connection == null) dart.nullFailed(I[0], 1199, 36, "connection");
      if (configuration == null) dart.nullFailed(I[0], 1199, 71, "configuration");
      if (!(connection != null)) dart.assertFailed(null, I[0], 1200, 12, "connection != null");
      if (!(connection[_client$] != null)) dart.assertFailed(null, I[0], 1201, 12, "connection._client != null");
      if (!(configuration != null)) dart.assertFailed(null, I[0], 1202, 12, "configuration != null");
      if (!dart.test(text_input.TextInput._debugEnsureInputActionWorksOnPlatform(configuration.inputAction))) dart.assertFailed(null, I[0], 1203, 12, "_debugEnsureInputActionWorksOnPlatform(configuration.inputAction)");
      this[_channel].invokeMethod(dart.void, "TextInput.setClient", [connection[_id], configuration.toJson()]);
      this[_currentConnection] = connection;
      this[_currentConfiguration] = configuration;
    }
    static _debugEnsureInputActionWorksOnPlatform(inputAction) {
      if (inputAction == null) dart.nullFailed(I[0], 1212, 70, "inputAction");
      if (!dart.test(dart.fn(() => {
        if (true) {
          return true;
        }
        if (dart.test(io.Platform.isIOS)) {
          if (!dart.test(text_input.TextInput._iOSSupportedInputActions[$contains](inputAction))) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on iOS.", I[0], 1220, 11, "_iOSSupportedInputActions.contains(inputAction)");
        } else if (dart.test(io.Platform.isAndroid)) {
          if (!dart.test(text_input.TextInput._androidSupportedInputActions[$contains](inputAction))) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on Android.", I[0], 1225, 11, "_androidSupportedInputActions.contains(inputAction)");
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 1213, 12, "() {\r\n      if (kIsWeb) {\r\n        // TODO(flutterweb): what makes sense here?\r\n        return true;\r\n      }\r\n      if (Platform.isIOS) {\r\n        assert(\r\n          _iOSSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on iOS.',\r\n        );\r\n      } else if (Platform.isAndroid) {\r\n        assert(\r\n          _androidSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on Android.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    get [_channel]() {
      let t1;
      return dart.test(this[__TextInput__channel_isSet]) ? (t1 = this[__TextInput__channel], t1) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [_channel](t1) {
      if (t1 == null) dart.nullFailed(I[0], 1234, 22, "null");
      this[__TextInput__channel_isSet] = true;
      this[__TextInput__channel] = t1;
    }
    get [_currentConfiguration]() {
      let t2;
      return dart.test(this[__TextInput__currentConfiguration_isSet]) ? (t2 = this[__TextInput__currentConfiguration], t2) : dart.throw(new _internal.LateError.fieldNI("_currentConfiguration"));
    }
    set [_currentConfiguration](t2) {
      if (t2 == null) dart.nullFailed(I[0], 1237, 31, "null");
      this[__TextInput__currentConfiguration_isSet] = true;
      this[__TextInput__currentConfiguration] = t2;
    }
    [_handleTextInputInvocation](methodCall) {
      if (methodCall == null) dart.nullFailed(I[0], 1239, 57, "methodCall");
      return async.async(dart.dynamic, (function* _handleTextInputInvocation() {
        let t4, t3;
        if (this[_currentConnection] == null) return;
        let method = methodCall.method;
        if (method === "TextInputClient.requestExistingInputState") {
          if (!(dart.nullCheck(this[_currentConnection])[_client$] != null)) dart.assertFailed(null, I[0], 1247, 14, "_currentConnection!._client != null");
          this[_attach](dart.nullCheck(this[_currentConnection]), this[_currentConfiguration]);
          let editingValue = dart.nullCheck(this[_currentConnection])[_client$].currentTextEditingValue;
          if (editingValue != null) {
            this[_setEditingState](editingValue);
          }
          return;
        }
        let args = core.List.as(methodCall.arguments);
        if (method === "TextInputClient.updateEditingStateWithTag") {
          let client = dart.nullCheck(this[_currentConnection])[_client$];
          if (!(client != null)) dart.assertFailed(null, I[0], 1260, 14, "client != null");
          let scope = client.currentAutofillScope;
          let editingValue = T.MapOfString$dynamic().as(args[$_get](1));
          for (let tag of editingValue[$keys]) {
            let textEditingValue = text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(editingValue[$_get](tag)));
            t3 = scope;
            t3 == null ? null : (t4 = t3.getAutofillClient(tag), t4 == null ? null : t4.updateEditingValue(textEditingValue));
          }
          return;
        }
        let client = core.int.as(args[$_get](0));
        if (client != dart.nullCheck(this[_currentConnection])[_id]) return;
        switch (method) {
          case "TextInputClient.updateEditingState":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateEditingValue(text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performAction":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performAction(text_input._toTextInputAction(core.String.as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performPrivateCommand":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performPrivateCommand(core.String.as(dart.dsend(args[$_get](1), '_get', ["action"])), T.MapOfString$dynamic().as(dart.dsend(args[$_get](1), '_get', ["data"])));
            break;
          }
          case "TextInputClient.updateFloatingCursor":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateFloatingCursor(text_input._toTextPoint(text_input._toTextCursorAction(core.String.as(args[$_get](1))), T.MapOfString$dynamic().as(args[$_get](2))));
            break;
          }
          case "TextInputClient.onConnectionClosed":
          {
            dart.nullCheck(this[_currentConnection])[_client$].connectionClosed();
            break;
          }
          case "TextInputClient.showAutocorrectionPromptRect":
          {
            dart.nullCheck(this[_currentConnection])[_client$].showAutocorrectionPromptRect(core.int.as(args[$_get](1)), core.int.as(args[$_get](2)));
            break;
          }
          default:
          {
            dart.throw(new message_codec.MissingPluginException.new());
          }
        }
      }).bind(this));
    }
    [_scheduleHide]() {
      if (dart.test(this[_hidePending])) return;
      this[_hidePending] = true;
      async.scheduleMicrotask(dart.fn(() => {
        this[_hidePending] = false;
        if (this[_currentConnection] == null) this[_channel].invokeMethod(dart.void, "TextInput.hide");
      }, T.VoidTovoid()));
    }
    [_clearClient]() {
      this[_channel].invokeMethod(dart.void, "TextInput.clearClient");
      this[_currentConnection] = null;
      this[_scheduleHide]();
    }
    [_updateConfig](configuration) {
      if (configuration == null) dart.nullFailed(I[0], 1328, 45, "configuration");
      if (!(configuration != null)) dart.assertFailed(null, I[0], 1329, 12, "configuration != null");
      this[_channel].invokeMethod(dart.void, "TextInput.updateConfig", configuration.toJson());
    }
    [_setEditingState](value) {
      if (value == null) dart.nullFailed(I[0], 1336, 42, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1337, 12, "value != null");
      this[_channel].invokeMethod(dart.void, "TextInput.setEditingState", value.toJSON());
    }
    [_show]() {
      this[_channel].invokeMethod(dart.void, "TextInput.show");
    }
    [_requestAutofill]() {
      this[_channel].invokeMethod(dart.void, "TextInput.requestAutofill");
    }
    [_setEditableSizeAndTransform](args) {
      if (args == null) dart.nullFailed(I[0], 1352, 58, "args");
      this[_channel].invokeMethod(dart.void, "TextInput.setEditableSizeAndTransform", args);
    }
    [_setComposingTextRect](args) {
      if (args == null) dart.nullFailed(I[0], 1359, 51, "args");
      this[_channel].invokeMethod(dart.void, "TextInput.setMarkedTextRect", args);
    }
    [_setStyle](args) {
      if (args == null) dart.nullFailed(I[0], 1366, 39, "args");
      this[_channel].invokeMethod(dart.void, "TextInput.setStyle", args);
    }
    static finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
      if (shouldSave == null) dart.nullFailed(I[0], 1421, 44, "shouldSave");
      if (!(shouldSave != null)) dart.assertFailed(null, I[0], 1422, 12, "shouldSave != null");
      text_input.TextInput._instance[_channel].invokeMethod(dart.void, "TextInput.finishAutofillContext", shouldSave);
    }
  };
  (text_input.TextInput.__ = function() {
    this[__TextInput__channel] = null;
    this[__TextInput__channel_isSet] = false;
    this[_currentConnection] = null;
    this[__TextInput__currentConfiguration] = null;
    this[__TextInput__currentConfiguration_isSet] = false;
    this[_hidePending] = false;
    this[_channel] = system_channels.SystemChannels.textInput;
    this[_channel].setMethodCallHandler(dart.bind(this, _handleTextInputInvocation));
  }).prototype = text_input.TextInput.prototype;
  dart.addTypeTests(text_input.TextInput);
  dart.addTypeCaches(text_input.TextInput);
  dart.setMethodSignature(text_input.TextInput, () => ({
    __proto__: dart.getMethods(text_input.TextInput.__proto__),
    [_attach]: dart.fnType(dart.void, [text_input.TextInputConnection, text_input.TextInputConfiguration]),
    [_handleTextInputInvocation]: dart.fnType(async.Future, [message_codec.MethodCall]),
    [_scheduleHide]: dart.fnType(dart.void, []),
    [_clearClient]: dart.fnType(dart.void, []),
    [_updateConfig]: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    [_setEditingState]: dart.fnType(dart.void, [text_input.TextEditingValue]),
    [_show]: dart.fnType(dart.void, []),
    [_requestAutofill]: dart.fnType(dart.void, []),
    [_setEditableSizeAndTransform]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setComposingTextRect]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setStyle]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setGetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getGetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setSetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getSetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setLibraryUri(text_input.TextInput, I[1]);
  dart.setFieldSignature(text_input.TextInput, () => ({
    __proto__: dart.getFields(text_input.TextInput.__proto__),
    [__TextInput__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [__TextInput__channel_isSet]: dart.fieldType(core.bool),
    [_currentConnection]: dart.fieldType(dart.nullable(text_input.TextInputConnection)),
    [__TextInput__currentConfiguration]: dart.fieldType(dart.nullable(text_input.TextInputConfiguration)),
    [__TextInput__currentConfiguration_isSet]: dart.fieldType(core.bool),
    [_hidePending]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text_input.TextInput, {
    /*text_input.TextInput._instance*/get _instance() {
      return new text_input.TextInput.__();
    },
    /*text_input.TextInput._androidSupportedInputActions*/get _androidSupportedInputActions() {
      return C[47] || CT.C47;
    },
    /*text_input.TextInput._iOSSupportedInputActions*/get _iOSSupportedInputActions() {
      return C[48] || CT.C48;
    }
  }, false);
  text_input._toTextAffinity = function _toTextAffinity(affinity) {
    switch (affinity) {
      case "TextAffinity.downstream":
      {
        return ui.TextAffinity.downstream;
      }
      case "TextAffinity.upstream":
      {
        return ui.TextAffinity.upstream;
      }
    }
    return null;
  };
  text_input._toTextInputAction = function _toTextInputAction(action) {
    if (action == null) dart.nullFailed(I[0], 1023, 43, "action");
    switch (action) {
      case "TextInputAction.none":
      {
        return text_input.TextInputAction.none;
      }
      case "TextInputAction.unspecified":
      {
        return text_input.TextInputAction.unspecified;
      }
      case "TextInputAction.go":
      {
        return text_input.TextInputAction.go;
      }
      case "TextInputAction.search":
      {
        return text_input.TextInputAction.search;
      }
      case "TextInputAction.send":
      {
        return text_input.TextInputAction.send;
      }
      case "TextInputAction.next":
      {
        return text_input.TextInputAction.next;
      }
      case "TextInputAction.previous":
      {
        return text_input.TextInputAction.previous;
      }
      case "TextInputAction.continue_action":
      {
        return text_input.TextInputAction.continueAction;
      }
      case "TextInputAction.join":
      {
        return text_input.TextInputAction.join;
      }
      case "TextInputAction.route":
      {
        return text_input.TextInputAction.route;
      }
      case "TextInputAction.emergencyCall":
      {
        return text_input.TextInputAction.emergencyCall;
      }
      case "TextInputAction.done":
      {
        return text_input.TextInputAction.done;
      }
      case "TextInputAction.newline":
      {
        return text_input.TextInputAction.newline;
      }
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text input action: " + dart.str(action))])));
  };
  text_input._toTextCursorAction = function _toTextCursorAction(state) {
    if (state == null) dart.nullFailed(I[0], 1055, 52, "state");
    switch (state) {
      case "FloatingCursorDragState.start":
      {
        return text_input.FloatingCursorDragState.Start;
      }
      case "FloatingCursorDragState.update":
      {
        return text_input.FloatingCursorDragState.Update;
      }
      case "FloatingCursorDragState.end":
      {
        return text_input.FloatingCursorDragState.End;
      }
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text cursor action: " + dart.str(state))])));
  };
  text_input._toTextPoint = function _toTextPoint(state, encoded) {
    if (state == null) dart.nullFailed(I[0], 1067, 61, "state");
    if (encoded == null) dart.nullFailed(I[0], 1067, 89, "encoded");
    if (!(state != null)) dart.assertFailed("You must provide a state to set a new editing point.", I[0], 1068, 10, "state != null");
    if (!(encoded[$_get]("X") != null)) dart.assertFailed("You must provide a value for the horizontal location of the floating cursor.", I[0], 1069, 10, "encoded['X'] != null");
    if (!(encoded[$_get]("Y") != null)) dart.assertFailed("You must provide a value for the vertical location of the floating cursor.", I[0], 1070, 10, "encoded['Y'] != null");
    let offset = state == text_input.FloatingCursorDragState.Update ? new ui.Offset.new(core.double.as(encoded[$_get]("X")), core.double.as(encoded[$_get]("Y"))) : ui.Offset.zero;
    return new text_input.RawFloatingCursorPoint.new({offset: offset, state: state});
  };
  autofill.AutofillHints = class AutofillHints extends core.Object {};
  (autofill.AutofillHints.__ = function() {
    ;
  }).prototype = autofill.AutofillHints.prototype;
  dart.addTypeTests(autofill.AutofillHints);
  dart.addTypeCaches(autofill.AutofillHints);
  dart.setLibraryUri(autofill.AutofillHints, I[2]);
  dart.defineLazy(autofill.AutofillHints, {
    /*autofill.AutofillHints.addressCity*/get addressCity() {
      return "addressCity";
    },
    /*autofill.AutofillHints.addressCityAndState*/get addressCityAndState() {
      return "addressCityAndState";
    },
    /*autofill.AutofillHints.addressState*/get addressState() {
      return "addressState";
    },
    /*autofill.AutofillHints.birthday*/get birthday() {
      return "birthday";
    },
    /*autofill.AutofillHints.birthdayDay*/get birthdayDay() {
      return "birthdayDay";
    },
    /*autofill.AutofillHints.birthdayMonth*/get birthdayMonth() {
      return "birthdayMonth";
    },
    /*autofill.AutofillHints.birthdayYear*/get birthdayYear() {
      return "birthdayYear";
    },
    /*autofill.AutofillHints.countryCode*/get countryCode() {
      return "countryCode";
    },
    /*autofill.AutofillHints.countryName*/get countryName() {
      return "countryName";
    },
    /*autofill.AutofillHints.creditCardExpirationDate*/get creditCardExpirationDate() {
      return "creditCardExpirationDate";
    },
    /*autofill.AutofillHints.creditCardExpirationDay*/get creditCardExpirationDay() {
      return "creditCardExpirationDay";
    },
    /*autofill.AutofillHints.creditCardExpirationMonth*/get creditCardExpirationMonth() {
      return "creditCardExpirationMonth";
    },
    /*autofill.AutofillHints.creditCardExpirationYear*/get creditCardExpirationYear() {
      return "creditCardExpirationYear";
    },
    /*autofill.AutofillHints.creditCardFamilyName*/get creditCardFamilyName() {
      return "creditCardFamilyName";
    },
    /*autofill.AutofillHints.creditCardGivenName*/get creditCardGivenName() {
      return "creditCardGivenName";
    },
    /*autofill.AutofillHints.creditCardMiddleName*/get creditCardMiddleName() {
      return "creditCardMiddleName";
    },
    /*autofill.AutofillHints.creditCardName*/get creditCardName() {
      return "creditCardName";
    },
    /*autofill.AutofillHints.creditCardNumber*/get creditCardNumber() {
      return "creditCardNumber";
    },
    /*autofill.AutofillHints.creditCardSecurityCode*/get creditCardSecurityCode() {
      return "creditCardSecurityCode";
    },
    /*autofill.AutofillHints.creditCardType*/get creditCardType() {
      return "creditCardType";
    },
    /*autofill.AutofillHints.email*/get email() {
      return "email";
    },
    /*autofill.AutofillHints.familyName*/get familyName() {
      return "familyName";
    },
    /*autofill.AutofillHints.fullStreetAddress*/get fullStreetAddress() {
      return "fullStreetAddress";
    },
    /*autofill.AutofillHints.gender*/get gender() {
      return "gender";
    },
    /*autofill.AutofillHints.givenName*/get givenName() {
      return "givenName";
    },
    /*autofill.AutofillHints.impp*/get impp() {
      return "impp";
    },
    /*autofill.AutofillHints.jobTitle*/get jobTitle() {
      return "jobTitle";
    },
    /*autofill.AutofillHints.language*/get language() {
      return "language";
    },
    /*autofill.AutofillHints.location*/get location() {
      return "location";
    },
    /*autofill.AutofillHints.middleInitial*/get middleInitial() {
      return "middleInitial";
    },
    /*autofill.AutofillHints.middleName*/get middleName() {
      return "middleName";
    },
    /*autofill.AutofillHints.name_*/get name_() {
      return "name";
    },
    /*autofill.AutofillHints.namePrefix*/get namePrefix() {
      return "namePrefix";
    },
    /*autofill.AutofillHints.nameSuffix*/get nameSuffix() {
      return "nameSuffix";
    },
    /*autofill.AutofillHints.newPassword*/get newPassword() {
      return "newPassword";
    },
    /*autofill.AutofillHints.newUsername*/get newUsername() {
      return "newUsername";
    },
    /*autofill.AutofillHints.nickname*/get nickname() {
      return "nickname";
    },
    /*autofill.AutofillHints.oneTimeCode*/get oneTimeCode() {
      return "oneTimeCode";
    },
    /*autofill.AutofillHints.organizationName*/get organizationName() {
      return "organizationName";
    },
    /*autofill.AutofillHints.password*/get password() {
      return "password";
    },
    /*autofill.AutofillHints.photo*/get photo() {
      return "photo";
    },
    /*autofill.AutofillHints.postalAddress*/get postalAddress() {
      return "postalAddress";
    },
    /*autofill.AutofillHints.postalAddressExtended*/get postalAddressExtended() {
      return "postalAddressExtended";
    },
    /*autofill.AutofillHints.postalAddressExtendedPostalCode*/get postalAddressExtendedPostalCode() {
      return "postalAddressExtendedPostalCode";
    },
    /*autofill.AutofillHints.postalCode*/get postalCode() {
      return "postalCode";
    },
    /*autofill.AutofillHints.streetAddressLevel1*/get streetAddressLevel1() {
      return "streetAddressLevel1";
    },
    /*autofill.AutofillHints.streetAddressLevel2*/get streetAddressLevel2() {
      return "streetAddressLevel2";
    },
    /*autofill.AutofillHints.streetAddressLevel3*/get streetAddressLevel3() {
      return "streetAddressLevel3";
    },
    /*autofill.AutofillHints.streetAddressLevel4*/get streetAddressLevel4() {
      return "streetAddressLevel4";
    },
    /*autofill.AutofillHints.streetAddressLine1*/get streetAddressLine1() {
      return "streetAddressLine1";
    },
    /*autofill.AutofillHints.streetAddressLine2*/get streetAddressLine2() {
      return "streetAddressLine2";
    },
    /*autofill.AutofillHints.streetAddressLine3*/get streetAddressLine3() {
      return "streetAddressLine3";
    },
    /*autofill.AutofillHints.sublocality*/get sublocality() {
      return "sublocality";
    },
    /*autofill.AutofillHints.telephoneNumber*/get telephoneNumber() {
      return "telephoneNumber";
    },
    /*autofill.AutofillHints.telephoneNumberAreaCode*/get telephoneNumberAreaCode() {
      return "telephoneNumberAreaCode";
    },
    /*autofill.AutofillHints.telephoneNumberCountryCode*/get telephoneNumberCountryCode() {
      return "telephoneNumberCountryCode";
    },
    /*autofill.AutofillHints.telephoneNumberDevice*/get telephoneNumberDevice() {
      return "telephoneNumberDevice";
    },
    /*autofill.AutofillHints.telephoneNumberExtension*/get telephoneNumberExtension() {
      return "telephoneNumberExtension";
    },
    /*autofill.AutofillHints.telephoneNumberLocal*/get telephoneNumberLocal() {
      return "telephoneNumberLocal";
    },
    /*autofill.AutofillHints.telephoneNumberLocalPrefix*/get telephoneNumberLocalPrefix() {
      return "telephoneNumberLocalPrefix";
    },
    /*autofill.AutofillHints.telephoneNumberLocalSuffix*/get telephoneNumberLocalSuffix() {
      return "telephoneNumberLocalSuffix";
    },
    /*autofill.AutofillHints.telephoneNumberNational*/get telephoneNumberNational() {
      return "telephoneNumberNational";
    },
    /*autofill.AutofillHints.transactionAmount*/get transactionAmount() {
      return "transactionAmount";
    },
    /*autofill.AutofillHints.transactionCurrency*/get transactionCurrency() {
      return "transactionCurrency";
    },
    /*autofill.AutofillHints.url*/get url() {
      return "url";
    },
    /*autofill.AutofillHints.username*/get username() {
      return "username";
    }
  }, false);
  var uniqueIdentifier$ = dart.privateName(autofill, "AutofillConfiguration.uniqueIdentifier");
  var autofillHints$ = dart.privateName(autofill, "AutofillConfiguration.autofillHints");
  var currentEditingValue$ = dart.privateName(autofill, "AutofillConfiguration.currentEditingValue");
  autofill.AutofillConfiguration = class AutofillConfiguration extends core.Object {
    get uniqueIdentifier() {
      return this[uniqueIdentifier$];
    }
    set uniqueIdentifier(value) {
      super.uniqueIdentifier = value;
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "obscureText",
        [_Location_column]: 11,
        [_Location_line]: 1212,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autocorrect",
        [_Location_column]: 11,
        [_Location_line]: 1213,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "smartDashesType",
        [_Location_column]: 11,
        [_Location_line]: 1214,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "smartQuotesType",
        [_Location_column]: 11,
        [_Location_line]: 1215,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableSuggestions",
        [_Location_column]: 11,
        [_Location_line]: 1216,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLines",
        [_Location_column]: 11,
        [_Location_line]: 1217,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minLines",
        [_Location_column]: 11,
        [_Location_line]: 1218,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "expands",
        [_Location_column]: 11,
        [_Location_line]: 1219,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 11,
        [_Location_line]: 1220,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionControls",
        [_Location_column]: 11,
        [_Location_line]: 1221,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 11,
        [_Location_line]: 1222,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 11,
        [_Location_line]: 1223,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEditingComplete",
        [_Location_column]: 11,
        [_Location_line]: 1224,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSubmitted",
        [_Location_column]: 11,
        [_Location_line]: 1225,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onAppPrivateCommand",
        [_Location_column]: 11,
        [_Location_line]: 1226,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionHandleTapped",
        [_Location_column]: 11,
        [_Location_line]: 1227,
        [_Location_file]: null
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inputFormatters",
        [_Location_column]: 11,
        [_Location_line]: 1228,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rendererIgnoresPointer",
        [_Location_column]: 11,
        [_Location_line]: 1229,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 11,
        [_Location_line]: 1230,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorWidth",
        [_Location_column]: 11,
        [_Location_line]: 1231,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorHeight",
        [_Location_column]: 11,
        [_Location_line]: 1232,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorRadius",
        [_Location_column]: 11,
        [_Location_line]: 1233,
        [_Location_file]: null
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorColor",
        [_Location_column]: 11,
        [_Location_line]: 1234,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionHeightStyle",
        [_Location_column]: 11,
        [_Location_line]: 1235,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionWidthStyle",
        [_Location_column]: 11,
        [_Location_line]: 1236,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorOpacityAnimates",
        [_Location_column]: 11,
        [_Location_line]: 1237,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorOffset",
        [_Location_column]: 11,
        [_Location_line]: 1238,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "paintCursorAboveText",
        [_Location_column]: 11,
        [_Location_line]: 1239,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundCursorColor",
        [_Location_column]: 11,
        [_Location_line]: 1240,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollPadding",
        [_Location_column]: 11,
        [_Location_line]: 1241,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardAppearance",
        [_Location_column]: 11,
        [_Location_line]: 1242,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableInteractiveSelection",
        [_Location_column]: 11,
        [_Location_line]: 1243,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 11,
        [_Location_line]: 1244,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollController",
        [_Location_column]: 11,
        [_Location_line]: 1245,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollPhysics",
        [_Location_column]: 11,
        [_Location_line]: 1246,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofillHints",
        [_Location_column]: 11,
        [_Location_line]: 1247,
        [_Location_file]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autocorrectionTextRectColor",
        [_Location_column]: 11,
        [_Location_line]: 1248,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationId",
        [_Location_column]: 11,
        [_Location_line]: 1249,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.constList([C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64, C[65] || CT.C65, C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83], T._LocationL());
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[29] || CT.C29,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1195,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bucket",
        [_Location_column]: 9,
        [_Location_line]: 1194,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1195,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.constList([C[86] || CT.C86, C[87] || CT.C87], T._LocationL());
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[85] || CT.C85,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1193,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1193,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.constList([C[90] || CT.C90], T._LocationL());
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[89] || CT.C89,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1192,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 13,
        [_Location_line]: 1259,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "baseStyle",
        [_Location_column]: 13,
        [_Location_line]: 1260,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 13,
        [_Location_line]: 1261,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlignVertical",
        [_Location_column]: 13,
        [_Location_line]: 1262,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHovering",
        [_Location_column]: 13,
        [_Location_line]: 1263,
        [_Location_file]: null
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isFocused",
        [_Location_column]: 13,
        [_Location_line]: 1264,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEmpty",
        [_Location_column]: 13,
        [_Location_line]: 1265,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "expands",
        [_Location_column]: 13,
        [_Location_line]: 1266,
        [_Location_file]: null
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 1267,
        [_Location_file]: null
      });
    },
    get C92() {
      return C[92] = dart.constList([C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101], T._LocationL());
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[92] || CT.C92,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 1258,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 9,
        [_Location_line]: 1256,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 1257,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1270,
        [_Location_file]: null
      });
    },
    get C103() {
      return C[103] = dart.constList([C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106], T._LocationL());
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[103] || CT.C103,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 1255,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxValueLength",
        [_Location_column]: 15,
        [_Location_line]: 1303,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "currentValueLength",
        [_Location_column]: 15,
        [_Location_line]: 1304,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 15,
        [_Location_line]: 1305,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 1310,
        [_Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.constList([C[109] || CT.C109, C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112], T._LocationL());
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[108] || CT.C108,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1302,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 11,
        [_Location_line]: 1300,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 1301,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 1313,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.constList([C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117], T._LocationL());
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[114] || CT.C114,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1299,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "ignoring",
        [_Location_column]: 9,
        [_Location_line]: 1298,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1299,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120, C[121] || CT.C121], T._LocationL());
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[119] || CT.C119,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1297,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursor",
        [_Location_column]: 7,
        [_Location_line]: 1294,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEnter",
        [_Location_column]: 7,
        [_Location_line]: 1295,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onExit",
        [_Location_column]: 7,
        [_Location_line]: 1296,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1297,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.constList([C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127], T._LocationL());
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[123] || CT.C123,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 1293,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shortcuts",
        [_Location_column]: 9,
        [_Location_line]: 1323,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1324,
        [_Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.constList([C[130] || CT.C130, C[131] || CT.C131], T._LocationL());
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[129] || CT.C129,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1322,
        [_Location_file]: "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart"
      });
    }
  }, false);
  var C = Array(132).fill(void 0);
  var I = [
    "file:///E:/flutterSDK/flutter/packages/flutter/lib/src/material/text_field.dart",
    "package:flutter/src/material/text_field.dart"
  ];
  var _state = dart.privateName(text_field, "_state");
  var _name = dart.privateName(platform, "_name");
  var _name$ = dart.privateName(ui, "_name");
  var _requestKeyboard = dart.privateName(text_field, "_requestKeyboard");
  text_field._TextFieldSelectionGestureDetectorBuilder = class _TextFieldSelectionGestureDetectorBuilder extends text_selection.TextSelectionGestureDetectorBuilder {
    onForcePressStart(details) {
      if (details == null) dart.nullFailed(I[0], 51, 44, "details");
      super.onForcePressStart(details);
      if (dart.test(this.delegate.selectionEnabled) && dart.test(this.shouldShowSelectionToolbar)) {
        this.editableText.showToolbar();
      }
    }
    onForcePressEnd(details) {
      if (details == null) dart.nullFailed(I[0], 59, 42, "details");
    }
    onSingleLongTapMoveUpdate(details) {
      if (details == null) dart.nullFailed(I[0], 64, 61, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        switch (theme$.Theme.of(this[_state].context).platform) {
          case C[0] || CT.C0:
          case C[1] || CT.C1:
          {
            this.renderEditable.selectPositionAt({from: details.globalPosition, cause: editable.SelectionChangedCause.longPress});
            break;
          }
          case C[2] || CT.C2:
          case C[3] || CT.C3:
          case C[4] || CT.C4:
          case C[5] || CT.C5:
          {
            this.renderEditable.selectWordsInRange({from: details.globalPosition['-'](details.offsetFromOrigin), to: details.globalPosition, cause: editable.SelectionChangedCause.longPress});
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    onSingleTapUp(details) {
      if (details == null) dart.nullFailed(I[0], 89, 35, "details");
      this.editableText.hideToolbar();
      if (dart.test(this.delegate.selectionEnabled)) {
        switch (theme$.Theme.of(this[_state].context).platform) {
          case C[0] || CT.C0:
          case C[1] || CT.C1:
          {
            switch (details.kind) {
              case C[6] || CT.C6:
              case C[7] || CT.C7:
              case C[8] || CT.C8:
              {
                this.renderEditable.selectPosition({cause: editable.SelectionChangedCause.tap});
                break;
              }
              case C[9] || CT.C9:
              case C[10] || CT.C10:
              {
                this.renderEditable.selectWordEdge({cause: editable.SelectionChangedCause.tap});
                break;
              }
              default:
              {
                dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
              }
            }
            break;
          }
          case C[2] || CT.C2:
          case C[3] || CT.C3:
          case C[4] || CT.C4:
          case C[5] || CT.C5:
          {
            this.renderEditable.selectPosition({cause: editable.SelectionChangedCause.tap});
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      this[_state][_requestKeyboard]();
      if (this[_state].widget.onTap != null) dart.nullCheck(this[_state].widget.onTap)();
    }
    onSingleLongTapStart(details) {
      if (details == null) dart.nullFailed(I[0], 124, 51, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        switch (theme$.Theme.of(this[_state].context).platform) {
          case C[0] || CT.C0:
          case C[1] || CT.C1:
          {
            this.renderEditable.selectPositionAt({from: details.globalPosition, cause: editable.SelectionChangedCause.longPress});
            break;
          }
          case C[2] || CT.C2:
          case C[3] || CT.C3:
          case C[4] || CT.C4:
          case C[5] || CT.C5:
          {
            this.renderEditable.selectWord({cause: editable.SelectionChangedCause.longPress});
            feedback.Feedback.forLongPress(this[_state].context);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
  };
  (text_field._TextFieldSelectionGestureDetectorBuilder.new = function(opts) {
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 44, 30, "state");
    this[_state] = state;
    text_field._TextFieldSelectionGestureDetectorBuilder.__proto__.new.call(this, {delegate: state});
    ;
  }).prototype = text_field._TextFieldSelectionGestureDetectorBuilder.prototype;
  dart.addTypeTests(text_field._TextFieldSelectionGestureDetectorBuilder);
  dart.addTypeCaches(text_field._TextFieldSelectionGestureDetectorBuilder);
  dart.setLibraryUri(text_field._TextFieldSelectionGestureDetectorBuilder, I[1]);
  dart.setFieldSignature(text_field._TextFieldSelectionGestureDetectorBuilder, () => ({
    __proto__: dart.getFields(text_field._TextFieldSelectionGestureDetectorBuilder.__proto__),
    [_state]: dart.finalFieldType(text_field._TextFieldState)
  }));
  var controller$ = dart.privateName(text_field, "TextField.controller");
  var focusNode$ = dart.privateName(text_field, "TextField.focusNode");
  var decoration$ = dart.privateName(text_field, "TextField.decoration");
  var keyboardType$ = dart.privateName(text_field, "TextField.keyboardType");
  var textInputAction$ = dart.privateName(text_field, "TextField.textInputAction");
  var textCapitalization$ = dart.privateName(text_field, "TextField.textCapitalization");
  var style$ = dart.privateName(text_field, "TextField.style");
  var strutStyle$ = dart.privateName(text_field, "TextField.strutStyle");
  var textAlign$ = dart.privateName(text_field, "TextField.textAlign");
  var textAlignVertical$ = dart.privateName(text_field, "TextField.textAlignVertical");
  var textDirection$ = dart.privateName(text_field, "TextField.textDirection");
  var autofocus$ = dart.privateName(text_field, "TextField.autofocus");
  var obscuringCharacter$ = dart.privateName(text_field, "TextField.obscuringCharacter");
  var obscureText$ = dart.privateName(text_field, "TextField.obscureText");
  var autocorrect$ = dart.privateName(text_field, "TextField.autocorrect");
  var smartDashesType$ = dart.privateName(text_field, "TextField.smartDashesType");
  var smartQuotesType$ = dart.privateName(text_field, "TextField.smartQuotesType");
  var enableSuggestions$ = dart.privateName(text_field, "TextField.enableSuggestions");
  var maxLines$ = dart.privateName(text_field, "TextField.maxLines");
  var minLines$ = dart.privateName(text_field, "TextField.minLines");
  var expands$ = dart.privateName(text_field, "TextField.expands");
  var readOnly$ = dart.privateName(text_field, "TextField.readOnly");
  var toolbarOptions$ = dart.privateName(text_field, "TextField.toolbarOptions");
  var showCursor$ = dart.privateName(text_field, "TextField.showCursor");
  var maxLength$ = dart.privateName(text_field, "TextField.maxLength");
  var maxLengthEnforced$ = dart.privateName(text_field, "TextField.maxLengthEnforced");
  var maxLengthEnforcement$ = dart.privateName(text_field, "TextField.maxLengthEnforcement");
  var onChanged$ = dart.privateName(text_field, "TextField.onChanged");
  var onEditingComplete$ = dart.privateName(text_field, "TextField.onEditingComplete");
  var onSubmitted$ = dart.privateName(text_field, "TextField.onSubmitted");
  var onAppPrivateCommand$ = dart.privateName(text_field, "TextField.onAppPrivateCommand");
  var inputFormatters$ = dart.privateName(text_field, "TextField.inputFormatters");
  var enabled$ = dart.privateName(text_field, "TextField.enabled");
  var cursorWidth$ = dart.privateName(text_field, "TextField.cursorWidth");
  var cursorHeight$ = dart.privateName(text_field, "TextField.cursorHeight");
  var cursorRadius$ = dart.privateName(text_field, "TextField.cursorRadius");
  var cursorColor$ = dart.privateName(text_field, "TextField.cursorColor");
  var selectionHeightStyle$ = dart.privateName(text_field, "TextField.selectionHeightStyle");
  var selectionWidthStyle$ = dart.privateName(text_field, "TextField.selectionWidthStyle");
  var keyboardAppearance$ = dart.privateName(text_field, "TextField.keyboardAppearance");
  var scrollPadding$ = dart.privateName(text_field, "TextField.scrollPadding");
  var enableInteractiveSelection$ = dart.privateName(text_field, "TextField.enableInteractiveSelection");
  var selectionControls$ = dart.privateName(text_field, "TextField.selectionControls");
  var dragStartBehavior$ = dart.privateName(text_field, "TextField.dragStartBehavior");
  var onTap$ = dart.privateName(text_field, "TextField.onTap");
  var mouseCursor$ = dart.privateName(text_field, "TextField.mouseCursor");
  var buildCounter$ = dart.privateName(text_field, "TextField.buildCounter");
  var scrollPhysics$ = dart.privateName(text_field, "TextField.scrollPhysics");
  var scrollController$ = dart.privateName(text_field, "TextField.scrollController");
  var autofillHints$ = dart.privateName(text_field, "TextField.autofillHints");
  var restorationId$ = dart.privateName(text_field, "TextField.restorationId");
  var InputDecoration_alignLabelWithHint = dart.privateName(input_decorator, "InputDecoration.alignLabelWithHint");
  var InputDecoration_semanticCounterText = dart.privateName(input_decorator, "InputDecoration.semanticCounterText");
  var InputDecoration_enabled = dart.privateName(input_decorator, "InputDecoration.enabled");
  var InputDecoration_border = dart.privateName(input_decorator, "InputDecoration.border");
  var InputDecoration_enabledBorder = dart.privateName(input_decorator, "InputDecoration.enabledBorder");
  var InputDecoration_disabledBorder = dart.privateName(input_decorator, "InputDecoration.disabledBorder");
  var InputDecoration_focusedErrorBorder = dart.privateName(input_decorator, "InputDecoration.focusedErrorBorder");
  var InputDecoration_focusedBorder = dart.privateName(input_decorator, "InputDecoration.focusedBorder");
  var InputDecoration_errorBorder = dart.privateName(input_decorator, "InputDecoration.errorBorder");
  var InputDecoration_hoverColor = dart.privateName(input_decorator, "InputDecoration.hoverColor");
  var InputDecoration_focusColor = dart.privateName(input_decorator, "InputDecoration.focusColor");
  var InputDecoration_fillColor = dart.privateName(input_decorator, "InputDecoration.fillColor");
  var InputDecoration_filled = dart.privateName(input_decorator, "InputDecoration.filled");
  var InputDecoration_counterStyle = dart.privateName(input_decorator, "InputDecoration.counterStyle");
  var InputDecoration_counter = dart.privateName(input_decorator, "InputDecoration.counter");
  var InputDecoration_counterText = dart.privateName(input_decorator, "InputDecoration.counterText");
  var InputDecoration_suffixIconConstraints = dart.privateName(input_decorator, "InputDecoration.suffixIconConstraints");
  var InputDecoration_suffixStyle = dart.privateName(input_decorator, "InputDecoration.suffixStyle");
  var InputDecoration_suffixText = dart.privateName(input_decorator, "InputDecoration.suffixText");
  var InputDecoration_suffix = dart.privateName(input_decorator, "InputDecoration.suffix");
  var InputDecoration_suffixIcon = dart.privateName(input_decorator, "InputDecoration.suffixIcon");
  var InputDecoration_prefixStyle = dart.privateName(input_decorator, "InputDecoration.prefixStyle");
  var InputDecoration_prefixText = dart.privateName(input_decorator, "InputDecoration.prefixText");
  var InputDecoration_prefix = dart.privateName(input_decorator, "InputDecoration.prefix");
  var InputDecoration_prefixIconConstraints = dart.privateName(input_decorator, "InputDecoration.prefixIconConstraints");
  var InputDecoration_prefixIcon = dart.privateName(input_decorator, "InputDecoration.prefixIcon");
  var InputDecoration_isCollapsed = dart.privateName(input_decorator, "InputDecoration.isCollapsed");
  var InputDecoration_contentPadding = dart.privateName(input_decorator, "InputDecoration.contentPadding");
  var InputDecoration_isDense = dart.privateName(input_decorator, "InputDecoration.isDense");
  var InputDecoration_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecoration.floatingLabelBehavior");
  var InputDecoration_hasFloatingPlaceholder = dart.privateName(input_decorator, "InputDecoration.hasFloatingPlaceholder");
  var InputDecoration_errorMaxLines = dart.privateName(input_decorator, "InputDecoration.errorMaxLines");
  var InputDecoration_errorStyle = dart.privateName(input_decorator, "InputDecoration.errorStyle");
  var InputDecoration_errorText = dart.privateName(input_decorator, "InputDecoration.errorText");
  var InputDecoration_hintMaxLines = dart.privateName(input_decorator, "InputDecoration.hintMaxLines");
  var InputDecoration_hintTextDirection = dart.privateName(input_decorator, "InputDecoration.hintTextDirection");
  var InputDecoration_hintStyle = dart.privateName(input_decorator, "InputDecoration.hintStyle");
  var InputDecoration_hintText = dart.privateName(input_decorator, "InputDecoration.hintText");
  var InputDecoration_helperMaxLines = dart.privateName(input_decorator, "InputDecoration.helperMaxLines");
  var InputDecoration_helperStyle = dart.privateName(input_decorator, "InputDecoration.helperStyle");
  var InputDecoration_helperText = dart.privateName(input_decorator, "InputDecoration.helperText");
  var InputDecoration_labelStyle = dart.privateName(input_decorator, "InputDecoration.labelStyle");
  var InputDecoration_labelText = dart.privateName(input_decorator, "InputDecoration.labelText");
  var InputDecoration_icon = dart.privateName(input_decorator, "InputDecoration.icon");
  var _name$0 = dart.privateName(text_input, "_name");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _name$1 = dart.privateName(recognizer, "_name");
  var ToolbarOptions_selectAll = dart.privateName(editable_text, "ToolbarOptions.selectAll");
  var ToolbarOptions_paste = dart.privateName(editable_text, "ToolbarOptions.paste");
  var ToolbarOptions_cut = dart.privateName(editable_text, "ToolbarOptions.cut");
  var ToolbarOptions_copy = dart.privateName(editable_text, "ToolbarOptions.copy");
  text_field.TextField = class TextField extends framework.StatefulWidget {
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get keyboardType() {
      return this[keyboardType$];
    }
    set keyboardType(value) {
      super.keyboardType = value;
    }
    get textInputAction() {
      return this[textInputAction$];
    }
    set textInputAction(value) {
      super.textInputAction = value;
    }
    get textCapitalization() {
      return this[textCapitalization$];
    }
    set textCapitalization(value) {
      super.textCapitalization = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get strutStyle() {
      return this[strutStyle$];
    }
    set strutStyle(value) {
      super.strutStyle = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textAlignVertical() {
      return this[textAlignVertical$];
    }
    set textAlignVertical(value) {
      super.textAlignVertical = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get autofocus() {
      return this[autofocus$];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get obscuringCharacter() {
      return this[obscuringCharacter$];
    }
    set obscuringCharacter(value) {
      super.obscuringCharacter = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
    get autocorrect() {
      return this[autocorrect$];
    }
    set autocorrect(value) {
      super.autocorrect = value;
    }
    get smartDashesType() {
      return this[smartDashesType$];
    }
    set smartDashesType(value) {
      super.smartDashesType = value;
    }
    get smartQuotesType() {
      return this[smartQuotesType$];
    }
    set smartQuotesType(value) {
      super.smartQuotesType = value;
    }
    get enableSuggestions() {
      return this[enableSuggestions$];
    }
    set enableSuggestions(value) {
      super.enableSuggestions = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get minLines() {
      return this[minLines$];
    }
    set minLines(value) {
      super.minLines = value;
    }
    get expands() {
      return this[expands$];
    }
    set expands(value) {
      super.expands = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get toolbarOptions() {
      return this[toolbarOptions$];
    }
    set toolbarOptions(value) {
      super.toolbarOptions = value;
    }
    get showCursor() {
      return this[showCursor$];
    }
    set showCursor(value) {
      super.showCursor = value;
    }
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get maxLengthEnforced() {
      return this[maxLengthEnforced$];
    }
    set maxLengthEnforced(value) {
      super.maxLengthEnforced = value;
    }
    get maxLengthEnforcement() {
      return this[maxLengthEnforcement$];
    }
    set maxLengthEnforcement(value) {
      super.maxLengthEnforcement = value;
    }
    get onChanged() {
      return this[onChanged$];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get onEditingComplete() {
      return this[onEditingComplete$];
    }
    set onEditingComplete(value) {
      super.onEditingComplete = value;
    }
    get onSubmitted() {
      return this[onSubmitted$];
    }
    set onSubmitted(value) {
      super.onSubmitted = value;
    }
    get onAppPrivateCommand() {
      return this[onAppPrivateCommand$];
    }
    set onAppPrivateCommand(value) {
      super.onAppPrivateCommand = value;
    }
    get inputFormatters() {
      return this[inputFormatters$];
    }
    set inputFormatters(value) {
      super.inputFormatters = value;
    }
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get cursorWidth() {
      return this[cursorWidth$];
    }
    set cursorWidth(value) {
      super.cursorWidth = value;
    }
    get cursorHeight() {
      return this[cursorHeight$];
    }
    set cursorHeight(value) {
      super.cursorHeight = value;
    }
    get cursorRadius() {
      return this[cursorRadius$];
    }
    set cursorRadius(value) {
      super.cursorRadius = value;
    }
    get cursorColor() {
      return this[cursorColor$];
    }
    set cursorColor(value) {
      super.cursorColor = value;
    }
    get selectionHeightStyle() {
      return this[selectionHeightStyle$];
    }
    set selectionHeightStyle(value) {
      super.selectionHeightStyle = value;
    }
    get selectionWidthStyle() {
      return this[selectionWidthStyle$];
    }
    set selectionWidthStyle(value) {
      super.selectionWidthStyle = value;
    }
    get keyboardAppearance() {
      return this[keyboardAppearance$];
    }
    set keyboardAppearance(value) {
      super.keyboardAppearance = value;
    }
    get scrollPadding() {
      return this[scrollPadding$];
    }
    set scrollPadding(value) {
      super.scrollPadding = value;
    }
    get enableInteractiveSelection() {
      return this[enableInteractiveSelection$];
    }
    set enableInteractiveSelection(value) {
      super.enableInteractiveSelection = value;
    }
    get selectionControls() {
      return this[selectionControls$];
    }
    set selectionControls(value) {
      super.selectionControls = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get buildCounter() {
      return this[buildCounter$];
    }
    set buildCounter(value) {
      super.buildCounter = value;
    }
    get scrollPhysics() {
      return this[scrollPhysics$];
    }
    set scrollPhysics(value) {
      super.scrollPhysics = value;
    }
    get scrollController() {
      return this[scrollController$];
    }
    set scrollController(value) {
      super.scrollController = value;
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371
    }
    get autofillHints() {
      return this[autofillHints$];
    }
    set autofillHints(value) {
      super.autofillHints = value;
    }
<<<<<<< HEAD
    get currentEditingValue() {
      return this[currentEditingValue$];
    }
    set currentEditingValue(value) {
      super.currentEditingValue = value;
    }
    toJson() {
      if (!dart.test(this.autofillHints[$isNotEmpty])) dart.assertFailed(null, I[3], 700, 12, "autofillHints.isNotEmpty");
      return new (T.IdentityMapOfString$dynamic()).from(["uniqueIdentifier", this.uniqueIdentifier, "hints", this.autofillHints, "editingValue", this.currentEditingValue.toJSON()]);
    }
  };
  (autofill.AutofillConfiguration.new = function(opts) {
    let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
    if (uniqueIdentifier == null) dart.nullFailed(I[3], 632, 19, "uniqueIdentifier");
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    if (autofillHints == null) dart.nullFailed(I[3], 633, 19, "autofillHints");
    let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
    if (currentEditingValue == null) dart.nullFailed(I[3], 634, 19, "currentEditingValue");
    this[uniqueIdentifier$] = uniqueIdentifier;
    this[autofillHints$] = autofillHints;
    this[currentEditingValue$] = currentEditingValue;
    if (!(uniqueIdentifier != null)) dart.assertFailed(null, I[3], 635, 15, "uniqueIdentifier != null");
    if (!(autofillHints != null)) dart.assertFailed(null, I[3], 636, 15, "autofillHints != null");
    ;
  }).prototype = autofill.AutofillConfiguration.prototype;
  dart.addTypeTests(autofill.AutofillConfiguration);
  dart.addTypeCaches(autofill.AutofillConfiguration);
  dart.setMethodSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getMethods(autofill.AutofillConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(autofill.AutofillConfiguration, I[2]);
  dart.setFieldSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getFields(autofill.AutofillConfiguration.__proto__),
    uniqueIdentifier: dart.finalFieldType(core.String),
    autofillHints: dart.finalFieldType(core.List$(core.String)),
    currentEditingValue: dart.finalFieldType(text_input.TextEditingValue)
  }));
  autofill.AutofillClient = class AutofillClient extends core.Object {};
  (autofill.AutofillClient.new = function() {
    ;
  }).prototype = autofill.AutofillClient.prototype;
  dart.addTypeTests(autofill.AutofillClient);
  dart.addTypeCaches(autofill.AutofillClient);
  dart.setLibraryUri(autofill.AutofillClient, I[2]);
  autofill.AutofillScope = class AutofillScope extends core.Object {};
  (autofill.AutofillScope.new = function() {
    ;
  }).prototype = autofill.AutofillScope.prototype;
  dart.addTypeTests(autofill.AutofillScope);
  dart.addTypeCaches(autofill.AutofillScope);
  dart.setLibraryUri(autofill.AutofillScope, I[2]);
  autofill._AutofillScopeTextInputConfiguration = class _AutofillScopeTextInputConfiguration extends text_input.TextInputConfiguration {
    toJson() {
      let result = super.toJson();
      result[$_set]("fields", this.allConfigurations[$map](T.MapOfString$dynamic(), dart.fn(configuration => {
        if (configuration == null) dart.nullFailed(I[3], 793, 36, "configuration");
        return configuration.toJson();
      }, T.TextInputConfigurationToMapOfString$dynamic()))[$toList]({growable: false}));
      return result;
    }
  };
  (autofill._AutofillScopeTextInputConfiguration.new = function(opts) {
    let allConfigurations = opts && 'allConfigurations' in opts ? opts.allConfigurations : null;
    if (allConfigurations == null) dart.nullFailed(I[3], 770, 19, "allConfigurations");
    let currentClientConfiguration = opts && 'currentClientConfiguration' in opts ? opts.currentClientConfiguration : null;
    if (currentClientConfiguration == null) dart.nullFailed(I[3], 771, 37, "currentClientConfiguration");
    this.allConfigurations = allConfigurations;
    if (!(allConfigurations != null)) dart.assertFailed(null, I[3], 772, 15, "allConfigurations != null");
    if (!(currentClientConfiguration != null)) dart.assertFailed(null, I[3], 773, 15, "currentClientConfiguration != null");
    autofill._AutofillScopeTextInputConfiguration.__proto__.new.call(this, {inputType: currentClientConfiguration.inputType, obscureText: currentClientConfiguration.obscureText, autocorrect: currentClientConfiguration.autocorrect, smartDashesType: currentClientConfiguration.smartDashesType, smartQuotesType: currentClientConfiguration.smartQuotesType, enableSuggestions: currentClientConfiguration.enableSuggestions, inputAction: currentClientConfiguration.inputAction, textCapitalization: currentClientConfiguration.textCapitalization, keyboardAppearance: currentClientConfiguration.keyboardAppearance, actionLabel: currentClientConfiguration.actionLabel, autofillConfiguration: currentClientConfiguration.autofillConfiguration});
    ;
  }).prototype = autofill._AutofillScopeTextInputConfiguration.prototype;
  dart.addTypeTests(autofill._AutofillScopeTextInputConfiguration);
  dart.addTypeCaches(autofill._AutofillScopeTextInputConfiguration);
  dart.setLibraryUri(autofill._AutofillScopeTextInputConfiguration, I[2]);
  dart.setFieldSignature(autofill._AutofillScopeTextInputConfiguration, () => ({
    __proto__: dart.getFields(autofill._AutofillScopeTextInputConfiguration.__proto__),
    allConfigurations: dart.finalFieldType(core.Iterable$(text_input.TextInputConfiguration))
  }));
  autofill.AutofillScopeMixin = class AutofillScopeMixin extends core.Object {};
  autofill.AutofillScopeMixin[dart.mixinOn] = Object => class AutofillScopeMixin extends Object {
    attach(trigger, configuration) {
      if (trigger == null) dart.nullFailed(I[3], 804, 46, "trigger");
      if (configuration == null) dart.nullFailed(I[3], 804, 78, "configuration");
      if (!(trigger != null)) dart.assertFailed(null, I[3], 805, 12, "trigger != null");
      if (!!dart.test(this.autofillClients[$any](dart.fn(client => {
        if (client == null) dart.nullFailed(I[3], 807, 44, "client");
        return client.textInputConfiguration.autofillConfiguration == null;
      }, T.AutofillClientTobool())))) dart.assertFailed("Every client in AutofillScope.autofillClients must enable autofill", I[3], 807, 7, "!autofillClients.any((AutofillClient client) => client.textInputConfiguration.autofillConfiguration == null)");
      let inputConfiguration = new autofill._AutofillScopeTextInputConfiguration.new({allConfigurations: this.autofillClients[$map](text_input.TextInputConfiguration, dart.fn(client => {
          if (client == null) dart.nullFailed(I[3], 812, 62, "client");
          return client.textInputConfiguration;
        }, T.AutofillClientToTextInputConfiguration())), currentClientConfiguration: configuration});
      return text_input.TextInput.attach(trigger, inputConfiguration);
    }
  };
  (autofill.AutofillScopeMixin[dart.mixinNew] = function() {
  }).prototype = autofill.AutofillScopeMixin.prototype;
  dart.addTypeTests(autofill.AutofillScopeMixin);
  dart.addTypeCaches(autofill.AutofillScopeMixin);
  autofill.AutofillScopeMixin[dart.implements] = () => [autofill.AutofillScope, core.Object];
  dart.setMethodSignature(autofill.AutofillScopeMixin, () => ({
    __proto__: dart.getMethods(autofill.AutofillScopeMixin.__proto__),
    attach: dart.fnType(text_input.TextInputConnection, [text_input.TextInputClient, text_input.TextInputConfiguration])
  }));
  dart.setLibraryUri(autofill.AutofillScopeMixin, I[2]);
  dart.trackLibraries("packages/flutter/src/services/text_input.dart", {
    "package:flutter/src/services/text_input.dart": text_input,
    "package:flutter/src/services/autofill.dart": autofill
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_input.dart","autofill.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/services/text_input.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_input: text_input,
    src__services__autofill: autofill
  };
}));

//# sourceMappingURL=text_input.dart.lib.js.map
=======
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get selectionEnabled() {
      return this.enableInteractiveSelection;
    }
    createState() {
      return new text_field._TextFieldState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 820, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextEditingController()).new("controller", this.controller, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfFocusNode()).new("focusNode", this.focusNode, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enabled", this.enabled, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfInputDecoration()).new("decoration", this.decoration, {defaultValue: C[11] || CT.C11}));
      properties.add(new (T.DiagnosticsPropertyOfTextInputType()).new("keyboardType", this.keyboardType, {defaultValue: text_input.TextInputType.text}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("style", this.style, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("autofocus", this.autofocus, {defaultValue: false}));
      properties.add(new (T.DiagnosticsPropertyOfString()).new("obscuringCharacter", this.obscuringCharacter, {defaultValue: "•"}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("obscureText", this.obscureText, {defaultValue: false}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("autocorrect", this.autocorrect, {defaultValue: true}));
      properties.add(new (T.EnumPropertyOfSmartDashesType()).new("smartDashesType", this.smartDashesType, {defaultValue: dart.test(this.obscureText) ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled}));
      properties.add(new (T.EnumPropertyOfSmartQuotesType()).new("smartQuotesType", this.smartQuotesType, {defaultValue: dart.test(this.obscureText) ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enableSuggestions", this.enableSuggestions, {defaultValue: true}));
      properties.add(new diagnostics.IntProperty.new("maxLines", this.maxLines, {defaultValue: 1}));
      properties.add(new diagnostics.IntProperty.new("minLines", this.minLines, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("expands", this.expands, {defaultValue: false}));
      properties.add(new diagnostics.IntProperty.new("maxLength", this.maxLength, {defaultValue: null}));
      properties.add(new diagnostics.FlagProperty.new("maxLengthEnforced", {value: this.maxLengthEnforced, defaultValue: true, ifFalse: "maxLength not enforced"}));
      properties.add(new (T.EnumPropertyOfMaxLengthEnforcement()).new("maxLengthEnforcement", this.maxLengthEnforcement, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextInputAction()).new("textInputAction", this.textInputAction, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextCapitalization()).new("textCapitalization", this.textCapitalization, {defaultValue: text_input.TextCapitalization.none}));
      properties.add(new (T.EnumPropertyOfTextAlign()).new("textAlign", this.textAlign, {defaultValue: ui.TextAlign.start}));
      properties.add(new (T.DiagnosticsPropertyOfTextAlignVertical()).new("textAlignVertical", this.textAlignVertical, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("cursorWidth", this.cursorWidth, {defaultValue: 2.0}));
      properties.add(new diagnostics.DoubleProperty.new("cursorHeight", this.cursorHeight, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfRadius()).new("cursorRadius", this.cursorRadius, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("cursorColor", this.cursorColor, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfBrightness()).new("keyboardAppearance", this.keyboardAppearance, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfEdgeInsetsGeometry()).new("scrollPadding", this.scrollPadding, {defaultValue: C[16] || CT.C16}));
      properties.add(new diagnostics.FlagProperty.new("selectionEnabled", {value: this.selectionEnabled, defaultValue: true, ifFalse: "selection disabled"}));
      properties.add(new (T.DiagnosticsPropertyOfTextSelectionControls()).new("selectionControls", this.selectionControls, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfScrollController()).new("scrollController", this.scrollController, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfScrollPhysics()).new("scrollPhysics", this.scrollPhysics, {defaultValue: null}));
    }
  };
  (text_field.TextField.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let key = opts && 'key' in opts ? opts.key : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[11] || CT.C11;
    let keyboardType = opts && 'keyboardType' in opts ? opts.keyboardType : null;
    let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[12] || CT.C12;
    if (textCapitalization == null) dart.nullFailed(I[0], 340, 10, "textCapitalization");
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[13] || CT.C13;
    if (textAlign == null) dart.nullFailed(I[0], 343, 10, "textAlign");
    let textAlignVertical = opts && 'textAlignVertical' in opts ? opts.textAlignVertical : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    if (readOnly == null) dart.nullFailed(I[0], 346, 10, "readOnly");
    let toolbarOptions = opts && 'toolbarOptions' in opts ? opts.toolbarOptions : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    if (autofocus == null) dart.nullFailed(I[0], 349, 10, "autofocus");
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    if (obscuringCharacter == null) dart.nullFailed(I[0], 350, 10, "obscuringCharacter");
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    if (obscureText == null) dart.nullFailed(I[0], 351, 10, "obscureText");
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    if (autocorrect == null) dart.nullFailed(I[0], 352, 10, "autocorrect");
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    if (enableSuggestions == null) dart.nullFailed(I[0], 355, 10, "enableSuggestions");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    if (expands == null) dart.nullFailed(I[0], 358, 10, "expands");
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let maxLengthEnforced = opts && 'maxLengthEnforced' in opts ? opts.maxLengthEnforced : true;
    if (maxLengthEnforced == null) dart.nullFailed(I[0], 365, 10, "maxLengthEnforced");
    let maxLengthEnforcement = opts && 'maxLengthEnforcement' in opts ? opts.maxLengthEnforcement : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onEditingComplete = opts && 'onEditingComplete' in opts ? opts.onEditingComplete : null;
    let onSubmitted = opts && 'onSubmitted' in opts ? opts.onSubmitted : null;
    let onAppPrivateCommand = opts && 'onAppPrivateCommand' in opts ? opts.onAppPrivateCommand : null;
    let inputFormatters = opts && 'inputFormatters' in opts ? opts.inputFormatters : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 2;
    if (cursorWidth == null) dart.nullFailed(I[0], 373, 10, "cursorWidth");
    let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let selectionHeightStyle = opts && 'selectionHeightStyle' in opts ? opts.selectionHeightStyle : C[14] || CT.C14;
    if (selectionHeightStyle == null) dart.nullFailed(I[0], 377, 10, "selectionHeightStyle");
    let selectionWidthStyle = opts && 'selectionWidthStyle' in opts ? opts.selectionWidthStyle : C[15] || CT.C15;
    if (selectionWidthStyle == null) dart.nullFailed(I[0], 378, 10, "selectionWidthStyle");
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
    let scrollPadding = opts && 'scrollPadding' in opts ? opts.scrollPadding : C[16] || CT.C16;
    if (scrollPadding == null) dart.nullFailed(I[0], 380, 10, "scrollPadding");
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[17] || CT.C17;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 381, 10, "dragStartBehavior");
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : true;
    if (enableInteractiveSelection == null) dart.nullFailed(I[0], 382, 10, "enableInteractiveSelection");
    let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let buildCounter = opts && 'buildCounter' in opts ? opts.buildCounter : null;
    let scrollController = opts && 'scrollController' in opts ? opts.scrollController : null;
    let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$] = controller;
    this[focusNode$] = focusNode;
    this[decoration$] = decoration;
    this[textInputAction$] = textInputAction;
    this[textCapitalization$] = textCapitalization;
    this[style$] = style;
    this[strutStyle$] = strutStyle;
    this[textAlign$] = textAlign;
    this[textAlignVertical$] = textAlignVertical;
    this[textDirection$] = textDirection;
    this[readOnly$] = readOnly;
    this[showCursor$] = showCursor;
    this[autofocus$] = autofocus;
    this[obscuringCharacter$] = obscuringCharacter;
    this[obscureText$] = obscureText;
    this[autocorrect$] = autocorrect;
    this[enableSuggestions$] = enableSuggestions;
    this[maxLines$] = maxLines;
    this[minLines$] = minLines;
    this[expands$] = expands;
    this[maxLength$] = maxLength;
    this[maxLengthEnforced$] = maxLengthEnforced;
    this[maxLengthEnforcement$] = maxLengthEnforcement;
    this[onChanged$] = onChanged;
    this[onEditingComplete$] = onEditingComplete;
    this[onSubmitted$] = onSubmitted;
    this[onAppPrivateCommand$] = onAppPrivateCommand;
    this[inputFormatters$] = inputFormatters;
    this[enabled$] = enabled;
    this[cursorWidth$] = cursorWidth;
    this[cursorHeight$] = cursorHeight;
    this[cursorRadius$] = cursorRadius;
    this[cursorColor$] = cursorColor;
    this[selectionHeightStyle$] = selectionHeightStyle;
    this[selectionWidthStyle$] = selectionWidthStyle;
    this[keyboardAppearance$] = keyboardAppearance;
    this[scrollPadding$] = scrollPadding;
    this[dragStartBehavior$] = dragStartBehavior;
    this[enableInteractiveSelection$] = enableInteractiveSelection;
    this[selectionControls$] = selectionControls;
    this[onTap$] = onTap;
    this[mouseCursor$] = mouseCursor;
    this[buildCounter$] = buildCounter;
    this[scrollController$] = scrollController;
    this[scrollPhysics$] = scrollPhysics;
    this[autofillHints$] = autofillHints;
    this[restorationId$] = restorationId;
    if (!(textAlign != null)) dart.assertFailed(null, I[0], 391, 15, "textAlign != null");
    if (!(readOnly != null)) dart.assertFailed(null, I[0], 392, 15, "readOnly != null");
    if (!(autofocus != null)) dart.assertFailed(null, I[0], 393, 15, "autofocus != null");
    if (!(obscuringCharacter != null && obscuringCharacter.length === 1)) dart.assertFailed(null, I[0], 394, 15, "obscuringCharacter != null && obscuringCharacter.length == 1");
    if (!(obscureText != null)) dart.assertFailed(null, I[0], 395, 15, "obscureText != null");
    if (!(autocorrect != null)) dart.assertFailed(null, I[0], 396, 15, "autocorrect != null");
    this[smartDashesType$] = (t0 = smartDashesType, t0 == null ? dart.test(obscureText) ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0);
    this[smartQuotesType$] = (t0$ = smartQuotesType, t0$ == null ? dart.test(obscureText) ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$);
    if (!(enableSuggestions != null)) dart.assertFailed(null, I[0], 399, 15, "enableSuggestions != null");
    if (!(enableInteractiveSelection != null)) dart.assertFailed(null, I[0], 400, 15, "enableInteractiveSelection != null");
    if (!(maxLengthEnforced != null)) dart.assertFailed(null, I[0], 401, 15, "maxLengthEnforced != null");
    if (!(dart.test(maxLengthEnforced) || maxLengthEnforcement == null)) dart.assertFailed("maxLengthEnforced is deprecated, use only maxLengthEnforcement", I[0], 403, 10, "maxLengthEnforced || maxLengthEnforcement == null");
    if (!(scrollPadding != null)) dart.assertFailed(null, I[0], 406, 15, "scrollPadding != null");
    if (!(dragStartBehavior != null)) dart.assertFailed(null, I[0], 407, 15, "dragStartBehavior != null");
    if (!(selectionHeightStyle != null)) dart.assertFailed(null, I[0], 408, 15, "selectionHeightStyle != null");
    if (!(selectionWidthStyle != null)) dart.assertFailed(null, I[0], 409, 15, "selectionWidthStyle != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[0], 410, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, I[0], 411, 15, "minLines == null || minLines > 0");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", I[0], 413, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands != null)) dart.assertFailed(null, I[0], 416, 15, "expands != null");
    if (!(!dart.test(expands) || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", I[0], 418, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(!dart.test(obscureText) || maxLines === 1)) dart.assertFailed("Obscured fields cannot be multiline.", I[0], 421, 15, "!obscureText || maxLines == 1");
    if (!(maxLength == null || maxLength === -1 || dart.notNull(maxLength) > 0)) dart.assertFailed(null, I[0], 422, 15, "maxLength == null || maxLength == TextField.noMaxLength || maxLength > 0");
    if (!(textInputAction != text_input.TextInputAction.newline || maxLines === 1 || keyboardType != text_input.TextInputType.text)) dart.assertFailed("Use keyboardType TextInputType.multiline when using TextInputAction.newline on a multiline TextField.", I[0], 424, 15, "!identical(textInputAction, TextInputAction.newline) ||\r\n         maxLines == 1 ||\r\n         !identical(keyboardType, TextInputType.text)");
    this[keyboardType$] = (t0$0 = keyboardType, t0$0 == null ? maxLines === 1 ? text_input.TextInputType.text : text_input.TextInputType.multiline : t0$0);
    this[toolbarOptions$] = (t0$1 = toolbarOptions, t0$1 == null ? dart.test(obscureText) ? C[18] || CT.C18 : C[19] || CT.C19 : t0$1);
    text_field.TextField.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text_field.TextField.prototype;
  dart.addTypeTests(text_field.TextField);
  dart.addTypeCaches(text_field.TextField);
  dart.setMethodSignature(text_field.TextField, () => ({
    __proto__: dart.getMethods(text_field.TextField.__proto__),
    createState: dart.fnType(text_field._TextFieldState, [])
  }));
  dart.setGetterSignature(text_field.TextField, () => ({
    __proto__: dart.getGetters(text_field.TextField.__proto__),
    selectionEnabled: core.bool
  }));
  dart.setLibraryUri(text_field.TextField, I[1]);
  dart.setFieldSignature(text_field.TextField, () => ({
    __proto__: dart.getFields(text_field.TextField.__proto__),
    controller: dart.finalFieldType(dart.nullable(editable_text.TextEditingController)),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    decoration: dart.finalFieldType(dart.nullable(input_decorator.InputDecoration)),
    keyboardType: dart.finalFieldType(text_input.TextInputType),
    textInputAction: dart.finalFieldType(dart.nullable(text_input.TextInputAction)),
    textCapitalization: dart.finalFieldType(text_input.TextCapitalization),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    strutStyle: dart.finalFieldType(dart.nullable(strut_style.StrutStyle)),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textAlignVertical: dart.finalFieldType(dart.nullable(alignment.TextAlignVertical)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    autofocus: dart.finalFieldType(core.bool),
    obscuringCharacter: dart.finalFieldType(core.String),
    obscureText: dart.finalFieldType(core.bool),
    autocorrect: dart.finalFieldType(core.bool),
    smartDashesType: dart.finalFieldType(text_input.SmartDashesType),
    smartQuotesType: dart.finalFieldType(text_input.SmartQuotesType),
    enableSuggestions: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    minLines: dart.finalFieldType(dart.nullable(core.int)),
    expands: dart.finalFieldType(core.bool),
    readOnly: dart.finalFieldType(core.bool),
    toolbarOptions: dart.finalFieldType(editable_text.ToolbarOptions),
    showCursor: dart.finalFieldType(dart.nullable(core.bool)),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    maxLengthEnforced: dart.finalFieldType(core.bool),
    maxLengthEnforcement: dart.finalFieldType(dart.nullable(text_formatter.MaxLengthEnforcement)),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onEditingComplete: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSubmitted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onAppPrivateCommand: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String, core.Map$(core.String, dart.dynamic)]))),
    inputFormatters: dart.finalFieldType(dart.nullable(core.List$(text_formatter.TextInputFormatter))),
    enabled: dart.finalFieldType(dart.nullable(core.bool)),
    cursorWidth: dart.finalFieldType(core.double),
    cursorHeight: dart.finalFieldType(dart.nullable(core.double)),
    cursorRadius: dart.finalFieldType(dart.nullable(ui.Radius)),
    cursorColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectionHeightStyle: dart.finalFieldType(ui.BoxHeightStyle),
    selectionWidthStyle: dart.finalFieldType(ui.BoxWidthStyle),
    keyboardAppearance: dart.finalFieldType(dart.nullable(ui.Brightness)),
    scrollPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    enableInteractiveSelection: dart.finalFieldType(core.bool),
    selectionControls: dart.finalFieldType(dart.nullable(text_selection.TextSelectionControls)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    buildCounter: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext], {}, {currentLength: core.int, isFocused: core.bool, maxLength: dart.nullable(core.int)}))),
    scrollPhysics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    scrollController: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    autofillHints: dart.finalFieldType(dart.nullable(core.Iterable$(core.String))),
    restorationId: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(text_field.TextField, {
    /*text_field.TextField.noMaxLength*/get noMaxLength() {
      return -1;
    }
  }, false);
  var _controller = dart.privateName(text_field, "_controller");
  var _focusNode = dart.privateName(text_field, "_focusNode");
  var _isHovering = dart.privateName(text_field, "_isHovering");
  var _showSelectionHandles = dart.privateName(text_field, "_showSelectionHandles");
  var ___TextFieldState__selectionGestureDetectorBuilder = dart.privateName(text_field, "_#_TextFieldState#_selectionGestureDetectorBuilder");
  var ___TextFieldState__selectionGestureDetectorBuilder_isSet = dart.privateName(text_field, "_#_TextFieldState#_selectionGestureDetectorBuilder#isSet");
  var ___TextFieldState_forcePressEnabled = dart.privateName(text_field, "_#_TextFieldState#forcePressEnabled");
  var ___TextFieldState_forcePressEnabled_isSet = dart.privateName(text_field, "_#_TextFieldState#forcePressEnabled#isSet");
  var _effectiveController = dart.privateName(text_field, "_effectiveController");
  var _effectiveFocusNode = dart.privateName(text_field, "_effectiveFocusNode");
  var _effectiveMaxLengthEnforcement = dart.privateName(text_field, "_effectiveMaxLengthEnforcement");
  var _selectionGestureDetectorBuilder = dart.privateName(text_field, "_selectionGestureDetectorBuilder");
  var _isEnabled = dart.privateName(text_field, "_isEnabled");
  var _currentLength = dart.privateName(text_field, "_currentLength");
  var _hasIntrinsicError = dart.privateName(text_field, "_hasIntrinsicError");
  var _hasError = dart.privateName(text_field, "_hasError");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _getEffectiveDecoration = dart.privateName(text_field, "_getEffectiveDecoration");
  var _createLocalController = dart.privateName(text_field, "_createLocalController");
  var _name$2 = dart.privateName(media_query, "_name");
  var _canRequestFocus = dart.privateName(text_field, "_canRequestFocus");
  var _registerController = dart.privateName(text_field, "_registerController");
  var _editableText = dart.privateName(text_field, "_editableText");
  var _shouldShowSelectionHandles = dart.privateName(text_field, "_shouldShowSelectionHandles");
  var _handleSelectionChanged = dart.privateName(text_field, "_handleSelectionChanged");
  var _handleSelectionHandleTapped = dart.privateName(text_field, "_handleSelectionHandleTapped");
  var _handleHover = dart.privateName(text_field, "_handleHover");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  const State_RestorationMixin$36 = class State_RestorationMixin extends framework.State$(text_field.TextField) {};
  (State_RestorationMixin$36.new = function() {
    restoration.RestorationMixin$(text_field.TextField)[dart.mixinNew].call(this);
    State_RestorationMixin$36.__proto__.new.call(this);
  }).prototype = State_RestorationMixin$36.prototype;
  dart.applyMixin(State_RestorationMixin$36, restoration.RestorationMixin$(text_field.TextField));
  text_field._TextFieldState = class _TextFieldState extends State_RestorationMixin$36 {
    get [_effectiveController]() {
      let t0;
      t0 = this.widget.controller;
      return t0 == null ? dart.nullCheck(this[_controller]).value : t0;
    }
    get [_effectiveFocusNode]() {
      let t1, t0;
      t0 = this.widget.focusNode;
      return t0 == null ? (t1 = this[_focusNode], t1 == null ? this[_focusNode] = new focus_manager.FocusNode.new() : t1) : t0;
    }
    get [_effectiveMaxLengthEnforcement]() {
      let t0;
      t0 = this.widget.maxLengthEnforcement;
      return t0 == null ? text_formatter.LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement(theme$.Theme.of(this.context).platform) : t0;
    }
    get needsCounter() {
      return this.widget.maxLength != null && this.widget.decoration != null && dart.nullCheck(this.widget.decoration).counterText == null;
    }
    get [_selectionGestureDetectorBuilder]() {
      let t0;
      return dart.test(this[___TextFieldState__selectionGestureDetectorBuilder_isSet]) ? (t0 = this[___TextFieldState__selectionGestureDetectorBuilder], t0) : dart.throw(new _internal.LateError.fieldNI("_selectionGestureDetectorBuilder"));
    }
    set [_selectionGestureDetectorBuilder](t0) {
      if (t0 == null) dart.nullFailed(I[0], 877, 50, "null");
      this[___TextFieldState__selectionGestureDetectorBuilder_isSet] = true;
      this[___TextFieldState__selectionGestureDetectorBuilder] = t0;
    }
    get forcePressEnabled() {
      let t1;
      return dart.test(this[___TextFieldState_forcePressEnabled_isSet]) ? (t1 = this[___TextFieldState_forcePressEnabled], t1) : dart.throw(new _internal.LateError.fieldNI("forcePressEnabled"));
    }
    set forcePressEnabled(t1) {
      if (t1 == null) dart.nullFailed(I[0], 881, 13, "null");
      this[___TextFieldState_forcePressEnabled_isSet] = true;
      this[___TextFieldState_forcePressEnabled] = t1;
    }
    get selectionEnabled() {
      return this.widget.selectionEnabled;
    }
    get [_isEnabled]() {
      let t3, t2, t2$;
      t2$ = (t2 = this.widget.enabled, t2 == null ? (t3 = this.widget.decoration, t3 == null ? null : t3.enabled) : t2);
      return t2$ == null ? true : t2$;
    }
    get [_currentLength]() {
      return extensions['StringCharacters|get#characters'](this[_effectiveController].value.text)[$length];
    }
    get [_hasIntrinsicError]() {
      return this.widget.maxLength != null && dart.nullCheck(this.widget.maxLength) > 0 && dart.notNull(extensions['StringCharacters|get#characters'](this[_effectiveController].value.text)[$length]) > dart.nullCheck(this.widget.maxLength);
    }
    get [_hasError]() {
      let t2;
      return (t2 = this.widget.decoration, t2 == null ? null : t2.errorText) != null || dart.test(this[_hasIntrinsicError]);
    }
    [_getEffectiveDecoration]() {
      let t2, t2$, t2$0, t2$1, t2$2;
      let localizations = material_localizations.MaterialLocalizations.of(this.context);
      let themeData = theme$.Theme.of(this.context);
      let effectiveDecoration = (t2 = this.widget.decoration, t2 == null ? C[11] || CT.C11 : t2).applyDefaults(themeData.inputDecorationTheme).copyWith({enabled: this[_isEnabled], hintMaxLines: (t2$0 = (t2$ = this.widget.decoration, t2$ == null ? null : t2$.hintMaxLines), t2$0 == null ? this.widget.maxLines : t2$0)});
      if (effectiveDecoration.counter != null || effectiveDecoration.counterText != null) return effectiveDecoration;
      let counter = null;
      let currentLength = this[_currentLength];
      if (effectiveDecoration.counter == null && effectiveDecoration.counterText == null && this.widget.buildCounter != null) {
        let isFocused = this[_effectiveFocusNode].hasFocus;
        let builtCounter = dart.nullCheck(this.widget.buildCounter)(this.context, {currentLength: currentLength, maxLength: this.widget.maxLength, isFocused: isFocused});
        if (builtCounter != null) {
          counter = new basic.Semantics.new({container: true, liveRegion: isFocused, child: builtCounter, $creationLocationd_0dea112b090073317d4: C[20] || CT.C20});
        }
        return effectiveDecoration.copyWith({counter: counter});
      }
      if (this.widget.maxLength == null) return effectiveDecoration;
      let counterText = dart.str(currentLength);
      let semanticCounterText = "";
      if (dart.nullCheck(this.widget.maxLength) > 0) {
        counterText = counterText + ("/" + dart.str(this.widget.maxLength));
        let remaining = (dart.nullCheck(this.widget.maxLength) - dart.notNull(currentLength))[$clamp](0, dart.nullCheck(this.widget.maxLength));
        semanticCounterText = localizations.remainingTextFieldCharacterCount(remaining);
      }
      if (dart.test(this[_hasIntrinsicError])) {
        return effectiveDecoration.copyWith({errorText: (t2$1 = effectiveDecoration.errorText, t2$1 == null ? "" : t2$1), counterStyle: (t2$2 = effectiveDecoration.errorStyle, t2$2 == null ? dart.nullCheck(themeData.textTheme.caption).copyWith({color: themeData.errorColor}) : t2$2), counterText: counterText, semanticCounterText: semanticCounterText});
      }
      return effectiveDecoration.copyWith({counterText: counterText, semanticCounterText: semanticCounterText});
    }
    initState() {
      super.initState();
      this[_selectionGestureDetectorBuilder] = new text_field._TextFieldSelectionGestureDetectorBuilder.new({state: this});
      if (this.widget.controller == null) {
        this[_createLocalController]();
      }
      this[_effectiveFocusNode].canRequestFocus = this[_isEnabled];
    }
    get [_canRequestFocus]() {
      let t2, t2$;
      let mode = (t2$ = (t2 = media_query.MediaQuery.maybeOf(this.context), t2 == null ? null : t2.navigationMode), t2$ == null ? media_query.NavigationMode.traditional : t2$);
      switch (mode) {
        case C[25] || CT.C25:
        {
          return this[_isEnabled];
        }
        case C[26] || CT.C26:
        {
          return true;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      this[_effectiveFocusNode].canRequestFocus = this[_canRequestFocus];
    }
    didUpdateWidget(oldWidget) {
      text_field.TextField.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[0], 993, 34, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (this.widget.controller == null && oldWidget.controller != null) {
        this[_createLocalController](dart.nullCheck(oldWidget.controller).value);
      } else if (this.widget.controller != null && oldWidget.controller == null) {
        this.unregisterFromRestoration(dart.nullCheck(this[_controller]));
        dart.nullCheck(this[_controller]).dispose();
        this[_controller] = null;
      }
      this[_effectiveFocusNode].canRequestFocus = this[_canRequestFocus];
      if (dart.test(this[_effectiveFocusNode].hasFocus) && this.widget.readOnly != oldWidget.readOnly && dart.test(this[_isEnabled])) {
        if (dart.test(this[_effectiveController].selection.isCollapsed)) {
          this[_showSelectionHandles] = !dart.test(this.widget.readOnly);
        }
      }
    }
    restoreState(oldBucket, initialRestore) {
      if (initialRestore == null) dart.nullFailed(I[0], 1011, 56, "initialRestore");
      if (this[_controller] != null) {
        this[_registerController]();
      }
    }
    [_registerController]() {
      if (!(this[_controller] != null)) dart.assertFailed(null, I[0], 1018, 12, "_controller != null");
      this.registerForRestoration(dart.nullCheck(this[_controller]), "controller");
    }
    [_createLocalController](value = null) {
      if (!(this[_controller] == null)) dart.assertFailed(null, I[0], 1023, 12, "_controller == null");
      this[_controller] = value == null ? restoration_properties.RestorableTextEditingController.new() : new restoration_properties.RestorableTextEditingController.fromValue(value);
      if (!dart.test(this.restorePending)) {
        this[_registerController]();
      }
    }
    get restorationId() {
      return this.widget.restorationId;
    }
    dispose() {
      let t2, t2$;
      t2 = this[_focusNode];
      t2 == null ? null : t2.dispose();
      t2$ = this[_controller];
      t2$ == null ? null : t2$.dispose();
      super.dispose();
    }
    get [_editableText]() {
      return this.editableTextKey.currentState;
    }
    [_requestKeyboard]() {
      let t2;
      t2 = this[_editableText];
      t2 == null ? null : t2.requestKeyboard();
    }
    [_shouldShowSelectionHandles](cause) {
      if (!dart.test(this[_selectionGestureDetectorBuilder].shouldShowSelectionToolbar)) return false;
      if (cause == editable.SelectionChangedCause.keyboard) return false;
      if (dart.test(this.widget.readOnly) && dart.test(this[_effectiveController].selection.isCollapsed)) return false;
      if (!dart.test(this[_isEnabled])) return false;
      if (cause == editable.SelectionChangedCause.longPress) return true;
      if (this[_effectiveController].text[$isNotEmpty]) return true;
      return false;
    }
    [_handleSelectionChanged](selection, cause) {
      let t2;
      if (selection == null) dart.nullFailed(I[0], 1072, 46, "selection");
      let willShowSelectionHandles = this[_shouldShowSelectionHandles](cause);
      if (willShowSelectionHandles != this[_showSelectionHandles]) {
        this.setState(dart.fn(() => {
          this[_showSelectionHandles] = willShowSelectionHandles;
        }, T.VoidTovoid()));
      }
      switch (theme$.Theme.of(this.context).platform) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          if (cause == editable.SelectionChangedCause.longPress) {
            t2 = this[_editableText];
            t2 == null ? null : t2.bringIntoView(selection.base);
          }
          return;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        case C[4] || CT.C4:
        case C[5] || CT.C5:
        {
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_handleSelectionHandleTapped]() {
      if (dart.test(this[_effectiveController].selection.isCollapsed)) {
        dart.nullCheck(this[_editableText]).toggleToolbar();
      }
    }
    [_handleHover](hovering) {
      if (hovering == null) dart.nullFailed(I[0], 1102, 26, "hovering");
      if (hovering != this[_isHovering]) {
        this.setState(dart.fn(() => {
          this[_isHovering] = hovering;
        }, T.VoidTovoid()));
      }
    }
    build(context) {
      let t2, t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6;
      if (context == null) dart.nullFailed(I[0], 1111, 29, "context");
      if (!dart.test(debug.debugCheckHasMaterial(context))) dart.assertFailed(null, I[0], 1112, 12, "debugCheckHasMaterial(context)");
      if (!dart.test(debug.debugCheckHasMaterialLocalizations(context))) dart.assertFailed(null, I[0], 1113, 12, "debugCheckHasMaterialLocalizations(context)");
      if (!dart.test(debug$.debugCheckHasDirectionality(context))) dart.assertFailed(null, I[0], 1114, 12, "debugCheckHasDirectionality(context)");
      if (!!(this.widget.style != null && dart.nullCheck(this.widget.style).inherit === false && (dart.nullCheck(this.widget.style).fontSize == null || dart.nullCheck(this.widget.style).textBaseline == null))) dart.assertFailed("inherit false style must supply fontSize and textBaseline", I[0], 1116, 7, "!(widget.style != null && widget.style!.inherit == false &&\r\n        (widget.style!.fontSize == null || widget.style!.textBaseline == null))");
      let theme = theme$.Theme.of(context);
      let selectionTheme = text_selection_theme.TextSelectionTheme.of(context);
      let style = dart.nullCheck(theme.textTheme.subtitle1).merge(this.widget.style);
      let keyboardAppearance = (t2 = this.widget.keyboardAppearance, t2 == null ? theme.primaryColorBrightness : t2);
      let controller = this[_effectiveController];
      let focusNode = this[_effectiveFocusNode];
      let formatters = (() => {
        let t2 = T.JSArrayOfTextInputFormatter().of([]);
        let t3 = this.widget.inputFormatters;
        if (t3 != null) t2[$addAll](t3);
        if (this.widget.maxLength != null && dart.test(this.widget.maxLengthEnforced)) t2[$add](new text_formatter.LengthLimitingTextInputFormatter.new(this.widget.maxLength, {maxLengthEnforcement: this[_effectiveMaxLengthEnforcement]}));
        return t2;
      })();
      let textSelectionControls = this.widget.selectionControls;
      let paintCursorAboveText = null;
      let cursorOpacityAnimates = null;
      let cursorOffset = null;
      let cursorColor = this.widget.cursorColor;
      let selectionColor = null;
      let autocorrectionTextRectColor = null;
      let cursorRadius = this.widget.cursorRadius;
      switch (theme.platform) {
        case C[0] || CT.C0:
        {
          let cupertinoTheme = theme$0.CupertinoTheme.of(context);
          this.forcePressEnabled = true;
          textSelectionControls == null ? textSelectionControls = text_selection$.cupertinoTextSelectionControls : null;
          paintCursorAboveText = true;
          cursorOpacityAnimates = true;
          cursorColor == null ? cursorColor = (t4 = selectionTheme.cursorColor, t4 == null ? cupertinoTheme.primaryColor : t4) : null;
          selectionColor = (t4$ = selectionTheme.selectionColor, t4$ == null ? cupertinoTheme.primaryColor.withOpacity(0.4) : t4$);
          cursorRadius == null ? cursorRadius = C[27] || CT.C27 : null;
          cursorOffset = new ui.Offset.new(-2 / dart.notNull(media_query.MediaQuery.of(context).devicePixelRatio), 0.0);
          autocorrectionTextRectColor = selectionColor;
          break;
        }
        case C[1] || CT.C1:
        {
          let cupertinoTheme = theme$0.CupertinoTheme.of(context);
          this.forcePressEnabled = false;
          textSelectionControls == null ? textSelectionControls = desktop_text_selection.cupertinoDesktopTextSelectionControls : null;
          paintCursorAboveText = true;
          cursorOpacityAnimates = true;
          cursorColor == null ? cursorColor = (t4$0 = selectionTheme.cursorColor, t4$0 == null ? cupertinoTheme.primaryColor : t4$0) : null;
          selectionColor = (t4$1 = selectionTheme.selectionColor, t4$1 == null ? cupertinoTheme.primaryColor.withOpacity(0.4) : t4$1);
          cursorRadius == null ? cursorRadius = C[27] || CT.C27 : null;
          cursorOffset = new ui.Offset.new(-2 / dart.notNull(media_query.MediaQuery.of(context).devicePixelRatio), 0.0);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.forcePressEnabled = false;
          textSelectionControls == null ? textSelectionControls = text_selection$0.materialTextSelectionControls : null;
          paintCursorAboveText = false;
          cursorOpacityAnimates = false;
          cursorColor == null ? cursorColor = (t4$2 = selectionTheme.cursorColor, t4$2 == null ? theme.colorScheme.primary : t4$2) : null;
          selectionColor = (t4$3 = selectionTheme.selectionColor, t4$3 == null ? theme.colorScheme.primary.withOpacity(0.4) : t4$3);
          break;
        }
        case C[4] || CT.C4:
        case C[5] || CT.C5:
        {
          this.forcePressEnabled = false;
          textSelectionControls == null ? textSelectionControls = desktop_text_selection$.desktopTextSelectionControls : null;
          paintCursorAboveText = false;
          cursorOpacityAnimates = false;
          cursorColor == null ? cursorColor = (t4$4 = selectionTheme.cursorColor, t4$4 == null ? theme.colorScheme.primary : t4$4) : null;
          selectionColor = (t4$5 = selectionTheme.selectionColor, t4$5 == null ? theme.colorScheme.primary.withOpacity(0.4) : t4$5);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let child = new basic.RepaintBoundary.new({child: new restoration.UnmanagedRestorationScope.new({bucket: this.bucket, child: new editable_text.EditableText.new({key: this.editableTextKey, readOnly: dart.test(this.widget.readOnly) || !dart.test(this[_isEnabled]), toolbarOptions: this.widget.toolbarOptions, showCursor: this.widget.showCursor, showSelectionHandles: this[_showSelectionHandles], controller: controller, focusNode: focusNode, keyboardType: this.widget.keyboardType, textInputAction: this.widget.textInputAction, textCapitalization: this.widget.textCapitalization, style: style, strutStyle: this.widget.strutStyle, textAlign: this.widget.textAlign, textDirection: this.widget.textDirection, autofocus: this.widget.autofocus, obscuringCharacter: this.widget.obscuringCharacter, obscureText: this.widget.obscureText, autocorrect: this.widget.autocorrect, smartDashesType: this.widget.smartDashesType, smartQuotesType: this.widget.smartQuotesType, enableSuggestions: this.widget.enableSuggestions, maxLines: this.widget.maxLines, minLines: this.widget.minLines, expands: this.widget.expands, selectionColor: selectionColor, selectionControls: dart.test(this.widget.selectionEnabled) ? textSelectionControls : null, onChanged: this.widget.onChanged, onSelectionChanged: dart.bind(this, _handleSelectionChanged), onEditingComplete: this.widget.onEditingComplete, onSubmitted: this.widget.onSubmitted, onAppPrivateCommand: this.widget.onAppPrivateCommand, onSelectionHandleTapped: dart.bind(this, _handleSelectionHandleTapped), inputFormatters: formatters, rendererIgnoresPointer: true, mouseCursor: mouse_cursor.MouseCursor.defer, cursorWidth: this.widget.cursorWidth, cursorHeight: this.widget.cursorHeight, cursorRadius: cursorRadius, cursorColor: cursorColor, selectionHeightStyle: this.widget.selectionHeightStyle, selectionWidthStyle: this.widget.selectionWidthStyle, cursorOpacityAnimates: cursorOpacityAnimates, cursorOffset: cursorOffset, paintCursorAboveText: paintCursorAboveText, backgroundCursorColor: colors$.CupertinoColors.inactiveGray, scrollPadding: this.widget.scrollPadding, keyboardAppearance: keyboardAppearance, enableInteractiveSelection: this.widget.enableInteractiveSelection, dragStartBehavior: this.widget.dragStartBehavior, scrollController: this.widget.scrollController, scrollPhysics: this.widget.scrollPhysics, autofillHints: this.widget.autofillHints, autocorrectionTextRectColor: autocorrectionTextRectColor, restorationId: "editable", $creationLocationd_0dea112b090073317d4: C[28] || CT.C28}), $creationLocationd_0dea112b090073317d4: C[84] || CT.C84}), $creationLocationd_0dea112b090073317d4: C[88] || CT.C88});
      if (this.widget.decoration != null) {
        child = new transitions.AnimatedBuilder.new({animation: new change_notifier._MergingListenable.new(T.JSArrayOfListenable().of([focusNode, controller])), builder: dart.fn((context, child) => {
            if (context == null) dart.nullFailed(I[0], 1257, 32, "context");
            return new input_decorator.InputDecorator.new({decoration: this[_getEffectiveDecoration](), baseStyle: this.widget.style, textAlign: this.widget.textAlign, textAlignVertical: this.widget.textAlignVertical, isHovering: this[_isHovering], isFocused: focusNode.hasFocus, isEmpty: controller.value.text[$isEmpty], expands: this.widget.expands, child: child, $creationLocationd_0dea112b090073317d4: C[91] || CT.C91});
          }, T.BuildContextAndWidgetNToInputDecorator()), child: child, $creationLocationd_0dea112b090073317d4: C[102] || CT.C102});
      }
      let effectiveMouseCursor = material_state.MaterialStateProperty.resolveAs(mouse_cursor.MouseCursor, (t4$6 = this.widget.mouseCursor, t4$6 == null ? material_state.MaterialStateMouseCursor.textable : t4$6), (() => {
        let t4 = T.LinkedHashSetOfMaterialState().new();
        if (!dart.test(this[_isEnabled])) t4.add(material_state.MaterialState.disabled);
        if (dart.test(this[_isHovering])) t4.add(material_state.MaterialState.hovered);
        if (dart.test(focusNode.hasFocus)) t4.add(material_state.MaterialState.focused);
        if (dart.test(this[_hasError])) t4.add(material_state.MaterialState.error);
        return t4;
      })());
      let semanticsMaxValueLength = null;
      if (dart.test(this.widget.maxLengthEnforced) && this[_effectiveMaxLengthEnforcement] != text_formatter.MaxLengthEnforcement.none && this.widget.maxLength != null && dart.nullCheck(this.widget.maxLength) > 0) {
        semanticsMaxValueLength = this.widget.maxLength;
      } else {
        semanticsMaxValueLength = null;
      }
      child = new basic.MouseRegion.new({cursor: effectiveMouseCursor, onEnter: dart.fn(event => {
          if (event == null) dart.nullFailed(I[0], 1295, 35, "event");
          return this[_handleHover](true);
        }, T.PointerEnterEventTovoid()), onExit: dart.fn(event => {
          if (event == null) dart.nullFailed(I[0], 1296, 33, "event");
          return this[_handleHover](false);
        }, T.PointerExitEventTovoid()), child: new basic.IgnorePointer.new({ignoring: !dart.test(this[_isEnabled]), child: new transitions.AnimatedBuilder.new({animation: controller, builder: dart.fn((context, child) => {
              if (context == null) dart.nullFailed(I[0], 1301, 34, "context");
              return new basic.Semantics.new({maxValueLength: semanticsMaxValueLength, currentValueLength: this[_currentLength], onTap: dart.test(this.widget.readOnly) ? null : dart.fn(() => {
                  if (!dart.test(this[_effectiveController].selection.isValid)) this[_effectiveController].selection = new text_editing.TextSelection.collapsed({offset: this[_effectiveController].text.length});
                  this[_requestKeyboard]();
                }, T.VoidTovoid()), child: child, $creationLocationd_0dea112b090073317d4: C[107] || CT.C107});
            }, T.BuildContextAndWidgetNToSemantics()), child: this[_selectionGestureDetectorBuilder].buildGestureDetector({behavior: proxy_box.HitTestBehavior.translucent, child: child}), $creationLocationd_0dea112b090073317d4: C[113] || CT.C113}), $creationLocationd_0dea112b090073317d4: C[118] || CT.C118}), $creationLocationd_0dea112b090073317d4: C[122] || CT.C122});
      if (true) {
        return new shortcuts.Shortcuts.new({shortcuts: editable_text.scrollShortcutOverrides, child: child, $creationLocationd_0dea112b090073317d4: C[128] || CT.C128});
      }
      return child;
    }
  };
  (text_field._TextFieldState.new = function() {
    this[_controller] = null;
    this[_focusNode] = null;
    this[_isHovering] = false;
    this[_showSelectionHandles] = false;
    this[___TextFieldState__selectionGestureDetectorBuilder] = null;
    this[___TextFieldState__selectionGestureDetectorBuilder_isSet] = false;
    this[___TextFieldState_forcePressEnabled] = null;
    this[___TextFieldState_forcePressEnabled_isSet] = false;
    this.editableTextKey = T.GlobalKeyOfEditableTextState().new();
    text_field._TextFieldState.__proto__.new.call(this);
    ;
  }).prototype = text_field._TextFieldState.prototype;
  dart.addTypeTests(text_field._TextFieldState);
  dart.addTypeCaches(text_field._TextFieldState);
  text_field._TextFieldState[dart.implements] = () => [text_selection.TextSelectionGestureDetectorBuilderDelegate];
  dart.setMethodSignature(text_field._TextFieldState, () => ({
    __proto__: dart.getMethods(text_field._TextFieldState.__proto__),
    [_getEffectiveDecoration]: dart.fnType(input_decorator.InputDecoration, []),
    restoreState: dart.fnType(dart.void, [dart.nullable(restoration$.RestorationBucket), core.bool]),
    [_registerController]: dart.fnType(dart.void, []),
    [_createLocalController]: dart.fnType(dart.void, [], [dart.nullable(text_input.TextEditingValue)]),
    [_requestKeyboard]: dart.fnType(dart.void, []),
    [_shouldShowSelectionHandles]: dart.fnType(core.bool, [dart.nullable(editable.SelectionChangedCause)]),
    [_handleSelectionChanged]: dart.fnType(dart.void, [text_editing.TextSelection, dart.nullable(editable.SelectionChangedCause)]),
    [_handleSelectionHandleTapped]: dart.fnType(dart.void, []),
    [_handleHover]: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(text_field._TextFieldState, () => ({
    __proto__: dart.getGetters(text_field._TextFieldState.__proto__),
    [_effectiveController]: editable_text.TextEditingController,
    [_effectiveFocusNode]: focus_manager.FocusNode,
    [_effectiveMaxLengthEnforcement]: text_formatter.MaxLengthEnforcement,
    needsCounter: core.bool,
    [_selectionGestureDetectorBuilder]: text_field._TextFieldSelectionGestureDetectorBuilder,
    forcePressEnabled: core.bool,
    selectionEnabled: core.bool,
    [_isEnabled]: core.bool,
    [_currentLength]: core.int,
    [_hasIntrinsicError]: core.bool,
    [_hasError]: core.bool,
    [_canRequestFocus]: core.bool,
    restorationId: dart.nullable(core.String),
    [_editableText]: dart.nullable(editable_text.EditableTextState)
  }));
  dart.setSetterSignature(text_field._TextFieldState, () => ({
    __proto__: dart.getSetters(text_field._TextFieldState.__proto__),
    [_selectionGestureDetectorBuilder]: text_field._TextFieldSelectionGestureDetectorBuilder,
    forcePressEnabled: core.bool
  }));
  dart.setLibraryUri(text_field._TextFieldState, I[1]);
  dart.setFieldSignature(text_field._TextFieldState, () => ({
    __proto__: dart.getFields(text_field._TextFieldState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(restoration_properties.RestorableTextEditingController)),
    [_focusNode]: dart.fieldType(dart.nullable(focus_manager.FocusNode)),
    [_isHovering]: dart.fieldType(core.bool),
    [_showSelectionHandles]: dart.fieldType(core.bool),
    [___TextFieldState__selectionGestureDetectorBuilder]: dart.fieldType(dart.nullable(text_field._TextFieldSelectionGestureDetectorBuilder)),
    [___TextFieldState__selectionGestureDetectorBuilder_isSet]: dart.fieldType(core.bool),
    [___TextFieldState_forcePressEnabled]: dart.fieldType(dart.nullable(core.bool)),
    [___TextFieldState_forcePressEnabled_isSet]: dart.fieldType(core.bool),
    editableTextKey: dart.finalFieldType(framework.GlobalKey$(editable_text.EditableTextState))
  }));
  dart.trackLibraries("packages/flutter/src/material/text_field.dart", {
    "package:flutter/src/material/text_field.dart": text_field
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_field.dart"],"names":[],"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","file":"../../../../../../../../F:/packages/flutter/src/material/text_field.dart.lib.js"}');
  // Exports:
  return {
    src__material__text_field: text_field
  };
}));

//# sourceMappingURL=text_field.dart.lib.js.map
>>>>>>> 9fed4871f8cb2e24becf4331c7fe9d1d7a564371

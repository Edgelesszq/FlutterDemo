define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/listener_helpers.dart'], (function load__packages__fluro__src__common_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__listener_helpers$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const navigator = packages__flutter__src__widgets__widget_span$46dart.src__widgets__navigator;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  var common = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    HandlerTypeL: () => (T.HandlerTypeL = dart.constFn(dart.legacy(common.HandlerType)))(),
    TransitionTypeL: () => (T.TransitionTypeL = dart.constFn(dart.legacy(common.TransitionType)))(),
    RouteMatchTypeL: () => (T.RouteMatchTypeL = dart.constFn(dart.legacy(common.RouteMatchType)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: common.HandlerType.prototype,
        [_name$]: "HandlerType.route",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: common.HandlerType.prototype,
        [_name$]: "HandlerType.function",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T.HandlerTypeL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.native",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.nativeModal",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.inFromLeft",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.inFromTop",
        index: 3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.inFromRight",
        index: 4
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.inFromBottom",
        index: 5
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.fadeIn",
        index: 6
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.custom",
        index: 7
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.material",
        index: 8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.materialFullScreenDialog",
        index: 9
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.cupertino",
        index: 10
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.cupertinoFullScreenDialog",
        index: 11
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: common.TransitionType.prototype,
        [_name$]: "TransitionType.none",
        index: 12
      });
    },
    get C16() {
      return C[16] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15], T.TransitionTypeL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: common.RouteMatchType.prototype,
        [_name$]: "RouteMatchType.visual",
        index: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: common.RouteMatchType.prototype,
        [_name$]: "RouteMatchType.nonVisual",
        index: 1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: common.RouteMatchType.prototype,
        [_name$]: "RouteMatchType.noMatch",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19], T.RouteMatchTypeL());
    }
  }, false);
  var C = Array(21).fill(void 0);
  var I = [
    "file:///E:/flutterSDK/flutter/.pub-cache/hosted/pub.flutter-io.cn/fluro-2.0.3/lib/src/common.dart",
    "package:fluro/src/common.dart"
  ];
  var _name$ = dart.privateName(common, "_name");
  common.HandlerType = class HandlerType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (common.HandlerType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 14, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 14, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = common.HandlerType.prototype;
  dart.addTypeTests(common.HandlerType);
  dart.addTypeCaches(common.HandlerType);
  dart.setLibraryUri(common.HandlerType, I[1]);
  dart.setFieldSignature(common.HandlerType, () => ({
    __proto__: dart.getFields(common.HandlerType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(common.HandlerType, ['toString']);
  common.HandlerType.route = C[0] || CT.C0;
  common.HandlerType.function = C[1] || CT.C1;
  common.HandlerType.values = C[2] || CT.C2;
  var type$ = dart.privateName(common, "Handler.type");
  var handlerFunc$ = dart.privateName(common, "Handler.handlerFunc");
  common.Handler = class Handler extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get handlerFunc() {
      return this[handlerFunc$];
    }
    set handlerFunc(value) {
      super.handlerFunc = value;
    }
  };
  (common.Handler.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
    if (type == null) dart.nullFailed(I[0], 21, 17, "type");
    let handlerFunc = opts && 'handlerFunc' in opts ? opts.handlerFunc : null;
    if (handlerFunc == null) dart.nullFailed(I[0], 21, 57, "handlerFunc");
    this[type$] = type;
    this[handlerFunc$] = handlerFunc;
    ;
  }).prototype = common.Handler.prototype;
  dart.addTypeTests(common.Handler);
  dart.addTypeCaches(common.Handler);
  dart.setLibraryUri(common.Handler, I[1]);
  dart.setFieldSignature(common.Handler, () => ({
    __proto__: dart.getFields(common.Handler.__proto__),
    type: dart.finalFieldType(common.HandlerType),
    handlerFunc: dart.finalFieldType(dart.fnType(dart.nullable(framework.Widget), [dart.nullable(framework.BuildContext), core.Map$(core.String, core.List$(core.String))]))
  }));
  var route$ = dart.privateName(common, "AppRoute.route");
  var handler$ = dart.privateName(common, "AppRoute.handler");
  var transitionType$ = dart.privateName(common, "AppRoute.transitionType");
  var transitionDuration$ = dart.privateName(common, "AppRoute.transitionDuration");
  var transitionBuilder$ = dart.privateName(common, "AppRoute.transitionBuilder");
  common.AppRoute = class AppRoute extends core.Object {
    get route() {
      return this[route$];
    }
    set route(value) {
      this[route$] = value;
    }
    get handler() {
      return this[handler$];
    }
    set handler(value) {
      this[handler$] = value;
    }
    get transitionType() {
      return this[transitionType$];
    }
    set transitionType(value) {
      this[transitionType$] = value;
    }
    get transitionDuration() {
      return this[transitionDuration$];
    }
    set transitionDuration(value) {
      this[transitionDuration$] = value;
    }
    get transitionBuilder() {
      return this[transitionBuilder$];
    }
    set transitionBuilder(value) {
      this[transitionBuilder$] = value;
    }
  };
  (common.AppRoute.new = function(route, handler, opts) {
    if (route == null) dart.nullFailed(I[0], 43, 17, "route");
    let transitionType = opts && 'transitionType' in opts ? opts.transitionType : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
    this[route$] = route;
    this[handler$] = handler;
    this[transitionType$] = transitionType;
    this[transitionDuration$] = transitionDuration;
    this[transitionBuilder$] = transitionBuilder;
    ;
  }).prototype = common.AppRoute.prototype;
  dart.addTypeTests(common.AppRoute);
  dart.addTypeCaches(common.AppRoute);
  dart.setLibraryUri(common.AppRoute, I[1]);
  dart.setFieldSignature(common.AppRoute, () => ({
    __proto__: dart.getFields(common.AppRoute.__proto__),
    route: dart.fieldType(core.String),
    handler: dart.fieldType(dart.dynamic),
    transitionType: dart.fieldType(dart.nullable(common.TransitionType)),
    transitionDuration: dart.fieldType(dart.nullable(core.Duration)),
    transitionBuilder: dart.fieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])))
  }));
  common.TransitionType = class TransitionType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (common.TransitionType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 50, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 50, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = common.TransitionType.prototype;
  dart.addTypeTests(common.TransitionType);
  dart.addTypeCaches(common.TransitionType);
  dart.setLibraryUri(common.TransitionType, I[1]);
  dart.setFieldSignature(common.TransitionType, () => ({
    __proto__: dart.getFields(common.TransitionType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(common.TransitionType, ['toString']);
  common.TransitionType.native = C[3] || CT.C3;
  common.TransitionType.nativeModal = C[4] || CT.C4;
  common.TransitionType.inFromLeft = C[5] || CT.C5;
  common.TransitionType.inFromTop = C[6] || CT.C6;
  common.TransitionType.inFromRight = C[7] || CT.C7;
  common.TransitionType.inFromBottom = C[8] || CT.C8;
  common.TransitionType.fadeIn = C[9] || CT.C9;
  common.TransitionType.custom = C[10] || CT.C10;
  common.TransitionType.material = C[11] || CT.C11;
  common.TransitionType.materialFullScreenDialog = C[12] || CT.C12;
  common.TransitionType.cupertino = C[13] || CT.C13;
  common.TransitionType.cupertinoFullScreenDialog = C[14] || CT.C14;
  common.TransitionType.none = C[15] || CT.C15;
  common.TransitionType.values = C[16] || CT.C16;
  common.RouteMatchType = class RouteMatchType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (common.RouteMatchType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 67, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 67, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = common.RouteMatchType.prototype;
  dart.addTypeTests(common.RouteMatchType);
  dart.addTypeCaches(common.RouteMatchType);
  dart.setLibraryUri(common.RouteMatchType, I[1]);
  dart.setFieldSignature(common.RouteMatchType, () => ({
    __proto__: dart.getFields(common.RouteMatchType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(common.RouteMatchType, ['toString']);
  common.RouteMatchType.visual = C[17] || CT.C17;
  common.RouteMatchType.nonVisual = C[18] || CT.C18;
  common.RouteMatchType.noMatch = C[19] || CT.C19;
  common.RouteMatchType.values = C[20] || CT.C20;
  var route$0 = dart.privateName(common, "RouteMatch.route");
  var matchType$ = dart.privateName(common, "RouteMatch.matchType");
  var errorMessage$ = dart.privateName(common, "RouteMatch.errorMessage");
  common.RouteMatch = class RouteMatch extends core.Object {
    get route() {
      return this[route$0];
    }
    set route(value) {
      super.route = value;
    }
    get matchType() {
      return this[matchType$];
    }
    set matchType(value) {
      super.matchType = value;
    }
    get errorMessage() {
      return this[errorMessage$];
    }
    set errorMessage(value) {
      super.errorMessage = value;
    }
  };
  (common.RouteMatch.new = function(opts) {
    let matchType = opts && 'matchType' in opts ? opts.matchType : C[19] || CT.C19;
    if (matchType == null) dart.nullFailed(I[0], 76, 13, "matchType");
    let route = opts && 'route' in opts ? opts.route : null;
    let errorMessage = opts && 'errorMessage' in opts ? opts.errorMessage : "Unable to match route. Please check the logs.";
    if (errorMessage == null) dart.nullFailed(I[0], 78, 12, "errorMessage");
    this[matchType$] = matchType;
    this[route$0] = route;
    this[errorMessage$] = errorMessage;
    ;
  }).prototype = common.RouteMatch.prototype;
  dart.addTypeTests(common.RouteMatch);
  dart.addTypeCaches(common.RouteMatch);
  dart.setLibraryUri(common.RouteMatch, I[1]);
  dart.setFieldSignature(common.RouteMatch, () => ({
    __proto__: dart.getFields(common.RouteMatch.__proto__),
    route: dart.finalFieldType(dart.nullable(navigator.Route)),
    matchType: dart.finalFieldType(common.RouteMatchType),
    errorMessage: dart.finalFieldType(core.String)
  }));
  var message$ = dart.privateName(common, "RouteNotFoundException.message");
  var path$ = dart.privateName(common, "RouteNotFoundException.path");
  common.RouteNotFoundException = class RouteNotFoundException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    toString() {
      return "No registered route was found to handle '" + dart.str(this.path) + "'";
    }
  };
  (common.RouteNotFoundException.new = function(message, path) {
    if (message == null) dart.nullFailed(I[0], 88, 31, "message");
    if (path == null) dart.nullFailed(I[0], 88, 45, "path");
    this[message$] = message;
    this[path$] = path;
    ;
  }).prototype = common.RouteNotFoundException.prototype;
  dart.addTypeTests(common.RouteNotFoundException);
  dart.addTypeCaches(common.RouteNotFoundException);
  common.RouteNotFoundException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(common.RouteNotFoundException, I[1]);
  dart.setFieldSignature(common.RouteNotFoundException, () => ({
    __proto__: dart.getFields(common.RouteNotFoundException.__proto__),
    message: dart.finalFieldType(core.String),
    path: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(common.RouteNotFoundException, ['toString']);
  dart.trackLibraries("packages/fluro/src/common.dart", {
    "package:fluro/src/common.dart": common
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["common.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBA;;;QAHK;;;;;EAGL;;;;;;;;;;;;;;;;IAKoB;;;;;;IACA;;;;;;;;QAFJ;;QAAwC;;IAAxC;IAAwC;;EAAa;;;;;;;;;;;;;;;IAiB5D;;;;;;IACC;;;;;;IACQ;;;;;;IACN;;;;;;IACe;;;;;;;kCACX,OAAY;QAAZ;QACJ;QAAqB;QAAyB;IAD1C;IAAY;IAChB;IAAqB;IAAyB;;EAAmB;;;;;;;;;;;;;;;IAoB7E;;;QAdK;;;;;EAcL;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOA;;;QAJK;;;;;EAIL;;;;;;;;;;;;;;;;;;IAQwB;;;;;;IACD;;;;;;IACR;;;;;;;;QALH;;QACD;QACA;;IAFC;IACD;IACA;;EAAgE;;;;;;;;;;;;;IAQ5D;;;;;;IACA;;;;;;;AAKX,YAAO,AAAiD,wDAAN,aAAI;IACxD;;gDAL4B,SAAc;QAAd;QAAc;IAAd;IAAc;;EAAK","file":"../../../../../../../../../F:/packages/fluro/src/common.dart.lib.js"}');
  // Exports:
  return {
    src__common: common
  };
}));

//# sourceMappingURL=common.dart.lib.js.map
